// <auto-generated />
using System;
using IBS.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IBS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240513043716_RevertTheChangingOfDataTypeForOfflineTable")]
    partial class RevertTheChangingOfDataTypeForOfflineTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IBS.Models.ChartOfAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AccountType")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("NormalBalance")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(15)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountName");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.ToTable("ChartOfAccounts");
                });

            modelBuilder.Entity("IBS.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyCode")
                        .IsUnique();

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IBS.Models.CsvFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("boolean");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.HasKey("FileId");

                    b.ToTable("CsvFiles");
                });

            modelBuilder.Entity("IBS.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(7)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerTerms")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("WithHoldingTax")
                        .HasColumnType("boolean");

                    b.Property<bool>("WithHoldingVat")
                        .HasColumnType("boolean");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerCode")
                        .IsUnique();

                    b.HasIndex("CustomerName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IBS.Models.Fuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Closing")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly>("End")
                        .HasColumnType("time without time zone");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("InTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision");

                    b.Property<double>("Opening")
                        .HasColumnType("double precision");

                    b.Property<TimeOnly>("OutTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Start")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TransCount")
                        .HasColumnType("integer");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("nozdown")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("xCORPCODE")
                        .HasColumnType("integer");

                    b.Property<int>("xDAY")
                        .HasColumnType("integer");

                    b.Property<int>("xMONTH")
                        .HasColumnType("integer");

                    b.Property<int>("xNOZZLE")
                        .HasColumnType("integer");

                    b.Property<string>("xOID")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer");

                    b.Property<int>("xTANK")
                        .HasColumnType("integer");

                    b.Property<int>("xTRANSACTION")
                        .HasColumnType("integer");

                    b.Property<int>("xYEAR")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("INV_DATE");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("ItemCode");

                    b.HasIndex("Particulars");

                    b.HasIndex("Shift");

                    b.HasIndex("xONAME");

                    b.HasIndex("xPUMP");

                    b.HasIndex("xSITECODE");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("IBS.Models.FuelDelivery", b =>
                {
                    b.Property<Guid>("FuelDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly>("deliverydate")
                        .HasColumnType("date");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("platenumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("purchaseprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("receivedby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("sellprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("tanknumber")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("timein")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("timeout")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("volumeafter")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("volumebefore")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("wcnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("FuelDeliveryId");

                    b.HasIndex("shiftrecid");

                    b.HasIndex("stncode");

                    b.ToTable("FuelDeliveries");
                });

            modelBuilder.Entity("IBS.Models.FuelPurchase", b =>
                {
                    b.Property<int>("FuelPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuelPurchaseId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FuelPurchaseNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("QuantityAfter")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("QuantityBefore")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("ShouldBe")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("TankNo")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WcNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("FuelPurchaseId");

                    b.HasIndex("FuelPurchaseNo")
                        .IsUnique();

                    b.HasIndex("ProductCode");

                    b.HasIndex("StationCode");

                    b.ToTable("FuelPurchase");
                });

            modelBuilder.Entity("IBS.Models.GeneralLedger", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeneralLedgerId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean");

                    b.Property<string>("JournalReference")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("GeneralLedgerId");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("AccountTitle");

                    b.HasIndex("CustomerCode");

                    b.HasIndex("JournalReference");

                    b.HasIndex("ProductCode");

                    b.HasIndex("Reference");

                    b.HasIndex("StationCode");

                    b.HasIndex("SupplierCode");

                    b.HasIndex("TransactionDate");

                    b.ToTable("GeneralLedgers");
                });

            modelBuilder.Entity("IBS.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal>("CostOfGoodsSold")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("InventoryBalance")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("InventoryValue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("RunningCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("StationCode")
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("UnitCostAverage")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ValidatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductCode");

                    b.HasIndex("StationCode");

                    b.HasIndex("TransactionNo");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("IBS.Models.LogMessage", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoggerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LogId");

                    b.ToTable("LogMessages");
                });

            modelBuilder.Entity("IBS.Models.Lube", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)");

                    b.Property<int>("LubesQty")
                        .HasColumnType("integer");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("xCORPCODE")
                        .HasColumnType("integer");

                    b.Property<int>("xDAY")
                        .HasColumnType("integer");

                    b.Property<int>("xMONTH")
                        .HasColumnType("integer");

                    b.Property<string>("xOID")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer");

                    b.Property<string>("xStamp")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("xTRANSACTION")
                        .HasColumnType("bigint");

                    b.Property<int>("xYEAR")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Cashier");

                    b.HasIndex("INV_DATE");

                    b.ToTable("Lubes");
                });

            modelBuilder.Entity("IBS.Models.LubeDelivery", b =>
                {
                    b.Property<Guid>("LubeDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly>("deliverydate")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("drno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("dtllink")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("invoiceno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("piece")
                        .HasColumnType("integer");

                    b.Property<string>("pono")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<string>("rcvdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("suppliercode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("unitprice")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("LubeDeliveryId");

                    b.HasIndex("dtllink");

                    b.HasIndex("shiftrecid");

                    b.HasIndex("stncode");

                    b.ToTable("LubeDeliveries");
                });

            modelBuilder.Entity("IBS.Models.LubePurchaseDetail", b =>
                {
                    b.Property<int>("LubePurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CostPerCase")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CostPerPiece")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("LubePurchaseHeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Piece")
                        .HasColumnType("integer");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("LubePurchaseDetailId");

                    b.HasIndex("LubePurchaseHeaderId");

                    b.HasIndex("LubePurchaseHeaderNo");

                    b.HasIndex("ProductCode");

                    b.ToTable("LubePurchaseDetails");
                });

            modelBuilder.Entity("IBS.Models.LubePurchaseHeader", b =>
                {
                    b.Property<int>("LubePurchaseHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseHeaderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DetailLink")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PoNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesInvoice")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LubePurchaseHeaderId");

                    b.HasIndex("LubePurchaseHeaderNo")
                        .IsUnique();

                    b.HasIndex("StationCode");

                    b.ToTable("LubePurchaseHeaders");
                });

            modelBuilder.Entity("IBS.Models.Offline", b =>
                {
                    b.Property<int>("OfflineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfflineId"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<double>("Closing")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision");

                    b.Property<double>("Opening")
                        .HasColumnType("double precision");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Pump")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesNo")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.HasKey("OfflineId");

                    b.ToTable("Offlines");
                });

            modelBuilder.Entity("IBS.Models.POSales", b =>
                {
                    b.Property<int>("POSalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("POSalesId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("ContractPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("POSalesDate")
                        .HasColumnType("date");

                    b.Property<string>("POSalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly?>("POSalesTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TripTicket")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("POSalesId");

                    b.HasIndex("POSalesNo")
                        .IsUnique();

                    b.ToTable("POSales");
                });

            modelBuilder.Entity("IBS.Models.PoSalesRaw", b =>
                {
                    b.Property<Guid>("POSalesRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("contractprice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customercode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("podate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("potime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("tripticket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("POSalesRawId");

                    b.HasIndex("shiftrecid");

                    b.HasIndex("stncode");

                    b.HasIndex("tripticket");

                    b.ToTable("PoSalesRaw");
                });

            modelBuilder.Entity("IBS.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCode")
                        .IsUnique();

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("IBS.Models.SafeDrop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateOnly>("BDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("TTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("xCORPCODE")
                        .HasColumnType("integer");

                    b.Property<int>("xDAY")
                        .HasColumnType("integer");

                    b.Property<int>("xMONTH")
                        .HasColumnType("integer");

                    b.Property<string>("xOID")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer");

                    b.Property<string>("xSTAMP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("xYEAR")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("INV_DATE");

                    b.HasIndex("xONAME");

                    b.ToTable("SafeDrops");
                });

            modelBuilder.Entity("IBS.Models.SalesDetail", b =>
                {
                    b.Property<int>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesDetailId"));

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric");

                    b.Property<double>("Closing")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsTransactionNormal")
                        .HasColumnType("boolean");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision");

                    b.Property<double>("LitersSold")
                        .HasColumnType("double precision");

                    b.Property<double>("Opening")
                        .HasColumnType("double precision");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("SalesHeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("SalesDetailId");

                    b.HasIndex("SalesHeaderId");

                    b.HasIndex("SalesNo");

                    b.HasIndex("StationCode");

                    b.ToTable("SalesDetails");
                });

            modelBuilder.Entity("IBS.Models.SalesHeader", b =>
                {
                    b.Property<int>("SalesHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesHeaderId"));

                    b.Property<decimal>("ActualCashOnHand")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("Customers")
                        .IsRequired()
                        .HasColumnType("varchar[]");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FuelSalesTotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransactionNormal")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LubesTotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal[]>("POSalesAmount")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)[]");

                    b.Property<decimal>("POSalesTotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Particular")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SafeDropTotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("StationPosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SalesHeaderId");

                    b.HasIndex("Cashier");

                    b.HasIndex("Date");

                    b.HasIndex("SalesNo");

                    b.HasIndex("Shift");

                    b.HasIndex("StationCode");

                    b.HasIndex("StationPosCode");

                    b.ToTable("SalesHeaders");
                });

            modelBuilder.Entity("IBS.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Initial")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PosCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("StationId");

                    b.HasIndex("PosCode")
                        .IsUnique();

                    b.HasIndex("StationCode")
                        .IsUnique();

                    b.HasIndex("StationName")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("IBS.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProofOfRegistrationFilePath")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(7)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTerms")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.HasIndex("SupplierName")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IBS.Models.ViewModels.FuelSalesView", b =>
                {
                    b.Property<decimal>("AmountDb")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric");

                    b.Property<double>("Closing")
                        .HasColumnType("double precision");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision");

                    b.Property<double>("LitersSold")
                        .HasColumnType("double precision");

                    b.Property<double>("Opening")
                        .HasColumnType("double precision");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("fuel_sales_view", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IBS.Models.ViewModels.GeneralLedgerView", b =>
                {
                    b.HasBaseType("IBS.Models.GeneralLedger");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("NormalBalance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("general_ledger_view", (string)null);
                });

            modelBuilder.Entity("IBS.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("IBS.Models.LubePurchaseDetail", b =>
                {
                    b.HasOne("IBS.Models.LubePurchaseHeader", "LubePurchaseHeader")
                        .WithMany()
                        .HasForeignKey("LubePurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LubePurchaseHeader");
                });

            modelBuilder.Entity("IBS.Models.SalesDetail", b =>
                {
                    b.HasOne("IBS.Models.SalesHeader", "SalesHeader")
                        .WithMany()
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
