// <auto-generated />
using System;
using IBS.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IBS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240706065210_AddDataTypeForDeliveryType")]
    partial class AddDataTypeForDeliveryType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IBS.Models.CsvFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("file_name");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_uploaded");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.HasKey("FileId")
                        .HasName("pk_csv_files");

                    b.ToTable("csv_files", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideCustomerOrderSlip", b =>
                {
                    b.Property<int>("CustomerOrderSlipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerOrderSlipId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_date");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance_quantity");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerOrderSlipNo")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasColumnName("customer_order_slip_no");

                    b.Property<string>("CustomerPoNo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customer_po_no");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("DeliveredPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("delivered_price");

                    b.Property<decimal>("DeliveredQuantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("delivered_quantity");

                    b.Property<DateTime>("DeliveryDateAndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date_and_time");

                    b.Property<string>("DisapprovedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("disapproved_by");

                    b.Property<DateTime?>("DisapprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disapproved_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delivered");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("Vat")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat");

                    b.HasKey("CustomerOrderSlipId")
                        .HasName("pk_filpride_customer_order_slips");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_customer_id");

                    b.HasIndex("CustomerOrderSlipNo")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_customer_order_slips_customer_order_slip_no");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_customer_order_slips_date");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_purchase_order_id");

                    b.ToTable("filpride_customer_order_slips", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideDeliveryReceipt", b =>
                {
                    b.Property<int>("DeliveryReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeliveryReceiptId"));

                    b.Property<string>("AuthorityToLoadNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DeliveryReceiptNo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("delivery_receipt_no");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("delivery_type");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("freight");

                    b.Property<int>("HaulerId")
                        .HasColumnType("integer")
                        .HasColumnName("hauler_id");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("invoice_no");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("LoadPort")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("load_port");

                    b.Property<decimal>("NetOfVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_of_vat_amount");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("DeliveryReceiptId")
                        .HasName("pk_filpride_delivery_receipts");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_customer_id");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_customer_order_slip_id");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_delivery_receipts_date");

                    b.HasIndex("DeliveryReceiptNo")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_delivery_receipts_delivery_receipt_no");

                    b.HasIndex("HaulerId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_hauler_id");

                    b.HasIndex("InvoiceNo")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_delivery_receipts_invoice_no");

                    b.ToTable("filpride_delivery_receipts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilpridePurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsServed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_served");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("port");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("purchase_order_no");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityServed")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_served");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("ServedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("served_date");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("terms");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unit_cost");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("PurchaseOrderId")
                        .HasName("pk_filpride_purchase_orders");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_purchase_orders_date");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_filpride_purchase_orders_product_id");

                    b.HasIndex("PurchaseOrderNo")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_purchase_orders_purchase_order_no");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_purchase_orders_supplier_id");

                    b.ToTable("filpride_purchase_orders", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideReceivingReport", b =>
                {
                    b.Property<int>("ReceivingReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("receiving_report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceivingReportId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("DeliveryReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<decimal>("NetOfTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_of_tax_amount");

                    b.Property<decimal>("NetOfVatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_of_vat_amount");

                    b.Property<string>("OtherReference")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("other_reference");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("QuantityDelivered")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_delivered");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_received");

                    b.Property<string>("ReceivingReportNo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("receiving_report_no");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<DateOnly?>("SupplierDrDate")
                        .HasColumnType("date")
                        .HasColumnName("supplier_dr_date");

                    b.Property<string>("SupplierDrNo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_dr_no");

                    b.Property<DateOnly?>("SupplierSiDate")
                        .HasColumnType("date")
                        .HasColumnName("supplier_si_date");

                    b.Property<string>("SupplierSiNo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_si_no");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("TotalFreight")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_freight");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("WithdrawalCertificate")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("withdrawal_certificate");

                    b.HasKey("ReceivingReportId")
                        .HasName("pk_filpride_receiving_reports");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_receiving_reports_customer_id");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_receiving_reports_date");

                    b.HasIndex("DeliveryReceiptId")
                        .HasDatabaseName("ix_filpride_receiving_reports_delivery_receipt_id");

                    b.HasIndex("ReceivingReportNo")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_receiving_reports_receiving_report_no");

                    b.ToTable("filpride_receiving_reports", (string)null);
                });

            modelBuilder.Entity("IBS.Models.GeneralLedger", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("general_ledger_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeneralLedgerId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("credit");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("customer_code");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("debit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_validated");

                    b.Property<string>("JournalReference")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("journal_reference");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product_code");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("supplier_code");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.HasKey("GeneralLedgerId");

                    b.HasIndex("AccountNumber")
                        .HasDatabaseName("ix_general_ledgers_account_number");

                    b.HasIndex("AccountTitle")
                        .HasDatabaseName("ix_general_ledgers_account_title");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("ix_general_ledgers_customer_code");

                    b.HasIndex("JournalReference")
                        .HasDatabaseName("ix_general_ledgers_journal_reference");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_general_ledgers_product_code");

                    b.HasIndex("Reference")
                        .HasDatabaseName("ix_general_ledgers_reference");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_general_ledgers_station_code");

                    b.HasIndex("SupplierCode")
                        .HasDatabaseName("ix_general_ledgers_supplier_code");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("ix_general_ledgers_transaction_date");

                    b.ToTable("general_ledgers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal>("CostOfGoodsSold")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cost_of_goods_sold");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("InventoryBalance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("inventory_balance");

                    b.Property<decimal>("InventoryValue")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("inventory_value");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("particulars");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reference");

                    b.Property<decimal>("RunningCost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("running_cost");

                    b.Property<string>("StationCode")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("station_code");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_cost");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transaction_no");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_cost");

                    b.Property<decimal>("UnitCostAverage")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_cost_average");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("validated_by");

                    b.Property<DateTime?>("ValidatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validated_date");

                    b.HasKey("InventoryId")
                        .HasName("pk_inventories");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_inventories_product_code");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_inventories_station_code");

                    b.HasIndex("TransactionNo")
                        .HasDatabaseName("ix_inventories_transaction_no");

                    b.ToTable("inventories", (string)null);
                });

            modelBuilder.Entity("IBS.Models.LogMessage", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("log_id");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log_level");

                    b.Property<string>("LoggerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logger_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_stamp");

                    b.HasKey("LogId")
                        .HasName("pk_log_messages");

                    b.ToTable("log_messages", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.ChartOfAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("account_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NormalBalance")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normal_balance");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("parent");

                    b.HasKey("AccountId")
                        .HasName("pk_chart_of_accounts");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("ix_chart_of_accounts_account_name");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_chart_of_accounts_account_number");

                    b.ToTable("chart_of_accounts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("business_style");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company_address");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(3)")
                        .HasColumnName("company_code");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("company_tin");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("CompanyId")
                        .HasName("pk_companies");

                    b.HasIndex("CompanyCode")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_company_code");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_company_name");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("business_style");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerTerms")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("customer_terms");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customer_tin");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customer_type");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("vat_type");

                    b.Property<bool>("WithHoldingTax")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_tax");

                    b.Property<bool>("WithHoldingVat")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_vat");

                    b.HasKey("CustomerId")
                        .HasName("pk_customers");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_customer_code");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("ix_customers_customer_name");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Hauler", b =>
                {
                    b.Property<int>("HaulerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("hauler_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HaulerId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("contact_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("HaulerAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("hauler_address");

                    b.Property<string>("HaulerCode")
                        .HasColumnType("varchar(3)")
                        .HasColumnName("hauler_code");

                    b.Property<string>("HaulerName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauler_name");

                    b.HasKey("HaulerId")
                        .HasName("pk_haulers");

                    b.HasIndex("HaulerCode")
                        .IsUnique()
                        .HasDatabaseName("ix_haulers_hauler_code");

                    b.HasIndex("HaulerName")
                        .IsUnique()
                        .HasDatabaseName("ix_haulers_hauler_name");

                    b.ToTable("haulers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("product_unit");

                    b.HasKey("ProductId")
                        .HasName("pk_products");

                    b.HasIndex("ProductCode")
                        .IsUnique()
                        .HasDatabaseName("ix_products_product_code");

                    b.HasIndex("ProductName")
                        .IsUnique()
                        .HasDatabaseName("ix_products_product_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("folder_path");

                    b.Property<string>("Initial")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("initial");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PosCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pos_code");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("station_name");

                    b.HasKey("StationId")
                        .HasName("pk_stations");

                    b.HasIndex("PosCode")
                        .IsUnique()
                        .HasDatabaseName("ix_stations_pos_code");

                    b.HasIndex("StationCode")
                        .IsUnique()
                        .HasDatabaseName("ix_stations_station_code");

                    b.HasIndex("StationName")
                        .IsUnique()
                        .HasDatabaseName("ix_stations_station_name");

                    b.ToTable("stations", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProofOfRegistrationFilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("proof_of_registration_file_path");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("supplier_address");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("supplier_code");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierTerms")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("supplier_terms");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("supplier_tin");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tax_type");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("vat_type");

                    b.HasKey("SupplierId")
                        .HasName("pk_suppliers");

                    b.HasIndex("SupplierCode")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_supplier_code");

                    b.HasIndex("SupplierName")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_supplier_name");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.LubeDelivery", b =>
                {
                    b.Property<Guid>("LubeDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("lube_delivery_id");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateOnly>("deliverydate")
                        .HasColumnType("date")
                        .HasColumnName("deliverydate");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("drno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drno");

                    b.Property<string>("dtllink")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dtllink");

                    b.Property<string>("invoiceno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("invoiceno");

                    b.Property<int>("piece")
                        .HasColumnType("integer")
                        .HasColumnName("piece");

                    b.Property<string>("pono")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pono");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<int>("quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("rcvdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rcvdby");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shiftrecid");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<string>("suppliercode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("suppliercode");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unit");

                    b.Property<decimal>("unitprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unitprice");

                    b.HasKey("LubeDeliveryId")
                        .HasName("pk_mobility_lube_deliveries");

                    b.HasIndex("dtllink")
                        .HasDatabaseName("ix_mobility_lube_deliveries_dtllink");

                    b.HasIndex("shiftrecid")
                        .HasDatabaseName("ix_mobility_lube_deliveries_shiftrecid");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_lube_deliveries_stncode");

                    b.ToTable("mobility_lube_deliveries", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric")
                        .HasColumnName("calibration");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric")
                        .HasColumnName("closing");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("DetailGroup")
                        .HasColumnType("integer")
                        .HasColumnName("detail_group");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<TimeOnly?>("End")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<TimeOnly?>("InTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("in_time");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("item_code");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric")
                        .HasColumnName("liters");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric")
                        .HasColumnName("opening");

                    b.Property<TimeOnly?>("OutTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("out_time");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<TimeOnly?>("Start")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start");

                    b.Property<int>("TransCount")
                        .HasColumnType("integer")
                        .HasColumnName("trans_count");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cust");

                    b.Property<string>("nozdown")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nozdown");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("plateno");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pono");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<int?>("xNOZZLE")
                        .HasColumnType("integer")
                        .HasColumnName("x_nozzle");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oid");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oname");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer")
                        .HasColumnName("x_pump");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<int?>("xTANK")
                        .HasColumnType("integer")
                        .HasColumnName("x_tank");

                    b.Property<int?>("xTRANSACTION")
                        .HasColumnType("integer")
                        .HasColumnName("x_transaction");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fuels");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_fuels_inv_date");

                    b.HasIndex("ItemCode")
                        .HasDatabaseName("ix_mobility_fuels_item_code");

                    b.HasIndex("Particulars")
                        .HasDatabaseName("ix_mobility_fuels_particulars");

                    b.HasIndex("Shift")
                        .HasDatabaseName("ix_mobility_fuels_shift");

                    b.HasIndex("xONAME")
                        .HasDatabaseName("ix_mobility_fuels_x_oname");

                    b.HasIndex("xPUMP")
                        .HasDatabaseName("ix_mobility_fuels_x_pump");

                    b.HasIndex("xSITECODE")
                        .HasDatabaseName("ix_mobility_fuels_x_sitecode");

                    b.ToTable("mobility_fuels", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuelDelivery", b =>
                {
                    b.Property<Guid>("FuelDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("fuel_delivery_id");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<DateOnly>("deliverydate")
                        .HasColumnType("date")
                        .HasColumnName("deliverydate");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("driver");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drnumber");

                    b.Property<string>("hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauler");

                    b.Property<string>("platenumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("platenumber");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<decimal>("purchaseprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("purchaseprice");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<string>("receivedby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("receivedby");

                    b.Property<decimal>("sellprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("sellprice");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shiftrecid");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<int>("tanknumber")
                        .HasColumnType("integer")
                        .HasColumnName("tanknumber");

                    b.Property<TimeOnly>("timein")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timein");

                    b.Property<TimeOnly>("timeout")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timeout");

                    b.Property<decimal>("volumeafter")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("volumeafter");

                    b.Property<decimal>("volumebefore")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("volumebefore");

                    b.Property<string>("wcnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wcnumber");

                    b.HasKey("FuelDeliveryId")
                        .HasName("pk_mobility_fuel_deliveries");

                    b.HasIndex("shiftrecid")
                        .HasDatabaseName("ix_mobility_fuel_deliveries_shiftrecid");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_fuel_deliveries_stncode");

                    b.ToTable("mobility_fuel_deliveries", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuelPurchase", b =>
                {
                    b.Property<int>("FuelPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fuel_purchase_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuelPurchaseId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FuelPurchaseNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fuel_purchase_no");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("gain_or_loss");

                    b.Property<string>("Hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauler");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("purchase_price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityAfter")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_after");

                    b.Property<decimal>("QuantityBefore")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity_before");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("received_by");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("selling_price");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shift_rec_id");

                    b.Property<decimal>("ShouldBe")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("should_be");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<int>("TankNo")
                        .HasColumnType("integer")
                        .HasColumnName("tank_no");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("WcNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wc_no");

                    b.HasKey("FuelPurchaseId")
                        .HasName("pk_mobility_fuel_purchase");

                    b.HasIndex("FuelPurchaseNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_fuel_purchase_fuel_purchase_no");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_fuel_purchase_product_code");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fuel_purchase_station_code");

                    b.ToTable("mobility_fuel_purchase", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLube", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cashier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("item_code");

                    b.Property<decimal>("LubesQty")
                        .HasColumnType("numeric")
                        .HasColumnName("lubes_qty");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cust");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("plateno");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pono");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("x_oid");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<string>("xStamp")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("x_stamp");

                    b.Property<int?>("xTRANSACTION")
                        .HasColumnType("integer")
                        .HasColumnName("x_transaction");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_lubes");

                    b.HasIndex("Cashier")
                        .HasDatabaseName("ix_mobility_lubes_cashier");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_lubes_inv_date");

                    b.ToTable("mobility_lubes", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseDetail", b =>
                {
                    b.Property<int>("LubePurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("CostPerCase")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cost_per_case");

                    b.Property<decimal>("CostPerPiece")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("cost_per_piece");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("LubePurchaseHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_header_id");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lube_purchase_header_no");

                    b.Property<int>("Piece")
                        .HasColumnType("integer")
                        .HasColumnName("piece");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unit");

                    b.HasKey("LubePurchaseDetailId")
                        .HasName("pk_mobility_lube_purchase_details");

                    b.HasIndex("LubePurchaseHeaderId")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_lube_purchase_header_id");

                    b.HasIndex("LubePurchaseHeaderNo")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_lube_purchase_header_no");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_product_code");

                    b.ToTable("mobility_lube_purchase_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseHeader", b =>
                {
                    b.Property<int>("LubePurchaseHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseHeaderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DetailLink")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("detail_link");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lube_purchase_header_no");

                    b.Property<string>("PoNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("po_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("received_by");

                    b.Property<string>("SalesInvoice")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sales_invoice");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shift_rec_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("supplier_code");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("vatable_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("LubePurchaseHeaderId")
                        .HasName("pk_mobility_lube_purchase_headers");

                    b.HasIndex("LubePurchaseHeaderNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_lube_purchase_headers_lube_purchase_header_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_lube_purchase_headers_station_code");

                    b.ToTable("mobility_lube_purchase_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityOffline", b =>
                {
                    b.Property<int>("OfflineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("offline_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfflineId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("FirstDsrClosing")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("first_dsr_closing");

                    b.Property<string>("FirstDsrNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_dsr_no");

                    b.Property<decimal>("FirstDsrOpening")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("first_dsr_opening");

                    b.Property<bool>("IsResolve")
                        .HasColumnType("boolean")
                        .HasColumnName("is_resolve");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("liters");

                    b.Property<decimal?>("NewClosing")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("new_closing");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product");

                    b.Property<int>("Pump")
                        .HasColumnType("integer")
                        .HasColumnName("pump");

                    b.Property<decimal>("SecondDsrClosing")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("second_dsr_closing");

                    b.Property<string>("SecondDsrNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_dsr_no");

                    b.Property<decimal>("SecondDsrOpening")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("second_dsr_opening");

                    b.Property<int>("SeriesNo")
                        .HasColumnType("integer")
                        .HasColumnName("series_no");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.HasKey("OfflineId")
                        .HasName("pk_mobility_offlines");

                    b.ToTable("mobility_offlines", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityPoSalesRaw", b =>
                {
                    b.Property<Guid>("POSalesRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("po_sales_raw_id");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<decimal>("contractprice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("contractprice");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("customercode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customercode");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("driver");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drnumber");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plateno");

                    b.Property<DateOnly>("podate")
                        .HasColumnType("date")
                        .HasColumnName("podate");

                    b.Property<TimeOnly?>("potime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("potime");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shiftrecid");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<string>("tripticket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tripticket");

                    b.HasKey("POSalesRawId")
                        .HasName("pk_mobility_po_sales_raw");

                    b.HasIndex("shiftrecid")
                        .HasDatabaseName("ix_mobility_po_sales_raw_shiftrecid");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_po_sales_raw_stncode");

                    b.HasIndex("tripticket")
                        .HasDatabaseName("ix_mobility_po_sales_raw_tripticket");

                    b.ToTable("mobility_po_sales_raw", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySafeDrop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateOnly?>("BDate")
                        .HasColumnType("date")
                        .HasColumnName("b_date");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<TimeOnly>("TTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("t_time");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("x_oid");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oname");

                    b.Property<int?>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<string>("xSTAMP")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("x_stamp");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_safe_drops");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_safe_drops_inv_date");

                    b.HasIndex("xONAME")
                        .HasDatabaseName("ix_mobility_safe_drops_x_oname");

                    b.ToTable("mobility_safe_drops", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesDetail", b =>
                {
                    b.Property<int>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesDetailId"));

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric")
                        .HasColumnName("calibration");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("closing");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("liters");

                    b.Property<decimal>("LitersSold")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("liters_sold");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("opening");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("particular");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("reference_no");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("sale");

                    b.Property<int>("SalesHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_header_id");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sales_no");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("value");

                    b.HasKey("SalesDetailId")
                        .HasName("pk_mobility_sales_details");

                    b.HasIndex("SalesHeaderId")
                        .HasDatabaseName("ix_mobility_sales_details_sales_header_id");

                    b.HasIndex("SalesNo")
                        .HasDatabaseName("ix_mobility_sales_details_sales_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_sales_details_station_code");

                    b.ToTable("mobility_sales_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesHeader", b =>
                {
                    b.Property<int>("SalesHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesHeaderId"));

                    b.Property<decimal>("ActualCashOnHand")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("actual_cash_on_hand");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cashier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string[]>("Customers")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("customers");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("FuelSalesTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("fuel_sales_total_amount");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_modified");

                    b.Property<bool>("IsTransactionNormal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_transaction_normal");

                    b.Property<decimal>("LubesTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("lubes_total_amount");

                    b.Property<decimal[]>("POSalesAmount")
                        .IsRequired()
                        .HasColumnType("numeric(18,2)[]")
                        .HasColumnName("po_sales_amount");

                    b.Property<decimal>("POSalesTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("po_sales_total_amount");

                    b.Property<string>("Particular")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("SafeDropTotalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("safe_drop_total_amount");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sales_no");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("source");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly?>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly?>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("SalesHeaderId")
                        .HasName("pk_mobility_sales_headers");

                    b.HasIndex("Cashier")
                        .HasDatabaseName("ix_mobility_sales_headers_cashier");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_mobility_sales_headers_date");

                    b.HasIndex("SalesNo")
                        .HasDatabaseName("ix_mobility_sales_headers_sales_no");

                    b.HasIndex("Shift")
                        .HasDatabaseName("ix_mobility_sales_headers_shift");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_sales_headers_station_code");

                    b.ToTable("mobility_sales_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.POSales", b =>
                {
                    b.Property<int>("POSalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("po_sales_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("POSalesId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<decimal>("ContractPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("contract_price");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customer_code");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("POSalesDate")
                        .HasColumnType("date")
                        .HasColumnName("po_sales_date");

                    b.Property<string>("POSalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("po_sales_no");

                    b.Property<TimeOnly?>("POSalesTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("po_sales_time");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shift_rec_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("TripTicket")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("trip_ticket");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("POSalesId")
                        .HasName("pk_mobility_po_sales");

                    b.HasIndex("POSalesNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_po_sales_po_sales_no");

                    b.ToTable("mobility_po_sales", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.ViewModels.FuelSalesView", b =>
                {
                    b.Property<decimal>("AmountDb")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric")
                        .HasColumnName("calibration");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric")
                        .HasColumnName("closing");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_code");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric")
                        .HasColumnName("liters");

                    b.Property<decimal>("LitersSold")
                        .HasColumnType("numeric")
                        .HasColumnName("liters_sold");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric")
                        .HasColumnName("opening");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric")
                        .HasColumnName("sale");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_oname");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer")
                        .HasColumnName("x_pump");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.ToTable((string)null);

                    b.ToView("fuel_sales_view", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IBS.Models.ViewModels.GeneralLedgerView", b =>
                {
                    b.HasBaseType("IBS.Models.GeneralLedger");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<string>("NormalBalance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normal_balance");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_name");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.ToTable((string)null);

                    b.ToView("general_ledger_view", (string)null);
                });

            modelBuilder.Entity("IBS.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideCustomerOrderSlip", b =>
                {
                    b.HasOne("IBS.Models.MasterFile.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_customer_order_slips_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_purchase_orders_purc");

                    b.Navigation("Customer");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideDeliveryReceipt", b =>
                {
                    b.HasOne("IBS.Models.MasterFile.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany()
                        .HasForeignKey("CustomerOrderSlipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_customer_order_slips_cu");

                    b.HasOne("IBS.Models.MasterFile.Hauler", "Hauler")
                        .WithMany()
                        .HasForeignKey("HaulerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_haulers_hauler_id");

                    b.Navigation("Customer");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("Hauler");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilpridePurchaseOrder", b =>
                {
                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_orders_products_product_id");

                    b.HasOne("IBS.Models.MasterFile.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_orders_suppliers_supplier_id");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideReceivingReport", b =>
                {
                    b.HasOne("IBS.Models.MasterFile.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_receiving_reports_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.FilprideDeliveryReceipt", "DeliveryReceipt")
                        .WithMany()
                        .HasForeignKey("DeliveryReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_receiving_reports_filpride_delivery_receipts_deliv");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryReceipt");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityLubePurchaseHeader", "LubePurchaseHeader")
                        .WithMany()
                        .HasForeignKey("LubePurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_lube_purchase_details_mobility_lube_purchase_heade");

                    b.Navigation("LubePurchaseHeader");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilitySalesHeader", "SalesHeader")
                        .WithMany()
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_sales_details_mobility_sales_headers_sales_header_");

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
