// <auto-generated />
using System;
using IBS.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IBS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250910031458_AddModuleInPostedPeriod")]
    partial class AddModuleInPostedPeriod
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IBS.Models.AppSetting", b =>
                {
                    b.Property<string>("SettingKey")
                        .HasColumnType("text")
                        .HasColumnName("setting_key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("SettingKey")
                        .HasName("pk_app_settings");

                    b.HasIndex("SettingKey")
                        .IsUnique()
                        .HasDatabaseName("ix_app_settings_setting_key");

                    b.ToTable("app_settings", (string)null);
                });

            modelBuilder.Entity("IBS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("StationAccess")
                        .HasColumnType("text")
                        .HasColumnName("station_access");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Bienes.BienesPlacement", b =>
                {
                    b.Property<int>("PlacementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("placement_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlacementId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("bank");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_number");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("branch");

                    b.Property<string>("CVNo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cv_no");

                    b.Property<string>("ChequeNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cheque_number");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("class");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("ControlNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("control_number");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("DateFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_from");

                    b.Property<DateOnly>("DateTo")
                        .HasColumnType("date")
                        .HasColumnName("date_to");

                    b.Property<string>("Disposition")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("disposition");

                    b.Property<decimal>("EWTRate")
                        .HasColumnType("numeric(7,4)")
                        .HasColumnName("ewt_rate");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FrequencyOfPayment")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("frequency_of_payment");

                    b.Property<bool>("HasEWT")
                        .HasColumnType("boolean")
                        .HasColumnName("has_ewt");

                    b.Property<bool>("HasTrustFee")
                        .HasColumnType("boolean")
                        .HasColumnName("has_trust_fee");

                    b.Property<decimal>("InterestDeposited")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("interest_deposited");

                    b.Property<DateOnly?>("InterestDepositedDate")
                        .HasColumnType("date")
                        .HasColumnName("interest_deposited_date");

                    b.Property<string>("InterestDepositedTo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("interest_deposited_to");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric(13,10)")
                        .HasColumnName("interest_rate");

                    b.Property<string>("InterestStatus")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("interest_status");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsRolled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rolled");

                    b.Property<bool>("IsSwapped")
                        .HasColumnType("boolean")
                        .HasColumnName("is_swapped");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("locked_date");

                    b.Property<int>("NumberOfYears")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_years");

                    b.Property<int>("PlacementType")
                        .HasColumnType("integer")
                        .HasColumnName("placement_type");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("principal_amount");

                    b.Property<string>("PrincipalDisposition")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("principal_disposition");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RolledFromId")
                        .HasColumnType("integer")
                        .HasColumnName("rolled_from_id");

                    b.Property<int>("SettlementAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("settlement_account_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("SwappedFromId")
                        .HasColumnType("integer")
                        .HasColumnName("swapped_from_id");

                    b.Property<string>("TDAccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("td_account_number");

                    b.Property<string>("TerminatedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("terminated_by");

                    b.Property<DateOnly?>("TerminatedDate")
                        .HasColumnType("date")
                        .HasColumnName("terminated_date");

                    b.Property<string>("TerminationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("termination_remarks");

                    b.Property<decimal>("TrustFeeRate")
                        .HasColumnType("numeric(11,8)")
                        .HasColumnName("trust_fee_rate");

                    b.HasKey("PlacementId")
                        .HasName("pk_bienes_placements");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_bienes_placements_bank_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_bienes_placements_company_id");

                    b.HasIndex("ControlNumber")
                        .HasDatabaseName("ix_bienes_placements_control_number");

                    b.HasIndex("RolledFromId")
                        .HasDatabaseName("ix_bienes_placements_rolled_from_id");

                    b.HasIndex("SettlementAccountId")
                        .HasDatabaseName("ix_bienes_placements_settlement_account_id");

                    b.HasIndex("SwappedFromId")
                        .HasDatabaseName("ix_bienes_placements_swapped_from_id");

                    b.ToTable("bienes_placements", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCVTradePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int>("CheckVoucherId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("document_type");

                    b.HasKey("Id")
                        .HasName("pk_filpride_cv_trade_payments");

                    b.HasIndex("CheckVoucherId")
                        .HasDatabaseName("ix_filpride_cv_trade_payments_check_voucher_id");

                    b.ToTable("filpride_cv_trade_payments", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherDetail", b =>
                {
                    b.Property<int>("CheckVoucherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckVoucherDetailId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<int>("CheckVoucherHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("EwtPercent")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("ewt_percent");

                    b.Property<bool>("IsUserSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_selected");

                    b.Property<bool>("IsVatable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vatable");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("transaction_no");

                    b.HasKey("CheckVoucherDetailId")
                        .HasName("pk_filpride_check_voucher_details");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_bank_id");

                    b.HasIndex("CheckVoucherHeaderId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_check_voucher_header_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_company_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_customer_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_employee_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_check_voucher_details_supplier_id");

                    b.ToTable("filpride_check_voucher_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", b =>
                {
                    b.Property<int>("CheckVoucherHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckVoucherHeaderId"));

                    b.Property<string>("AccruedType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("accrued_type");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<decimal[]>("Amount")
                        .HasColumnType("numeric(18,4)[]")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("AmountPerMonth")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_per_month");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_account_number");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("category");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("check_amount");

                    b.Property<DateOnly?>("CheckDate")
                        .HasColumnType("date")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("check_no");

                    b.Property<string>("CheckVoucherHeaderNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("check_voucher_header_no");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CvType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cv_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("DcpDate")
                        .HasColumnType("date")
                        .HasColumnName("dcp_date");

                    b.Property<DateOnly?>("DcrDate")
                        .HasColumnType("date")
                        .HasColumnName("dcr_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("invoice_amount");

                    b.Property<bool>("IsAdvances")
                        .HasColumnType("boolean")
                        .HasColumnName("is_advances");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateTime?>("LastCreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_created_date");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months");

                    b.Property<int>("NumberOfMonthsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months_created");

                    b.Property<string>("OldCvNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("old_cv_no");

                    b.Property<string[]>("PONo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("po_no");

                    b.Property<string>("Particulars")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("particulars");

                    b.Property<string>("Payee")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("payee");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string[]>("RRNo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("rr_no");

                    b.Property<string>("Reference")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("reference");

                    b.Property<string[]>("SINo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("si_no");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupportingFileSavedFileName")
                        .HasColumnType("text")
                        .HasColumnName("supporting_file_saved_file_name");

                    b.Property<string>("SupportingFileSavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("supporting_file_saved_url");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tin");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("CheckVoucherHeaderId")
                        .HasName("pk_filpride_check_voucher_headers");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_filpride_check_voucher_headers_bank_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_filpride_check_voucher_headers_employee_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_check_voucher_headers_supplier_id");

                    b.ToTable("filpride_check_voucher_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherDetail", b =>
                {
                    b.Property<int>("JournalVoucherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalVoucherDetailId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<int>("JournalVoucherHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_header_id");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("transaction_no");

                    b.HasKey("JournalVoucherDetailId")
                        .HasName("pk_filpride_journal_voucher_details");

                    b.HasIndex("JournalVoucherHeaderId")
                        .HasDatabaseName("ix_filpride_journal_voucher_details_journal_voucher_header_id");

                    b.ToTable("filpride_journal_voucher_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherHeader", b =>
                {
                    b.Property<int>("JournalVoucherHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalVoucherHeaderId"));

                    b.Property<string>("CRNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cr_no");

                    b.Property<int?>("CVId")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("JVReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("jv_reason");

                    b.Property<string>("JournalVoucherHeaderNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("journal_voucher_header_no");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("References")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("references");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("JournalVoucherHeaderId")
                        .HasName("pk_filpride_journal_voucher_headers");

                    b.HasIndex("CVId")
                        .HasDatabaseName("ix_filpride_journal_voucher_headers_cv_id");

                    b.ToTable("filpride_journal_voucher_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideMultipleCheckVoucherPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int>("CheckVoucherHeaderInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_invoice_id");

                    b.Property<int>("CheckVoucherHeaderPaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_payment_id");

                    b.HasKey("Id")
                        .HasName("pk_filpride_multiple_check_voucher_payments");

                    b.HasIndex("CheckVoucherHeaderInvoiceId")
                        .HasDatabaseName("ix_filpride_multiple_check_voucher_payments_check_voucher_head");

                    b.HasIndex("CheckVoucherHeaderPaymentId")
                        .HasDatabaseName("ix_filpride_multiple_check_voucher_payments_check_voucher_head1");

                    b.ToTable("filpride_multiple_check_voucher_payments", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("final_price");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_received");

                    b.Property<bool>("IsSubPo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sub_po");

                    b.Property<string>("OldPoNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("old_po_no");

                    b.Property<int>("PickUpPointId")
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<string>("PurchaseOrderNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("purchase_order_no");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_received");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("SubPoSeries")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sub_po_series");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_address");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierSalesOrderNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("supplier_sales_order_no");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("supplier_tin");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_type");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("terms");

                    b.Property<DateOnly>("TriggerDate")
                        .HasColumnType("date")
                        .HasColumnName("trigger_date");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<decimal>("UnTriggeredQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("un_triggered_quantity");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("vat_type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("PurchaseOrderId")
                        .HasName("pk_filpride_purchase_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_purchase_orders_customer_id");

                    b.HasIndex("PickUpPointId")
                        .HasDatabaseName("ix_filpride_purchase_orders_pick_up_point_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_filpride_purchase_orders_product_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_purchase_orders_supplier_id");

                    b.ToTable("filpride_purchase_orders", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideReceivingReport", b =>
                {
                    b.Property<int>("ReceivingReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("receiving_report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceivingReportId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("AuthorityToLoadNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<decimal>("CanceledQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("canceled_quantity");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<decimal>("CostBasedOnSoa")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost_based_on_soa");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("DeliveryReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsCostUpdated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cost_updated");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("OldRRNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("old_rr_no");

                    b.Property<int>("POId")
                        .HasColumnType("integer")
                        .HasColumnName("po_id");

                    b.Property<string>("PONo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("po_no");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("QuantityDelivered")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_delivered");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_received");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<string>("ReceivingReportNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("receiving_report_no");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("SupplierDrNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("supplier_dr_no");

                    b.Property<DateOnly?>("SupplierInvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("supplier_invoice_date");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("supplier_invoice_number");

                    b.Property<string>("TruckOrVessels")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("truck_or_vessels");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("WithdrawalCertificate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("withdrawal_certificate");

                    b.HasKey("ReceivingReportId")
                        .HasName("pk_filpride_receiving_reports");

                    b.HasIndex("DeliveryReceiptId")
                        .HasDatabaseName("ix_filpride_receiving_reports_delivery_receipt_id");

                    b.HasIndex("POId")
                        .HasDatabaseName("ix_filpride_receiving_reports_po_id");

                    b.ToTable("filpride_receiving_reports", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceipt", b =>
                {
                    b.Property<int>("CollectionReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("collection_receipt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionReceiptId"));

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("bank_account_number");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cash_amount");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("check_amount");

                    b.Property<string>("CheckBank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("check_bank");

                    b.Property<string>("CheckBranch")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("check_branch");

                    b.Property<DateOnly?>("CheckDate")
                        .HasColumnType("date")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("check_no");

                    b.Property<string>("CollectionReceiptNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("collection_receipt_no");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly?>("DepositedDate")
                        .HasColumnType("date")
                        .HasColumnName("deposited_date");

                    b.Property<decimal>("EWT")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("ewt");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("F2306FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("f2306file_name");

                    b.Property<string>("F2306FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("f2306file_path");

                    b.Property<string>("F2307FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("f2307file_name");

                    b.Property<string>("F2307FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("f2307file_path");

                    b.Property<bool>("IsCertificateUpload")
                        .HasColumnType("boolean")
                        .HasColumnName("is_certificate_upload");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<decimal>("ManagersCheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("managers_check_amount");

                    b.Property<string>("ManagersCheckBank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("managers_check_bank");

                    b.Property<string>("ManagersCheckBranch")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("managers_check_branch");

                    b.Property<DateOnly?>("ManagersCheckDate")
                        .HasColumnType("date")
                        .HasColumnName("managers_check_date");

                    b.Property<string>("ManagersCheckNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("managers_check_no");

                    b.Property<string[]>("MultipleSI")
                        .HasColumnType("text[]")
                        .HasColumnName("multiple_si");

                    b.Property<int[]>("MultipleSIId")
                        .HasColumnType("integer[]")
                        .HasColumnName("multiple_si_id");

                    b.Property<DateOnly[]>("MultipleTransactionDate")
                        .HasColumnType("date[]")
                        .HasColumnName("multiple_transaction_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reference_no");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("remarks");

                    b.Property<decimal[]>("SIMultipleAmount")
                        .HasColumnType("numeric[]")
                        .HasColumnName("si_multiple_amount");

                    b.Property<string>("SINo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("si_no");

                    b.Property<string>("SVNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("sv_no");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WVAT")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("wvat");

                    b.HasKey("CollectionReceiptId")
                        .HasName("pk_filpride_collection_receipts");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_filpride_collection_receipts_bank_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_collection_receipts_customer_id");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_filpride_collection_receipts_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_filpride_collection_receipts_service_invoice_id");

                    b.ToTable("filpride_collection_receipts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceiptDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<int>("CollectionReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("collection_receipt_id");

                    b.Property<string>("CollectionReceiptNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("collection_receipt_no");

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("invoice_no");

                    b.HasKey("Id")
                        .HasName("pk_filpride_collection_receipt_details");

                    b.HasIndex("CollectionReceiptId")
                        .HasDatabaseName("ix_filpride_collection_receipt_details_collection_receipt_id");

                    b.HasIndex("CollectionReceiptNo")
                        .HasDatabaseName("ix_filpride_collection_receipt_details_collection_receipt_no");

                    b.HasIndex("InvoiceNo")
                        .HasDatabaseName("ix_filpride_collection_receipt_details_invoice_no");

                    b.ToTable("filpride_collection_receipt_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCreditMemo", b =>
                {
                    b.Property<int>("CreditMemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("credit_memo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CreditMemoId"));

                    b.Property<decimal?>("AdjustedPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("adjusted_price");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_amount");

                    b.Property<string>("CreditMemoNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("credit_memo_no");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("CreditMemoId")
                        .HasName("pk_filpride_credit_memos");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_filpride_credit_memos_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_filpride_credit_memos_service_invoice_id");

                    b.ToTable("filpride_credit_memos", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideDebitMemo", b =>
                {
                    b.Property<int>("DebitMemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("debit_memo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DebitMemoId"));

                    b.Property<decimal?>("AdjustedPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("adjusted_price");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit_amount");

                    b.Property<string>("DebitMemoNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("debit_memo_no");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("DebitMemoId")
                        .HasName("pk_filpride_debit_memos");

                    b.HasIndex("SalesInvoiceId")
                        .HasDatabaseName("ix_filpride_debit_memos_sales_invoice_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_filpride_debit_memos_service_invoice_id");

                    b.ToTable("filpride_debit_memos", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideSalesInvoice", b =>
                {
                    b.Property<int>("SalesInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesInvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("balance");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int?>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_tin");

                    b.Property<int?>("DeliveryReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsTaxAndVatPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tax_and_vat_paid");

                    b.Property<string>("OtherRefNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("other_ref_no");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int>("ReceivingReportId")
                        .HasColumnType("integer")
                        .HasColumnName("receiving_report_id");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<string>("SalesInvoiceNo")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("sales_invoice_no");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("terms");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_price");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("SalesInvoiceId")
                        .HasName("pk_filpride_sales_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_sales_invoices_customer_id");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_sales_invoices_customer_order_slip_id");

                    b.HasIndex("DeliveryReceiptId")
                        .HasDatabaseName("ix_filpride_sales_invoices_delivery_receipt_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_filpride_sales_invoices_product_id");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_sales_invoices_purchase_order_id");

                    b.ToTable("filpride_sales_invoices", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideServiceInvoice", b =>
                {
                    b.Property<int>("ServiceInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceInvoiceId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("balance");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerBusinessStyle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_business_style");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_tin");

                    b.Property<int?>("DeliveryReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("HasEwt")
                        .HasColumnType("boolean")
                        .HasColumnName("has_ewt");

                    b.Property<bool>("HasWvat")
                        .HasColumnType("boolean")
                        .HasColumnName("has_wvat");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceInvoiceNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("service_invoice_no");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_name");

                    b.Property<decimal>("ServicePercent")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("service_percent");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("vat_type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("ServiceInvoiceId")
                        .HasName("pk_filpride_service_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_service_invoices_customer_id");

                    b.HasIndex("DeliveryReceiptId")
                        .HasDatabaseName("ix_filpride_service_invoices_delivery_receipt_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_filpride_service_invoices_service_id");

                    b.ToTable("filpride_service_invoices", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideAuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("machine_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_filpride_audit_trails");

                    b.ToTable("filpride_audit_trails", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideCashReceiptBook", b =>
                {
                    b.Property<int>("CashReceiptBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cash_receipt_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CashReceiptBookId"));

                    b.Property<string>("Bank")
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("COA")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coa");

                    b.Property<string>("CheckNo")
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ref_no");

                    b.HasKey("CashReceiptBookId")
                        .HasName("pk_filpride_cash_receipt_books");

                    b.ToTable("filpride_cash_receipt_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideDisbursementBook", b =>
                {
                    b.Property<int>("DisbursementBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("disbursement_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DisbursementBookId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("CVNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cv_no");

                    b.Property<string>("ChartOfAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chart_of_account");

                    b.Property<string>("CheckDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payee");

                    b.HasKey("DisbursementBookId")
                        .HasName("pk_filpride_disbursement_books");

                    b.ToTable("filpride_disbursement_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideGeneralLedgerBook", b =>
                {
                    b.Property<int>("GeneralLedgerBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("general_ledger_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeneralLedgerBookId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("account_title");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_account_id");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text")
                        .HasColumnName("employee_name");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("module_type");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("reference");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.HasKey("GeneralLedgerBookId")
                        .HasName("pk_filpride_general_ledger_books");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_account_id");

                    b.HasIndex("BankAccountId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_bank_account_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_company_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_customer_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_employee_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_general_ledger_books_supplier_id");

                    b.ToTable("filpride_general_ledger_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("average_cost");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("InventoryBalance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("inventory_balance");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_validated");

                    b.Property<int?>("POId")
                        .HasColumnType("integer")
                        .HasColumnName("po_id");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("reference");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total_balance");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("unit");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("validated_by");

                    b.Property<DateTime?>("ValidatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validated_date");

                    b.HasKey("InventoryId")
                        .HasName("pk_filpride_inventories");

                    b.HasIndex("POId")
                        .HasDatabaseName("ix_filpride_inventories_po_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_filpride_inventories_product_id");

                    b.ToTable("filpride_inventories", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideJournalBook", b =>
                {
                    b.Property<int>("JournalBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journal_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalBookId"));

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("JournalBookId")
                        .HasName("pk_filpride_journal_books");

                    b.ToTable("filpride_journal_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilpridePurchaseBook", b =>
                {
                    b.Property<int>("PurchaseBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("purchase_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseBookId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_no");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("NetPurchases")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("net_purchases");

                    b.Property<string>("PONo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("po_no");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_address");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_tin");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("WhtAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("wht_amount");

                    b.HasKey("PurchaseBookId")
                        .HasName("pk_filpride_purchase_books");

                    b.ToTable("filpride_purchase_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideSalesBook", b =>
                {
                    b.Property<int>("SalesBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesBookId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("NetSales")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("net_sales");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<string>("SoldTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sold_to");

                    b.Property<string>("TinNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin_no");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatExemptSales")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vat_exempt_sales");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vatable_sales");

                    b.Property<decimal>("ZeroRated")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("zero_rated");

                    b.HasKey("SalesBookId")
                        .HasName("pk_filpride_sales_books");

                    b.ToTable("filpride_sales_books", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideFreight", b =>
                {
                    b.Property<int>("FreightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("freight_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FreightId"));

                    b.Property<int>("ClusterCode")
                        .HasColumnType("integer")
                        .HasColumnName("cluster_code");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight");

                    b.Property<int>("PickUpPointId")
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    b.HasKey("FreightId")
                        .HasName("pk_filpride_freights");

                    b.HasIndex("PickUpPointId")
                        .HasDatabaseName("ix_filpride_freights_pick_up_point_id");

                    b.ToTable("filpride_freights", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideMonthlyNibit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BeginningBalance")
                        .HasColumnType("numeric(18, 4)")
                        .HasColumnName("beginning_balance");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company");

                    b.Property<decimal>("EndingBalance")
                        .HasColumnType("numeric(18, 4)")
                        .HasColumnName("ending_balance");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<decimal>("NetIncome")
                        .HasColumnType("numeric(18, 4)")
                        .HasColumnName("net_income");

                    b.Property<decimal>("PriorPeriodAdjustment")
                        .HasColumnType("numeric(18, 4)")
                        .HasColumnName("prior_period_adjustment");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_filpride_monthly_nibits");

                    b.HasIndex("Company")
                        .HasDatabaseName("ix_filpride_monthly_nibits_company");

                    b.HasIndex("Month")
                        .HasDatabaseName("ix_filpride_monthly_nibits_month");

                    b.HasIndex("Year")
                        .HasDatabaseName("ix_filpride_monthly_nibits_year");

                    b.ToTable("filpride_monthly_nibits", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideOffsettings", b =>
                {
                    b.Property<int>("OffSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("off_setting_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OffSettingId"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("OffSettingId")
                        .HasName("pk_filpride_offsettings");

                    b.ToTable("filpride_offsettings", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilpridePurchaseLockedRecordsQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("LockedDate")
                        .HasColumnType("date")
                        .HasColumnName("locked_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int>("ReceivingReportId")
                        .HasColumnType("integer")
                        .HasColumnName("receiving_report_id");

                    b.HasKey("Id")
                        .HasName("pk_filpride_purchase_locked_records_queues");

                    b.HasIndex("LockedDate")
                        .HasDatabaseName("ix_filpride_purchase_locked_records_queues_locked_date");

                    b.HasIndex("ReceivingReportId")
                        .HasDatabaseName("ix_filpride_purchase_locked_records_queues_receiving_report_id");

                    b.ToTable("filpride_purchase_locked_records_queues", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideSalesLockedRecordsQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    b.Property<DateOnly>("LockedDate")
                        .HasColumnType("date")
                        .HasColumnName("locked_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_filpride_sales_locked_records_queues");

                    b.HasIndex("DeliveryReceiptId")
                        .HasDatabaseName("ix_filpride_sales_locked_records_queues_delivery_receipt_id");

                    b.HasIndex("LockedDate")
                        .HasDatabaseName("ix_filpride_sales_locked_records_queues_locked_date");

                    b.ToTable("filpride_sales_locked_records_queues", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideAuthorityToLoad", b =>
                {
                    b.Property<int>("AuthorityToLoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authority_to_load_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorityToLoadId"));

                    b.Property<string>("AuthorityToLoadNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<DateOnly>("DateBooked")
                        .HasColumnType("date")
                        .HasColumnName("date_booked");

                    b.Property<string>("Depot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("depot");

                    b.Property<string>("Driver")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("driver");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight");

                    b.Property<string>("HaulerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hauler_name");

                    b.Property<int>("LoadPortId")
                        .HasColumnType("integer")
                        .HasColumnName("load_port_id");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("plate_no");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remarks");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("UppiAtlNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uppi_atl_no");

                    b.Property<DateOnly>("ValidUntil")
                        .HasColumnType("date")
                        .HasColumnName("valid_until");

                    b.HasKey("AuthorityToLoadId")
                        .HasName("pk_filpride_authority_to_loads");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_authority_to_loads_customer_order_slip_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_authority_to_loads_supplier_id");

                    b.ToTable("filpride_authority_to_loads", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideBookAtlDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("AppointedId")
                        .HasColumnType("integer")
                        .HasColumnName("appointed_id");

                    b.Property<int>("AuthorityToLoadId")
                        .HasColumnType("integer")
                        .HasColumnName("authority_to_load_id");

                    b.Property<int>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnservedQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unserved_quantity");

                    b.HasKey("Id")
                        .HasName("pk_filpride_book_atl_details");

                    b.HasIndex("AppointedId")
                        .HasDatabaseName("ix_filpride_book_atl_details_appointed_id");

                    b.HasIndex("AuthorityToLoadId")
                        .HasDatabaseName("ix_filpride_book_atl_details_authority_to_load_id");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_book_atl_details_customer_order_slip_id");

                    b.ToTable("filpride_book_atl_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideCOSAppointedSupplier", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sequence_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SequenceId"));

                    b.Property<string>("AtlNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("atl_no");

                    b.Property<int>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<bool>("IsAssignedToDR")
                        .HasColumnType("boolean")
                        .HasColumnName("is_assigned_to_dr");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("UnreservedQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unreserved_quantity");

                    b.Property<decimal>("UnservedQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unserved_quantity");

                    b.HasKey("SequenceId")
                        .HasName("pk_filpride_cos_appointed_suppliers");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_cos_appointed_suppliers_customer_order_slip_id");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_cos_appointed_suppliers_purchase_order_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_cos_appointed_suppliers_supplier_id");

                    b.ToTable("filpride_cos_appointed_suppliers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", b =>
                {
                    b.Property<int>("CustomerOrderSlipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerOrderSlipId"));

                    b.Property<string>("AccountSpecialist")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("account_specialist");

                    b.Property<string>("AuthorityToLoadNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<decimal>("AvailableCreditLimit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("available_credit_limit");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("balance_quantity");

                    b.Property<string>("Branch")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("branch");

                    b.Property<string>("BusinessStyle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("business_style");

                    b.Property<string>("CncApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cnc_approved_by");

                    b.Property<DateTime?>("CncApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("cnc_approved_date");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("commission_rate");

                    b.Property<int?>("CommissioneeId")
                        .HasColumnType("integer")
                        .HasColumnName("commissionee_id");

                    b.Property<string>("CommissioneeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("commissionee_name");

                    b.Property<string>("CommissioneeTaxType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("commissionee_tax_type");

                    b.Property<string>("CommissioneeVatType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("commissionee_vat_type");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerOrderSlipNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("customer_order_slip_no");

                    b.Property<string>("CustomerPoNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_po_no");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_tin");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("DeliveredPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("delivered_price");

                    b.Property<decimal>("DeliveredQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("delivered_quantity");

                    b.Property<string>("DeliveryOption")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("delivery_option");

                    b.Property<string>("Depot")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("depot");

                    b.Property<string>("DisapprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("disapproved_by");

                    b.Property<DateTime?>("DisapprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disapproved_date");

                    b.Property<string>("Driver")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("FinanceInstruction")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("finance_instruction");

                    b.Property<string>("FmApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fm_approved_by");

                    b.Property<DateTime?>("FmApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fm_approved_date");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight");

                    b.Property<bool>("HasCommission")
                        .HasColumnType("boolean")
                        .HasColumnName("has_commission");

                    b.Property<bool>("HasEWT")
                        .HasColumnType("boolean")
                        .HasColumnName("has_ewt");

                    b.Property<bool>("HasMultiplePO")
                        .HasColumnType("boolean")
                        .HasColumnName("has_multiple_po");

                    b.Property<bool>("HasWVAT")
                        .HasColumnType("boolean")
                        .HasColumnName("has_wvat");

                    b.Property<int?>("HaulerId")
                        .HasColumnType("integer")
                        .HasColumnName("hauler_id");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delivered");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("OMReason")
                        .HasColumnType("text")
                        .HasColumnName("om_reason");

                    b.Property<string>("OldCosNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("old_cos_no");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("old_price");

                    b.Property<string>("OmApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("om_approved_by");

                    b.Property<DateTime?>("OmApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("om_approved_date");

                    b.Property<int?>("PickUpPointId")
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PriceReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("price_reference");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("SubPORemarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("sub_po_remarks");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Terms")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("terms");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total_amount");

                    b.Property<string[]>("UploadedFiles")
                        .HasColumnType("varchar[]")
                        .HasColumnName("uploaded_files");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("vat_type");

                    b.HasKey("CustomerOrderSlipId")
                        .HasName("pk_filpride_customer_order_slips");

                    b.HasIndex("CommissioneeId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_commissionee_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_customer_id");

                    b.HasIndex("CustomerOrderSlipNo")
                        .HasDatabaseName("ix_filpride_customer_order_slips_customer_order_slip_no");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_customer_order_slips_date");

                    b.HasIndex("HaulerId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_hauler_id");

                    b.HasIndex("PickUpPointId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_pick_up_point_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_product_id");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_purchase_order_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_customer_order_slips_supplier_id");

                    b.ToTable("filpride_customer_order_slips", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", b =>
                {
                    b.Property<int>("DeliveryReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("delivery_receipt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeliveryReceiptId"));

                    b.Property<int>("AuthorityToLoadId")
                        .HasColumnType("integer")
                        .HasColumnName("authority_to_load_id");

                    b.Property<string>("AuthorityToLoadNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("commission_amount");

                    b.Property<decimal>("CommissionAmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("commission_amount_paid");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("commission_rate");

                    b.Property<int?>("CommissioneeId")
                        .HasColumnType("integer")
                        .HasColumnName("commissionee_id");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("CustomerOrderSlipId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_tin");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("DeliveredDate")
                        .HasColumnType("date")
                        .HasColumnName("delivered_date");

                    b.Property<string>("DeliveryReceiptNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("delivery_receipt_no");

                    b.Property<string>("Driver")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("driver");

                    b.Property<decimal>("ECC")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("ecc");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("Freight")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight");

                    b.Property<decimal>("FreightAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight_amount");

                    b.Property<decimal>("FreightAmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight_amount_paid");

                    b.Property<bool>("HasAlreadyInvoiced")
                        .HasColumnType("boolean")
                        .HasColumnName("has_already_invoiced");

                    b.Property<bool>("HasReceivingReport")
                        .HasColumnType("boolean")
                        .HasColumnName("has_receiving_report");

                    b.Property<int?>("HaulerId")
                        .HasColumnType("integer")
                        .HasColumnName("hauler_id");

                    b.Property<string>("HaulerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("hauler_name");

                    b.Property<string>("HaulerTaxType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hauler_tax_type");

                    b.Property<string>("HaulerVatType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hauler_vat_type");

                    b.Property<bool>("IsCommissionPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_commission_paid");

                    b.Property<bool>("IsFreightPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_freight_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("ManualDrNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("manual_dr_no");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total_amount");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("DeliveryReceiptId")
                        .HasName("pk_filpride_delivery_receipts");

                    b.HasIndex("AuthorityToLoadId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_authority_to_load_id");

                    b.HasIndex("CommissioneeId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_commissionee_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_customer_id");

                    b.HasIndex("CustomerOrderSlipId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_customer_order_slip_id");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_filpride_delivery_receipts_date");

                    b.HasIndex("DeliveryReceiptNo")
                        .HasDatabaseName("ix_filpride_delivery_receipts_delivery_receipt_no");

                    b.HasIndex("HaulerId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_hauler_id");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_delivery_receipts_purchase_order_id");

                    b.ToTable("filpride_delivery_receipts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilpridePOActualPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AppliedVolume")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("applied_volume");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<DateTime>("TriggeredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("triggered_date");

                    b.Property<decimal>("TriggeredPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("triggered_price");

                    b.Property<decimal>("TriggeredVolume")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("triggered_volume");

                    b.HasKey("Id")
                        .HasName("pk_filpride_po_actual_prices");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_filpride_po_actual_prices_purchase_order_id");

                    b.ToTable("filpride_po_actual_prices", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideBankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bank_account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_no");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bank");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("branch");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsBienes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bienes");

                    b.Property<bool>("IsFilpride")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filpride");

                    b.Property<bool>("IsMobility")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobility");

                    b.HasKey("BankAccountId")
                        .HasName("pk_filpride_bank_accounts");

                    b.ToTable("filpride_bank_accounts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideChartOfAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("account_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FinancialStatementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("financial_statement_type");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("boolean")
                        .HasColumnName("has_children");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NormalBalance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("normal_balance");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_account_id");

                    b.HasKey("AccountId")
                        .HasName("pk_filpride_chart_of_accounts");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("ix_filpride_chart_of_accounts_account_name");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_filpride_chart_of_accounts_account_number");

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("ix_filpride_chart_of_accounts_parent_account_id");

                    b.ToTable("filpride_chart_of_accounts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BusinessStyle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("business_style");

                    b.Property<int?>("ClusterCode")
                        .HasColumnType("integer")
                        .HasColumnName("cluster_code");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_limit");

                    b.Property<decimal>("CreditLimitAsOfToday")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_limit_as_of_today");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerTerms")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("customer_terms");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_tin");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("customer_type");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("HasBranch")
                        .HasColumnType("boolean")
                        .HasColumnName("has_branch");

                    b.Property<bool>("HasMultipleTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("has_multiple_terms");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBienes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bienes");

                    b.Property<bool>("IsFilpride")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filpride");

                    b.Property<bool>("IsMMSI")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mmsi");

                    b.Property<bool>("IsMobility")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobility");

                    b.Property<bool>("RequiresPriceAdjustment")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_price_adjustment");

                    b.Property<decimal?>("RetentionRate")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("retention_rate");

                    b.Property<string>("StationCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("type");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("vat_type");

                    b.Property<bool>("WithHoldingTax")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_tax");

                    b.Property<bool>("WithHoldingVat")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_vat");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("CustomerId")
                        .HasName("pk_filpride_customers");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("ix_filpride_customers_customer_code");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("ix_filpride_customers_customer_name");

                    b.ToTable("filpride_customers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideCustomerBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("branch_address");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("branch_name");

                    b.Property<string>("BranchTin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("branch_tin");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.HasKey("Id")
                        .HasName("pk_filpride_customer_branches");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_filpride_customer_branches_customer_id");

                    b.ToTable("filpride_customer_branches", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Company")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<DateOnly>("DateHired")
                        .HasColumnType("date")
                        .HasColumnName("date_hired");

                    b.Property<DateOnly?>("DateResigned")
                        .HasColumnType("date")
                        .HasColumnName("date_resigned");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("employee_number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Initial")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("initial");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsManagerial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_managerial");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PagibigNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("pagibig_no");

                    b.Property<string>("Paygrade")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("paygrade");

                    b.Property<string>("PhilhealthNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("philhealth_no");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("salary");

                    b.Property<string>("SssNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sss_no");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Suffix")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("suffix");

                    b.Property<string>("Supervisor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("supervisor");

                    b.Property<string>("TelNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel_no");

                    b.Property<string>("TinNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tin_no");

                    b.HasKey("EmployeeId")
                        .HasName("pk_filpride_employees");

                    b.HasIndex("EmployeeNumber")
                        .HasDatabaseName("ix_filpride_employees_employee_number");

                    b.ToTable("filpride_employees", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilpridePickUpPoint", b =>
                {
                    b.Property<int>("PickUpPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PickUpPointId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Depot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("depot");

                    b.Property<bool>("IsBienes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bienes");

                    b.Property<bool>("IsFilpride")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filpride");

                    b.Property<bool>("IsMobility")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobility");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("PickUpPointId")
                        .HasName("pk_filpride_pick_up_points");

                    b.HasIndex("Company")
                        .HasDatabaseName("ix_filpride_pick_up_points_company");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_filpride_pick_up_points_supplier_id");

                    b.ToTable("filpride_pick_up_points", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CurrentAndPreviousNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("current_and_previous_no");

                    b.Property<string>("CurrentAndPreviousTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("current_and_previous_title");

                    b.Property<bool>("IsBienes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bienes");

                    b.Property<bool>("IsFilpride")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filpride");

                    b.Property<bool>("IsMobility")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobility");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Percent")
                        .HasColumnType("integer")
                        .HasColumnName("percent");

                    b.Property<string>("ServiceNo")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("service_no");

                    b.Property<string>("UnearnedNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unearned_no");

                    b.Property<string>("UnearnedTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unearned_title");

                    b.HasKey("ServiceId")
                        .HasName("pk_filpride_services");

                    b.ToTable("filpride_services", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideSupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Branch")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("branch");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("category");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DefaultExpenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("default_expense_number");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBienes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bienes");

                    b.Property<bool>("IsFilpride")
                        .HasColumnType("boolean")
                        .HasColumnName("is_filpride");

                    b.Property<bool>("IsMobility")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mobility");

                    b.Property<string>("ProofOfExemptionFileName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("proof_of_exemption_file_name");

                    b.Property<string>("ProofOfExemptionFilePath")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("proof_of_exemption_file_path");

                    b.Property<string>("ProofOfRegistrationFileName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("proof_of_registration_file_name");

                    b.Property<string>("ProofOfRegistrationFilePath")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("proof_of_registration_file_path");

                    b.Property<string>("ReasonOfExemption")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reason_of_exemption");

                    b.Property<bool>("RequiresPriceAdjustment")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_price_adjustment");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_address");

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("supplier_code");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierTerms")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("supplier_terms");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("supplier_tin");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_type");

                    b.Property<string>("TradeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("trade_name");

                    b.Property<string>("Validity")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("validity");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_date");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("vat_type");

                    b.Property<decimal?>("WithholdingTaxPercent")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("withholding_tax_percent");

                    b.Property<string>("WithholdingTaxtitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("withholding_taxtitle");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("SupplierId")
                        .HasName("pk_filpride_suppliers");

                    b.HasIndex("SupplierCode")
                        .HasDatabaseName("ix_filpride_suppliers_supplier_code");

                    b.HasIndex("SupplierName")
                        .HasDatabaseName("ix_filpride_suppliers_supplier_name");

                    b.ToTable("filpride_suppliers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.HubConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_hub_connections");

                    b.ToTable("hub_connections", (string)null);
                });

            modelBuilder.Entity("IBS.Models.LogMessage", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("log_id");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log_level");

                    b.Property<string>("LoggerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logger_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_stamp");

                    b.HasKey("LogId")
                        .HasName("pk_log_messages");

                    b.ToTable("log_messages", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSIBilling", b =>
                {
                    b.Property<int>("MMSIBillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mmsi_billing_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MMSIBillingId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("BilledTo")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("billed_to");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_principal");

                    b.Property<bool>("IsUndocumented")
                        .HasColumnType("boolean")
                        .HasColumnName("is_undocumented");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_edited_by");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_edited_date");

                    b.Property<string>("MMSIBillingNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("mmsi_billing_number");

                    b.Property<int?>("MMSICollectionId")
                        .HasColumnType("integer")
                        .HasColumnName("mmsi_collection_id");

                    b.Property<int>("PortId")
                        .HasColumnType("integer")
                        .HasColumnName("port_id");

                    b.Property<int?>("PrincipalId")
                        .HasColumnType("integer")
                        .HasColumnName("principal_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TerminalId")
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id");

                    b.Property<int>("VesselId")
                        .HasColumnType("integer")
                        .HasColumnName("vessel_id");

                    b.Property<string>("VoyageNumber")
                        .HasColumnType("text")
                        .HasColumnName("voyage_number");

                    b.HasKey("MMSIBillingId")
                        .HasName("pk_mmsi_billings");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mmsi_billings_customer_id");

                    b.HasIndex("MMSICollectionId")
                        .HasDatabaseName("ix_mmsi_billings_mmsi_collection_id");

                    b.HasIndex("PortId")
                        .HasDatabaseName("ix_mmsi_billings_port_id");

                    b.HasIndex("PrincipalId")
                        .HasDatabaseName("ix_mmsi_billings_principal_id");

                    b.HasIndex("TerminalId")
                        .HasDatabaseName("ix_mmsi_billings_terminal_id");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_mmsi_billings_vessel_id");

                    b.ToTable("mmsi_billings", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSICollection", b =>
                {
                    b.Property<int>("MMSICollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mmsi_collection_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MMSICollectionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateOnly>("CheckDate")
                        .HasColumnType("date")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_number");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly>("DepositDate")
                        .HasColumnType("date")
                        .HasColumnName("deposit_date");

                    b.Property<decimal>("EWT")
                        .HasColumnType("numeric")
                        .HasColumnName("ewt");

                    b.Property<bool>("IsUndocumented")
                        .HasColumnType("boolean")
                        .HasColumnName("is_undocumented");

                    b.Property<string>("MMSICollectionNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mmsi_collection_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("MMSICollectionId")
                        .HasName("pk_mmsi_collections");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mmsi_collections_customer_id");

                    b.ToTable("mmsi_collections", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSIDispatchTicket", b =>
                {
                    b.Property<int>("DispatchTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dispatch_ticket_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DispatchTicketId"));

                    b.Property<decimal>("ApOtherTugs")
                        .HasColumnType("numeric")
                        .HasColumnName("ap_other_tugs");

                    b.Property<decimal>("BAFBillingAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("baf_billing_amount");

                    b.Property<string>("BAFChargeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("baf_charge_type");

                    b.Property<decimal>("BAFDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("baf_discount");

                    b.Property<decimal>("BAFNetRevenue")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("baf_net_revenue");

                    b.Property<decimal>("BAFRate")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("baf_rate");

                    b.Property<string>("BaseOrStation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("base_or_station");

                    b.Property<string>("BillingId")
                        .HasColumnType("text")
                        .HasColumnName("billing_id");

                    b.Property<string>("COSNumber")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cos_number");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly>("DateArrived")
                        .HasColumnType("date")
                        .HasColumnName("date_arrived");

                    b.Property<DateOnly>("DateLeft")
                        .HasColumnType("date")
                        .HasColumnName("date_left");

                    b.Property<decimal>("DispatchBillingAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("dispatch_billing_amount");

                    b.Property<string>("DispatchChargeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dispatch_charge_type");

                    b.Property<decimal>("DispatchDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("dispatch_discount");

                    b.Property<decimal>("DispatchNetRevenue")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("dispatch_net_revenue");

                    b.Property<string>("DispatchNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("dispatch_number");

                    b.Property<decimal>("DispatchRate")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("dispatch_rate");

                    b.Property<string>("EditedBy")
                        .HasColumnType("text")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("ImageName")
                        .HasColumnType("text")
                        .HasColumnName("image_name");

                    b.Property<string>("ImageSavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_saved_url");

                    b.Property<string>("ImageSignedUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_signed_url");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remarks");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TariffBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tariff_by");

                    b.Property<DateTime>("TariffDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tariff_date");

                    b.Property<string>("TariffEditedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tariff_edited_by");

                    b.Property<DateTime>("TariffEditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tariff_edited_date");

                    b.Property<int>("TerminalId")
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id");

                    b.Property<TimeOnly>("TimeArrived")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_arrived");

                    b.Property<TimeOnly>("TimeLeft")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_left");

                    b.Property<decimal>("TotalBilling")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_billing");

                    b.Property<decimal>("TotalHours")
                        .HasColumnType("numeric")
                        .HasColumnName("total_hours");

                    b.Property<decimal>("TotalNetRevenue")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_net_revenue");

                    b.Property<int>("TugBoatId")
                        .HasColumnType("integer")
                        .HasColumnName("tug_boat_id");

                    b.Property<int>("TugMasterId")
                        .HasColumnType("integer")
                        .HasColumnName("tug_master_id");

                    b.Property<int>("VesselId")
                        .HasColumnType("integer")
                        .HasColumnName("vessel_id");

                    b.Property<string>("VideoName")
                        .HasColumnType("text")
                        .HasColumnName("video_name");

                    b.Property<string>("VideoSavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_saved_url");

                    b.Property<string>("VideoSignedUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_signed_url");

                    b.Property<string>("VoyageNumber")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("voyage_number");

                    b.HasKey("DispatchTicketId")
                        .HasName("pk_mmsi_dispatch_tickets");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_customer_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_service_id");

                    b.HasIndex("TerminalId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_terminal_id");

                    b.HasIndex("TugBoatId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_tug_boat_id");

                    b.HasIndex("TugMasterId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_tug_master_id");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_mmsi_dispatch_tickets_vessel_id");

                    b.ToTable("mmsi_dispatch_tickets", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSITariffRate", b =>
                {
                    b.Property<int>("TariffRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tariff_rate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffRateId"));

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date")
                        .HasColumnName("as_of_date");

                    b.Property<decimal>("BAF")
                        .HasColumnType("numeric")
                        .HasColumnName("baf");

                    b.Property<decimal>("BAFDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("baf_discount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("Dispatch")
                        .HasColumnType("numeric")
                        .HasColumnName("dispatch");

                    b.Property<decimal>("DispatchDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("dispatch_discount");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("TerminalId")
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("text")
                        .HasColumnName("update_by");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_date");

                    b.HasKey("TariffRateId")
                        .HasName("pk_mmsi_tariff_rates");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mmsi_tariff_rates_customer_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_mmsi_tariff_rates_service_id");

                    b.HasIndex("TerminalId")
                        .HasDatabaseName("ix_mmsi_tariff_rates_terminal_id");

                    b.ToTable("mmsi_tariff_rates", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIPort", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("port_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortId"));

                    b.Property<bool>("HasSBMA")
                        .HasColumnType("boolean")
                        .HasColumnName("has_sbma");

                    b.Property<string>("PortName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("port_name");

                    b.Property<string>("PortNumber")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("port_number");

                    b.HasKey("PortId")
                        .HasName("pk_mmsi_ports");

                    b.ToTable("mmsi_ports", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIPrincipal", b =>
                {
                    b.Property<int>("PrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("principal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrincipalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text")
                        .HasColumnName("business_type");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVatable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vatable");

                    b.Property<string>("Landline1")
                        .HasColumnType("text")
                        .HasColumnName("landline1");

                    b.Property<string>("Landline2")
                        .HasColumnType("text")
                        .HasColumnName("landline2");

                    b.Property<string>("Mobile1")
                        .HasColumnType("text")
                        .HasColumnName("mobile1");

                    b.Property<string>("Mobile2")
                        .HasColumnType("text")
                        .HasColumnName("mobile2");

                    b.Property<string>("PrincipalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("principal_name");

                    b.Property<string>("PrincipalNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("principal_number");

                    b.Property<string>("TIN")
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.Property<string>("Terms")
                        .HasColumnType("text")
                        .HasColumnName("terms");

                    b.HasKey("PrincipalId")
                        .HasName("pk_mmsi_principals");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mmsi_principals_customer_id");

                    b.ToTable("mmsi_principals", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("service_name");

                    b.Property<string>("ServiceNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("service_number");

                    b.HasKey("ServiceId")
                        .HasName("pk_mmsi_services");

                    b.ToTable("mmsi_services", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITerminal", b =>
                {
                    b.Property<int>("TerminalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("terminal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TerminalId"));

                    b.Property<int>("PortId")
                        .HasColumnType("integer")
                        .HasColumnName("port_id");

                    b.Property<string>("TerminalName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("terminal_name");

                    b.Property<string>("TerminalNumber")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("terminal_number");

                    b.HasKey("TerminalId")
                        .HasName("pk_mmsi_terminals");

                    b.HasIndex("PortId")
                        .HasDatabaseName("ix_mmsi_terminals_port_id");

                    b.ToTable("mmsi_terminals", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITugMaster", b =>
                {
                    b.Property<int>("TugMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tug_master_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TugMasterId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("TugMasterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tug_master_name");

                    b.Property<string>("TugMasterNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("tug_master_number");

                    b.HasKey("TugMasterId")
                        .HasName("pk_mmsi_tug_masters");

                    b.ToTable("mmsi_tug_masters", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITugboat", b =>
                {
                    b.Property<int>("TugboatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tugboat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TugboatId"));

                    b.Property<bool>("IsCompanyOwned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_company_owned");

                    b.Property<string>("TugboatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tugboat_name");

                    b.Property<string>("TugboatNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("tugboat_number");

                    b.Property<int?>("TugboatOwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("tugboat_owner_id");

                    b.HasKey("TugboatId")
                        .HasName("pk_mmsi_tugboats");

                    b.HasIndex("TugboatOwnerId")
                        .HasDatabaseName("ix_mmsi_tugboats_tugboat_owner_id");

                    b.ToTable("mmsi_tugboats", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITugboatOwner", b =>
                {
                    b.Property<int>("TugboatOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tugboat_owner_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TugboatOwnerId"));

                    b.Property<decimal>("FixedRate")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_rate");

                    b.Property<string>("TugboatOwnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tugboat_owner_name");

                    b.Property<string>("TugboatOwnerNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("tugboat_owner_number");

                    b.HasKey("TugboatOwnerId")
                        .HasName("pk_mmsi_tugboat_owners");

                    b.ToTable("mmsi_tugboat_owners", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIUserAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanApproveTariff")
                        .HasColumnType("boolean")
                        .HasColumnName("can_approve_tariff");

                    b.Property<bool>("CanCreateBilling")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create_billing");

                    b.Property<bool>("CanCreateCollection")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create_collection");

                    b.Property<bool>("CanCreateDispatchTicket")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create_dispatch_ticket");

                    b.Property<bool>("CanCreateServiceRequest")
                        .HasColumnType("boolean")
                        .HasColumnName("can_create_service_request");

                    b.Property<bool>("CanPostServiceRequest")
                        .HasColumnType("boolean")
                        .HasColumnName("can_post_service_request");

                    b.Property<bool>("CanPrintReport")
                        .HasColumnType("boolean")
                        .HasColumnName("can_print_report");

                    b.Property<bool>("CanSetTariff")
                        .HasColumnType("boolean")
                        .HasColumnName("can_set_tariff");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_mmsi_user_accesses");

                    b.ToTable("mmsi_user_accesses", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIVessel", b =>
                {
                    b.Property<int>("VesselId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vessel_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VesselId"));

                    b.Property<string>("VesselName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vessel_name");

                    b.Property<string>("VesselNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("vessel_number");

                    b.Property<string>("VesselType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vessel_type");

                    b.HasKey("VesselId")
                        .HasName("pk_mmsi_vessels");

                    b.ToTable("mmsi_vessels", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("BusinessStyle")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("business_style");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company_address");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("varchar(3)")
                        .HasColumnName("company_code");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("company_tin");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("CompanyId")
                        .HasName("pk_companies");

                    b.HasIndex("CompanyCode")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_company_code");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_company_name");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("IBS.Models.MasterFile.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("product_unit");

                    b.HasKey("ProductId")
                        .HasName("pk_products");

                    b.HasIndex("ProductCode")
                        .IsUnique()
                        .HasDatabaseName("ix_products_product_code");

                    b.HasIndex("ProductName")
                        .IsUnique()
                        .HasDatabaseName("ix_products_product_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.LubeDelivery", b =>
                {
                    b.Property<Guid>("LubeDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("lube_delivery_id");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<decimal>("cost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("drno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drno");

                    b.Property<decimal>("freight")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("freight");

                    b.Property<string>("invoiceno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("invoiceno");

                    b.Property<int>("pagenumber")
                        .HasColumnType("integer")
                        .HasColumnName("pagenumber");

                    b.Property<int>("piece")
                        .HasColumnType("integer")
                        .HasColumnName("piece");

                    b.Property<string>("pono")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pono");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<int>("quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("rcvdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rcvdby");

                    b.Property<DateOnly>("shiftdate")
                        .HasColumnType("date")
                        .HasColumnName("shiftdate");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<decimal>("srp")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("srp");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<string>("suppliercode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("suppliercode");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unit");

                    b.Property<decimal>("unitprice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unitprice");

                    b.HasKey("LubeDeliveryId")
                        .HasName("pk_mobility_lube_deliveries");

                    b.HasIndex("pagenumber")
                        .HasDatabaseName("ix_mobility_lube_deliveries_pagenumber");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_lube_deliveries_stncode");

                    b.ToTable("mobility_lube_deliveries", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityBankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bank_account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.HasKey("BankAccountId")
                        .HasName("pk_mobility_bank_accounts");

                    b.ToTable("mobility_bank_accounts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityChartOfAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .HasColumnType("varchar(25)")
                        .HasColumnName("account_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NormalBalance")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normal_balance");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("parent");

                    b.HasKey("AccountId")
                        .HasName("pk_mobility_chart_of_accounts");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("ix_mobility_chart_of_accounts_account_name");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_chart_of_accounts_account_number");

                    b.ToTable("mobility_chart_of_accounts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BusinessStyle")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("business_style");

                    b.Property<int?>("ClusterCode")
                        .HasColumnType("integer")
                        .HasColumnName("cluster_code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_limit");

                    b.Property<decimal>("CreditLimitAsOfToday")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_limit_as_of_today");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerCodeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("customer_code_name");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerTerms")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("customer_terms");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_tin");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("customer_type");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("HasMultipleTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("has_multiple_terms");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCheckDetailsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_check_details_required");

                    b.Property<decimal>("QuantityLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity_limit");

                    b.Property<decimal?>("RetentionRate")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("retention_rate");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("vat_type");

                    b.Property<bool>("WithHoldingTax")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_tax");

                    b.Property<bool>("WithHoldingVat")
                        .HasColumnType("boolean")
                        .HasColumnName("with_holding_vat");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("CustomerId")
                        .HasName("pk_mobility_customers");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_customers_customer_id");

                    b.ToTable("mobility_customers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityPickUpPoint", b =>
                {
                    b.Property<int>("PickUpPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PickUpPointId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Depot")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("depot");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("station_code");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.HasKey("PickUpPointId")
                        .HasName("pk_mobility_pick_up_points");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_mobility_pick_up_points_supplier_id");

                    b.ToTable("mobility_pick_up_points", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CurrentAndPreviousNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("current_and_previous_no");

                    b.Property<string>("CurrentAndPreviousTitle")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("current_and_previous_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Percent")
                        .HasColumnType("integer")
                        .HasColumnName("percent");

                    b.Property<string>("ServiceNo")
                        .HasColumnType("text")
                        .HasColumnName("service_no");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("UnearnedNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unearned_no");

                    b.Property<string>("UnearnedTitle")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unearned_title");

                    b.HasKey("ServiceId")
                        .HasName("pk_mobility_services");

                    b.ToTable("mobility_services", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityStation", b =>
                {
                    b.Property<string>("StationCode")
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("folder_path");

                    b.Property<string>("Initial")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("initial");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PosCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pos_code");

                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationId"));

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("station_name");

                    b.HasKey("StationCode")
                        .HasName("pk_mobility_stations");

                    b.HasIndex("PosCode")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_stations_pos_code");

                    b.HasIndex("StationCode")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_stations_station_code");

                    b.HasIndex("StationName")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_stations_station_name");

                    b.ToTable("mobility_stations", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityStationEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateOnly>("DateHired")
                        .HasColumnType("date")
                        .HasColumnName("date_hired");

                    b.Property<DateOnly?>("DateResigned")
                        .HasColumnType("date")
                        .HasColumnName("date_resigned");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employee_number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Initial")
                        .HasColumnType("text")
                        .HasColumnName("initial");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsManagerial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_managerial");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PagibigNo")
                        .HasColumnType("text")
                        .HasColumnName("pagibig_no");

                    b.Property<string>("Paygrade")
                        .HasColumnType("text")
                        .HasColumnName("paygrade");

                    b.Property<string>("PhilhealthNo")
                        .HasColumnType("text")
                        .HasColumnName("philhealth_no");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("salary");

                    b.Property<string>("SssNo")
                        .HasColumnType("text")
                        .HasColumnName("sss_no");

                    b.Property<string>("StationCode")
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("status");

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(5)")
                        .HasColumnName("suffix");

                    b.Property<string>("Supervisor")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("supervisor");

                    b.Property<string>("TelNo")
                        .HasColumnType("text")
                        .HasColumnName("tel_no");

                    b.Property<string>("TinNo")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tin_no");

                    b.HasKey("EmployeeId")
                        .HasName("pk_mobility_station_employees");

                    b.HasIndex("EmployeeNumber")
                        .HasDatabaseName("ix_mobility_station_employees_employee_number");

                    b.ToTable("mobility_station_employees", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilitySupplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Branch")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("branch");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("category");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DefaultExpenseNumber")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("default_expense_number");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProofOfExemptionFileName")
                        .HasColumnType("text")
                        .HasColumnName("proof_of_exemption_file_name");

                    b.Property<string>("ProofOfExemptionFilePath")
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("proof_of_exemption_file_path");

                    b.Property<string>("ProofOfRegistrationFileName")
                        .HasColumnType("text")
                        .HasColumnName("proof_of_registration_file_name");

                    b.Property<string>("ProofOfRegistrationFilePath")
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("proof_of_registration_file_path");

                    b.Property<string>("ReasonOfExemption")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reason_of_exemption");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("supplier_address");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(7)")
                        .HasColumnName("supplier_code");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierTerms")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("supplier_terms");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("supplier_tin");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tax_type");

                    b.Property<string>("TradeName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trade_name");

                    b.Property<string>("Validity")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("validity");

                    b.Property<DateOnly?>("ValidityDate")
                        .HasColumnType("date")
                        .HasColumnName("validity_date");

                    b.Property<string>("VatType")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("vat_type");

                    b.Property<decimal?>("WithholdingTaxPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("withholding_tax_percent");

                    b.Property<string>("WithholdingTaxtitle")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("withholding_taxtitle");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("SupplierId")
                        .HasName("pk_mobility_suppliers");

                    b.ToTable("mobility_suppliers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCVTradePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int>("CheckVoucherId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.HasKey("Id")
                        .HasName("pk_mobility_cv_trade_payments");

                    b.HasIndex("CheckVoucherId")
                        .HasDatabaseName("ix_mobility_cv_trade_payments_check_voucher_id");

                    b.ToTable("mobility_cv_trade_payments", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCheckVoucherDetail", b =>
                {
                    b.Property<int>("CheckVoucherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckVoucherDetailId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<int>("CheckVoucherHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("EwtPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("ewt_percent");

                    b.Property<bool>("IsUserSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_selected");

                    b.Property<bool>("IsVatable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vatable");

                    b.Property<int?>("StationId")
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_no");

                    b.HasKey("CheckVoucherDetailId")
                        .HasName("pk_mobility_check_voucher_details");

                    b.HasIndex("CheckVoucherHeaderId")
                        .HasDatabaseName("ix_mobility_check_voucher_details_check_voucher_header_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_mobility_check_voucher_details_supplier_id");

                    b.ToTable("mobility_check_voucher_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCheckVoucherHeader", b =>
                {
                    b.Property<int>("CheckVoucherHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CheckVoucherHeaderId"));

                    b.Property<string>("AccruedType")
                        .HasColumnType("text")
                        .HasColumnName("accrued_type");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal[]>("Amount")
                        .HasColumnType("numeric[]")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("AmountPerMonth")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_per_month");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("check_amount");

                    b.Property<DateOnly?>("CheckDate")
                        .HasColumnType("date")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("CheckVoucherHeaderNo")
                        .HasColumnType("text")
                        .HasColumnName("check_voucher_header_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CvType")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cv_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("DcpDate")
                        .HasColumnType("date")
                        .HasColumnName("dcp_date");

                    b.Property<DateOnly?>("DcrDate")
                        .HasColumnType("date")
                        .HasColumnName("dcr_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("invoice_amount");

                    b.Property<bool>("IsAdvances")
                        .HasColumnType("boolean")
                        .HasColumnName("is_advances");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateTime?>("LastCreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_created_date");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months");

                    b.Property<int>("NumberOfMonthsCreated")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_months_created");

                    b.Property<string[]>("PONo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("po_no");

                    b.Property<string>("Particulars")
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("Payee")
                        .HasColumnType("text")
                        .HasColumnName("payee");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string[]>("RRNo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("rr_no");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string[]>("SINo")
                        .HasColumnType("varchar[]")
                        .HasColumnName("si_no");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupportingFileSavedFileName")
                        .HasColumnType("text")
                        .HasColumnName("supporting_file_saved_file_name");

                    b.Property<string>("SupportingFileSavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("supporting_file_saved_url");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("CheckVoucherHeaderId")
                        .HasName("pk_mobility_check_voucher_headers");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_mobility_check_voucher_headers_bank_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_mobility_check_voucher_headers_employee_id");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_mobility_check_voucher_headers_supplier_id");

                    b.ToTable("mobility_check_voucher_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCollectionReceipt", b =>
                {
                    b.Property<int>("CollectionReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("collection_receipt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionReceiptId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cash_amount");

                    b.Property<decimal>("CheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("check_amount");

                    b.Property<string>("CheckBank")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("check_bank");

                    b.Property<string>("CheckBranch")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("check_branch");

                    b.Property<string>("CheckDate")
                        .HasColumnType("text")
                        .HasColumnName("check_date");

                    b.Property<string>("CheckNo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("check_no");

                    b.Property<string>("CollectionReceiptNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("collection_receipt_no");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("EWT")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("ewt");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("F2306FileName")
                        .HasColumnType("text")
                        .HasColumnName("f2306file_name");

                    b.Property<string>("F2306FilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("f2306file_path");

                    b.Property<string>("F2307FileName")
                        .HasColumnType("text")
                        .HasColumnName("f2307file_name");

                    b.Property<string>("F2307FilePath")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("f2307file_path");

                    b.Property<bool>("IsCertificateUpload")
                        .HasColumnType("boolean")
                        .HasColumnName("is_certificate_upload");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<decimal>("ManagerCheckAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("manager_check_amount");

                    b.Property<string>("ManagerCheckBank")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("manager_check_bank");

                    b.Property<string>("ManagerCheckBranch")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("manager_check_branch");

                    b.Property<DateOnly?>("ManagerCheckDate")
                        .HasColumnType("date")
                        .HasColumnName("manager_check_date");

                    b.Property<string>("ManagerCheckNo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("manager_check_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("reference_no");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("remarks");

                    b.Property<string>("SVNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("sv_no");

                    b.Property<long>("SeriesNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("series_number");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("WVAT")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("wvat");

                    b.HasKey("CollectionReceiptId")
                        .HasName("pk_mobility_collection_receipts");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mobility_collection_receipts_customer_id");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_mobility_collection_receipts_service_invoice_id");

                    b.ToTable("mobility_collection_receipts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCreditMemo", b =>
                {
                    b.Property<int>("CreditMemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("credit_memo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CreditMemoId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit_amount");

                    b.Property<string>("CreditMemoNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("credit_memo_no");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("CreditMemoId")
                        .HasName("pk_mobility_credit_memos");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_mobility_credit_memos_service_invoice_id");

                    b.ToTable("mobility_credit_memos", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCustomerOrderSlip", b =>
                {
                    b.Property<int>("CustomerOrderSlipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_slip_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerOrderSlipId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CheckNo")
                        .HasColumnType("text")
                        .HasColumnName("check_no");

                    b.Property<string>("CheckPictureSavedFileName")
                        .HasColumnType("text")
                        .HasColumnName("check_picture_saved_file_name");

                    b.Property<string>("CheckPictureSavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("check_picture_saved_url");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerOrderSlipNo")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasColumnName("customer_order_slip_no");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DisapprovalRemarks")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("disapproval_remarks");

                    b.Property<string>("DisapprovedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("disapproved_by");

                    b.Property<DateTime?>("DisapprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("disapproved_date");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateTime?>("LoadDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("load_date");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("plate_no");

                    b.Property<decimal>("PricePerLiter")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price_per_liter");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("SavedFileName")
                        .HasColumnType("text")
                        .HasColumnName("saved_file_name");

                    b.Property<string>("SavedUrl")
                        .HasColumnType("text")
                        .HasColumnName("saved_url");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<int>("StationId")
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("terms");

                    b.Property<string>("TripTicket")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("trip_ticket");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("uploaded_by");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded_date");

                    b.HasKey("CustomerOrderSlipId")
                        .HasName("pk_mobility_customer_order_slips");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mobility_customer_order_slips_customer_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_mobility_customer_order_slips_product_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_customer_order_slips_station_code");

                    b.ToTable("mobility_customer_order_slips", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCustomerPurchaseOrder", b =>
                {
                    b.Property<int>("CustomerPurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_purchase_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerPurchaseOrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerPurchaseOrderNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_purchase_order_no");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<int>("StationId")
                        .HasColumnType("integer")
                        .HasColumnName("station_id");

                    b.HasKey("CustomerPurchaseOrderId")
                        .HasName("pk_mobility_customer_purchase_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mobility_customer_purchase_orders_customer_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_mobility_customer_purchase_orders_product_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_customer_purchase_orders_station_code");

                    b.ToTable("mobility_customer_purchase_orders", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityDebitMemo", b =>
                {
                    b.Property<int>("DebitMemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("debit_memo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DebitMemoId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit_amount");

                    b.Property<string>("DebitMemoNo")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("debit_memo_no");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("DebitMemoId")
                        .HasName("pk_mobility_debit_memos");

                    b.HasIndex("ServiceInvoiceId")
                        .HasDatabaseName("ix_mobility_debit_memos_service_invoice_id");

                    b.ToTable("mobility_debit_memos", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSCalibration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<int>("PumpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pump_number");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_calibrations");

                    b.HasIndex("ShiftRecordId")
                        .HasDatabaseName("ix_mobility_fms_calibrations_shift_record_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fms_calibrations_station_code");

                    b.ToTable("mobility_fms_calibrations", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSCashierShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BiodieselPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("biodiesel_price");

                    b.Property<decimal>("CashOnHand")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_on_hand");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("EconogasPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("econogas_price");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_number");

                    b.Property<decimal>("EnvirogasPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("envirogas_price");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<bool>("NextDay")
                        .HasColumnType("boolean")
                        .HasColumnName("next_day");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_cashier_shifts");

                    b.HasIndex("ShiftRecordId")
                        .HasDatabaseName("ix_mobility_fms_cashier_shifts_shift_record_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fms_cashier_shifts_station_code");

                    b.ToTable("mobility_fms_cashier_shifts", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_deposits");

                    b.ToTable("mobility_fms_deposits", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSFuelSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric")
                        .HasColumnName("closing");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric")
                        .HasColumnName("opening");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<int>("PumpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pump_number");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_fuel_sales");

                    b.HasIndex("ShiftRecordId")
                        .HasDatabaseName("ix_mobility_fms_fuel_sales_shift_record_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fms_fuel_sales_station_code");

                    b.ToTable("mobility_fms_fuel_sales", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSLubeSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ActualPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_price");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_lube_sales");

                    b.HasIndex("ShiftRecordId")
                        .HasDatabaseName("ix_mobility_fms_lube_sales_shift_record_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fms_lube_sales_station_code");

                    b.ToTable("mobility_fms_lube_sales", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFMSPoSales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ContractPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("contract_price");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_code");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DrNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dr_number");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("driver");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plate_no");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNumber")
                        .HasColumnType("integer")
                        .HasColumnName("shift_number");

                    b.Property<string>("ShiftRecordId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift_record_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.Property<string>("TripTicket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trip_ticket");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fms_po_sales");

                    b.ToTable("mobility_fms_po_sales", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric")
                        .HasColumnName("calibration");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<decimal?>("Closing")
                        .HasColumnType("numeric")
                        .HasColumnName("closing");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("DetailGroup")
                        .HasColumnType("integer")
                        .HasColumnName("detail_group");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<TimeOnly?>("End")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<TimeOnly?>("InTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("in_time");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("item_code");

                    b.Property<decimal?>("Liters")
                        .HasColumnType("numeric")
                        .HasColumnName("liters");

                    b.Property<decimal?>("Opening")
                        .HasColumnType("numeric")
                        .HasColumnName("opening");

                    b.Property<TimeOnly?>("OutTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("out_time");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<TimeOnly?>("Start")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start");

                    b.Property<int>("TransCount")
                        .HasColumnType("integer")
                        .HasColumnName("trans_count");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cust");

                    b.Property<string>("nozdown")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nozdown");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("plateno");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pono");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<int?>("xNOZZLE")
                        .HasColumnType("integer")
                        .HasColumnName("x_nozzle");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oid");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oname");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer")
                        .HasColumnName("x_pump");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<int?>("xTANK")
                        .HasColumnType("integer")
                        .HasColumnName("x_tank");

                    b.Property<int?>("xTRANSACTION")
                        .HasColumnType("integer")
                        .HasColumnName("x_transaction");

                    b.Property<string>("xTicketID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_ticket_id");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_fuels");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_fuels_inv_date");

                    b.HasIndex("ItemCode")
                        .HasDatabaseName("ix_mobility_fuels_item_code");

                    b.HasIndex("Particulars")
                        .HasDatabaseName("ix_mobility_fuels_particulars");

                    b.HasIndex("Shift")
                        .HasDatabaseName("ix_mobility_fuels_shift");

                    b.HasIndex("xONAME")
                        .HasDatabaseName("ix_mobility_fuels_x_oname");

                    b.HasIndex("xPUMP")
                        .HasDatabaseName("ix_mobility_fuels_x_pump");

                    b.HasIndex("xSITECODE")
                        .HasDatabaseName("ix_mobility_fuels_x_sitecode");

                    b.HasIndex("xTicketID")
                        .HasDatabaseName("ix_mobility_fuels_x_ticket_id");

                    b.ToTable("mobility_fuels", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuelDelivery", b =>
                {
                    b.Property<Guid>("FuelDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("fuel_delivery_id");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("driver");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drnumber");

                    b.Property<string>("hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauler");

                    b.Property<int>("pagenumber")
                        .HasColumnType("integer")
                        .HasColumnName("pagenumber");

                    b.Property<string>("platenumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("platenumber");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<decimal>("purchaseprice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("purchaseprice");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("receivedby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("receivedby");

                    b.Property<decimal>("sellprice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("sellprice");

                    b.Property<DateOnly>("shiftdate")
                        .HasColumnType("date")
                        .HasColumnName("shiftdate");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<int>("tanknumber")
                        .HasColumnType("integer")
                        .HasColumnName("tanknumber");

                    b.Property<TimeOnly>("timein")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timein");

                    b.Property<TimeOnly>("timeout")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timeout");

                    b.Property<decimal>("volumeafter")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("volumeafter");

                    b.Property<decimal>("volumebefore")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("volumebefore");

                    b.Property<string>("wcnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wcnumber");

                    b.HasKey("FuelDeliveryId")
                        .HasName("pk_mobility_fuel_deliveries");

                    b.HasIndex("pagenumber")
                        .HasDatabaseName("ix_mobility_fuel_deliveries_pagenumber");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_fuel_deliveries_stncode");

                    b.ToTable("mobility_fuel_deliveries", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityFuelPurchase", b =>
                {
                    b.Property<int>("FuelPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fuel_purchase_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuelPurchaseId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("FuelPurchaseNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fuel_purchase_no");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("gain_or_loss");

                    b.Property<string>("Hauler")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauler");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("purchase_price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityAfter")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_after");

                    b.Property<decimal>("QuantityBefore")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_before");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("received_by");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("selling_price");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<decimal>("ShouldBe")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("should_be");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<int>("TankNo")
                        .HasColumnType("integer")
                        .HasColumnName("tank_no");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("WcNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wc_no");

                    b.HasKey("FuelPurchaseId")
                        .HasName("pk_mobility_fuel_purchase");

                    b.HasIndex("FuelPurchaseNo")
                        .HasDatabaseName("ix_mobility_fuel_purchase_fuel_purchase_no");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_fuel_purchase_product_code");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_fuel_purchase_station_code");

                    b.ToTable("mobility_fuel_purchase", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityGeneralLedger", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("general_ledger_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeneralLedgerId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("customer_code");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_validated");

                    b.Property<string>("JournalReference")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("journal_reference");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product_code");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("supplier_code");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.HasKey("GeneralLedgerId")
                        .HasName("pk_mobility_general_ledgers");

                    b.HasIndex("AccountNumber")
                        .HasDatabaseName("ix_mobility_general_ledgers_account_number");

                    b.HasIndex("AccountTitle")
                        .HasDatabaseName("ix_mobility_general_ledgers_account_title");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("ix_mobility_general_ledgers_customer_code");

                    b.HasIndex("JournalReference")
                        .HasDatabaseName("ix_mobility_general_ledgers_journal_reference");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_general_ledgers_product_code");

                    b.HasIndex("Reference")
                        .HasDatabaseName("ix_mobility_general_ledgers_reference");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_general_ledgers_station_code");

                    b.HasIndex("SupplierCode")
                        .HasDatabaseName("ix_mobility_general_ledgers_supplier_code");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("ix_mobility_general_ledgers_transaction_date");

                    b.ToTable("mobility_general_ledgers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<decimal>("CostOfGoodsSold")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost_of_goods_sold");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("InventoryBalance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("inventory_balance");

                    b.Property<decimal>("InventoryValue")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("inventory_value");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("particulars");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reference");

                    b.Property<decimal>("RunningCost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("running_cost");

                    b.Property<string>("StationCode")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("station_code");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total_cost");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transaction_no");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_cost");

                    b.Property<decimal>("UnitCostAverage")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_cost_average");

                    b.Property<string>("ValidatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("validated_by");

                    b.Property<DateTime?>("ValidatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validated_date");

                    b.HasKey("InventoryId")
                        .HasName("pk_mobility_inventories");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_inventories_product_code");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_inventories_station_code");

                    b.HasIndex("TransactionNo")
                        .HasDatabaseName("ix_mobility_inventories_transaction_no");

                    b.ToTable("mobility_inventories", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityJournalVoucherDetail", b =>
                {
                    b.Property<int>("JournalVoucherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalVoucherDetailId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<int>("JournalVoucherHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_header_id");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_no");

                    b.HasKey("JournalVoucherDetailId")
                        .HasName("pk_mobility_journal_voucher_details");

                    b.HasIndex("JournalVoucherHeaderId")
                        .HasDatabaseName("ix_mobility_journal_voucher_details_journal_voucher_header_id");

                    b.ToTable("mobility_journal_voucher_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityJournalVoucherHeader", b =>
                {
                    b.Property<int>("JournalVoucherHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("journal_voucher_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalVoucherHeaderId"));

                    b.Property<string>("CRNo")
                        .HasColumnType("text")
                        .HasColumnName("cr_no");

                    b.Property<int?>("CVId")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("JVReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jv_reason");

                    b.Property<string>("JournalVoucherHeaderNo")
                        .HasColumnType("text")
                        .HasColumnName("journal_voucher_header_no");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("References")
                        .HasColumnType("text")
                        .HasColumnName("references");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("JournalVoucherHeaderId")
                        .HasName("pk_mobility_journal_voucher_headers");

                    b.HasIndex("CVId")
                        .HasDatabaseName("ix_mobility_journal_voucher_headers_cv_id");

                    b.ToTable("mobility_journal_voucher_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLogReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdjustedValue")
                        .HasColumnType("text")
                        .HasColumnName("adjusted_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("text")
                        .HasColumnName("original_value");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_stamp");

                    b.HasKey("Id")
                        .HasName("pk_mobility_log_reports");

                    b.ToTable("mobility_log_reports", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLube", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountDB")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cashier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("item_code");

                    b.Property<decimal>("LubesQty")
                        .HasColumnType("numeric")
                        .HasColumnName("lubes_qty");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("particulars");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("cust")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cust");

                    b.Property<string>("plateno")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("plateno");

                    b.Property<string>("pono")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pono");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("x_oid");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<string>("xStamp")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("x_stamp");

                    b.Property<int?>("xTRANSACTION")
                        .HasColumnType("integer")
                        .HasColumnName("x_transaction");

                    b.Property<string>("xTicketID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_ticket_id");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_lubes");

                    b.HasIndex("Cashier")
                        .HasDatabaseName("ix_mobility_lubes_cashier");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_lubes_inv_date");

                    b.HasIndex("xTicketID")
                        .HasDatabaseName("ix_mobility_lubes_x_ticket_id");

                    b.ToTable("mobility_lubes", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseDetail", b =>
                {
                    b.Property<int>("LubePurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseDetailId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("CostPerCase")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost_per_case");

                    b.Property<decimal>("CostPerPiece")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("cost_per_piece");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("LubePurchaseHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_header_id");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lube_purchase_header_no");

                    b.Property<int>("Piece")
                        .HasColumnType("integer")
                        .HasColumnName("piece");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unit");

                    b.HasKey("LubePurchaseDetailId")
                        .HasName("pk_mobility_lube_purchase_details");

                    b.HasIndex("LubePurchaseHeaderId")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_lube_purchase_header_id");

                    b.HasIndex("LubePurchaseHeaderNo")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_lube_purchase_header_no");

                    b.HasIndex("ProductCode")
                        .HasDatabaseName("ix_mobility_lube_purchase_details_product_code");

                    b.ToTable("mobility_lube_purchase_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseHeader", b =>
                {
                    b.Property<int>("LubePurchaseHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lube_purchase_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LubePurchaseHeaderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("LubePurchaseHeaderNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lube_purchase_header_no");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("PoNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("po_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("received_by");

                    b.Property<string>("SalesInvoice")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sales_invoice");

                    b.Property<DateOnly>("ShiftDate")
                        .HasColumnType("date")
                        .HasColumnName("shift_date");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("supplier_code");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vat_amount");

                    b.Property<decimal>("VatableSales")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("vatable_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("LubePurchaseHeaderId")
                        .HasName("pk_mobility_lube_purchase_headers");

                    b.HasIndex("LubePurchaseHeaderNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_lube_purchase_headers_lube_purchase_header_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_lube_purchase_headers_station_code");

                    b.ToTable("mobility_lube_purchase_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityMultipleCheckVoucherPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<int>("CheckVoucherHeaderInvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_invoice_id");

                    b.Property<int>("CheckVoucherHeaderPaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("check_voucher_header_payment_id");

                    b.HasKey("Id")
                        .HasName("pk_mobility_multiple_check_voucher_payments");

                    b.HasIndex("CheckVoucherHeaderInvoiceId")
                        .HasDatabaseName("ix_mobility_multiple_check_voucher_payments_check_voucher_head");

                    b.HasIndex("CheckVoucherHeaderPaymentId")
                        .HasDatabaseName("ix_mobility_multiple_check_voucher_payments_check_voucher_head1");

                    b.ToTable("mobility_multiple_check_voucher_payments", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityOffline", b =>
                {
                    b.Property<int>("OfflineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("offline_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfflineId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("balance");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("FirstDsrClosing")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("first_dsr_closing");

                    b.Property<string>("FirstDsrNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_dsr_no");

                    b.Property<decimal>("FirstDsrOpening")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("first_dsr_opening");

                    b.Property<bool>("IsResolve")
                        .HasColumnType("boolean")
                        .HasColumnName("is_resolve");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("liters");

                    b.Property<decimal?>("NewClosing")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("new_closing");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product");

                    b.Property<int>("Pump")
                        .HasColumnType("integer")
                        .HasColumnName("pump");

                    b.Property<decimal>("SecondDsrClosing")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("second_dsr_closing");

                    b.Property<string>("SecondDsrNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_dsr_no");

                    b.Property<decimal>("SecondDsrOpening")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("second_dsr_opening");

                    b.Property<int>("SeriesNo")
                        .HasColumnType("integer")
                        .HasColumnName("series_no");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.HasKey("OfflineId")
                        .HasName("pk_mobility_offlines");

                    b.ToTable("mobility_offlines", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityOffsettings", b =>
                {
                    b.Property<int>("OffSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("off_setting_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OffSettingId"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.HasKey("OffSettingId")
                        .HasName("pk_mobility_offsettings");

                    b.ToTable("mobility_offsettings", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityPOSales", b =>
                {
                    b.Property<int>("POSalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("po_sales_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("POSalesId"));

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cashier_code");

                    b.Property<decimal>("ContractPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("contract_price");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customer_code");

                    b.Property<string>("DrNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dr_no");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("driver");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("POSalesDate")
                        .HasColumnType("date")
                        .HasColumnName("po_sales_date");

                    b.Property<string>("POSalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("po_sales_no");

                    b.Property<TimeOnly?>("POSalesTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("po_sales_time");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plate_no");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("integer")
                        .HasColumnName("shift_no");

                    b.Property<string>("ShiftRecId")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shift_rec_id");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("station_code");

                    b.Property<string>("TripTicket")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("trip_ticket");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("POSalesId")
                        .HasName("pk_mobility_po_sales");

                    b.HasIndex("POSalesNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_po_sales_po_sales_no");

                    b.ToTable("mobility_po_sales", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityPoSalesRaw", b =>
                {
                    b.Property<Guid>("POSalesRawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("po_sales_raw_id");

                    b.Property<string>("cashiercode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cashiercode");

                    b.Property<decimal>("contractprice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("contractprice");

                    b.Property<string>("createdby")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddate");

                    b.Property<string>("customercode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customercode");

                    b.Property<string>("driver")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("driver");

                    b.Property<string>("drnumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drnumber");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plateno");

                    b.Property<DateOnly>("podate")
                        .HasColumnType("date")
                        .HasColumnName("podate");

                    b.Property<TimeOnly?>("potime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("potime");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<string>("productcode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("productcode");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int>("shiftnumber")
                        .HasColumnType("integer")
                        .HasColumnName("shiftnumber");

                    b.Property<string>("shiftrecid")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("shiftrecid");

                    b.Property<string>("stncode")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("stncode");

                    b.Property<string>("tripticket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tripticket");

                    b.HasKey("POSalesRawId")
                        .HasName("pk_mobility_po_sales_raw");

                    b.HasIndex("shiftrecid")
                        .HasDatabaseName("ix_mobility_po_sales_raw_shiftrecid");

                    b.HasIndex("stncode")
                        .HasDatabaseName("ix_mobility_po_sales_raw_stncode");

                    b.HasIndex("tripticket")
                        .HasDatabaseName("ix_mobility_po_sales_raw_tripticket");

                    b.ToTable("mobility_po_sales_raw", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductUnit")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("product_unit");

                    b.HasKey("ProductId")
                        .HasName("pk_mobility_products");

                    b.ToTable("mobility_products", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityPurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("final_price");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_received");

                    b.Property<int>("PickUpPointId")
                        .HasColumnType("integer")
                        .HasColumnName("pick_up_point_id");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("purchase_order_no");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_received");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_address");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<string>("SupplierSalesOrderNo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier_sales_order_no");

                    b.Property<string>("SupplierTin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supplier_tin");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("terms");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unit_price");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("PurchaseOrderId")
                        .HasName("pk_mobility_purchase_orders");

                    b.HasIndex("PickUpPointId")
                        .HasDatabaseName("ix_mobility_purchase_orders_pick_up_point_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_mobility_purchase_orders_product_id");

                    b.HasIndex("PurchaseOrderNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_purchase_orders_purchase_order_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_purchase_orders_station_code");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_mobility_purchase_orders_supplier_id");

                    b.ToTable("mobility_purchase_orders", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityReceivingReport", b =>
                {
                    b.Property<int>("ReceivingReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("receiving_report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceivingReportId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("AuthorityToLoadNo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("authority_to_load_no");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<decimal>("CanceledQuantity")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("canceled_quantity");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_order_id");

                    b.Property<string>("PurchaseOrderNo")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("purchase_order_no");

                    b.Property<decimal>("QuantityDelivered")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_delivered");

                    b.Property<decimal>("QuantityReceived")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("quantity_received");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<string>("ReceivingReportNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("receiving_report_no");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("remarks");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SupplierDrNo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplier_dr_no");

                    b.Property<DateOnly?>("SupplierInvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("supplier_invoice_date");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier_invoice_number");

                    b.Property<string>("TruckOrVessels")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("truck_or_vessels");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<string>("WithdrawalCertificate")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("withdrawal_certificate");

                    b.HasKey("ReceivingReportId")
                        .HasName("pk_mobility_receiving_reports");

                    b.HasIndex("PurchaseOrderId")
                        .HasDatabaseName("ix_mobility_receiving_reports_purchase_order_id");

                    b.HasIndex("ReceivingReportNo")
                        .IsUnique()
                        .HasDatabaseName("ix_mobility_receiving_reports_receiving_report_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_receiving_reports_station_code");

                    b.ToTable("mobility_receiving_reports", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySafeDrop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateOnly?>("BDate")
                        .HasColumnType("date")
                        .HasColumnName("b_date");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<DateOnly>("INV_DATE")
                        .HasColumnType("date")
                        .HasColumnName("inv_date");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<TimeOnly>("TTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("t_time");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.Property<int?>("xCORPCODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_corpcode");

                    b.Property<int?>("xDAY")
                        .HasColumnType("integer")
                        .HasColumnName("x_day");

                    b.Property<int?>("xMONTH")
                        .HasColumnType("integer")
                        .HasColumnName("x_month");

                    b.Property<string>("xOID")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("x_oid");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("x_oname");

                    b.Property<int?>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.Property<string>("xSTAMP")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("x_stamp");

                    b.Property<string>("xTicketID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_ticket_id");

                    b.Property<int?>("xYEAR")
                        .HasColumnType("integer")
                        .HasColumnName("x_year");

                    b.HasKey("Id")
                        .HasName("pk_mobility_safe_drops");

                    b.HasIndex("INV_DATE")
                        .HasDatabaseName("ix_mobility_safe_drops_inv_date");

                    b.HasIndex("xONAME")
                        .HasDatabaseName("ix_mobility_safe_drops_x_oname");

                    b.HasIndex("xTicketID")
                        .HasDatabaseName("ix_mobility_safe_drops_x_ticket_id");

                    b.ToTable("mobility_safe_drops", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesDetail", b =>
                {
                    b.Property<int>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesDetailId"));

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("calibration");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("closing");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("liters");

                    b.Property<decimal>("LitersSold")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("liters_sold");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("opening");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("particular");

                    b.Property<decimal?>("PreviousPrice")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("previous_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("price");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("product");

                    b.Property<int>("PumpNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pump_number");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("reference_no");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("sale");

                    b.Property<int>("SalesHeaderId")
                        .HasColumnType("integer")
                        .HasColumnName("sales_header_id");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sales_no");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("value");

                    b.HasKey("SalesDetailId")
                        .HasName("pk_mobility_sales_details");

                    b.HasIndex("SalesHeaderId")
                        .HasDatabaseName("ix_mobility_sales_details_sales_header_id");

                    b.HasIndex("SalesNo")
                        .HasDatabaseName("ix_mobility_sales_details_sales_no");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_sales_details_station_code");

                    b.ToTable("mobility_sales_details", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesHeader", b =>
                {
                    b.Property<int>("SalesHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sales_header_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalesHeaderId"));

                    b.Property<decimal>("ActualCashOnHand")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("actual_cash_on_hand");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cashier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string[]>("Customers")
                        .IsRequired()
                        .HasColumnType("varchar[]")
                        .HasColumnName("customers");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<decimal>("FuelSalesTotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("fuel_sales_total_amount");

                    b.Property<decimal>("GainOrLoss")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("gain_or_loss");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_modified");

                    b.Property<bool>("IsTransactionNormal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_transaction_normal");

                    b.Property<decimal>("LubesTotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("lubes_total_amount");

                    b.Property<decimal[]>("POSalesAmount")
                        .IsRequired()
                        .HasColumnType("numeric(18,4)[]")
                        .HasColumnName("po_sales_amount");

                    b.Property<decimal>("POSalesTotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("po_sales_total_amount");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<string>("Particular")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("particular");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<decimal>("SafeDropTotalAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("safe_drop_total_amount");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sales_no");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("source");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly?>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly?>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total_sales");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("SalesHeaderId")
                        .HasName("pk_mobility_sales_headers");

                    b.HasIndex("Cashier")
                        .HasDatabaseName("ix_mobility_sales_headers_cashier");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_mobility_sales_headers_date");

                    b.HasIndex("SalesNo")
                        .HasDatabaseName("ix_mobility_sales_headers_sales_no");

                    b.HasIndex("Shift")
                        .HasDatabaseName("ix_mobility_sales_headers_shift");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_sales_headers_station_code");

                    b.ToTable("mobility_sales_headers", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityServiceInvoice", b =>
                {
                    b.Property<int>("ServiceInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceInvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("balance");

                    b.Property<string>("CanceledBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("canceled_by");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_date");

                    b.Property<string>("CancellationRemarks")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cancellation_remarks");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("CurrentAndPreviousAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("current_and_previous_amount");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerTin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_tin");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("EditedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("edited_by");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_date");

                    b.Property<string>("Instructions")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_printed");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_status");

                    b.Property<DateOnly>("Period")
                        .HasColumnType("date")
                        .HasColumnName("period");

                    b.Property<string>("PostedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_date");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceInvoiceNo")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasColumnName("service_invoice_no");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("station_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("UnearnedAmount")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("unearned_amount");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voided_by");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("voided_date");

                    b.HasKey("ServiceInvoiceId")
                        .HasName("pk_mobility_service_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_mobility_service_invoices_customer_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_mobility_service_invoices_service_id");

                    b.HasIndex("StationCode")
                        .HasDatabaseName("ix_mobility_service_invoices_station_code");

                    b.ToTable("mobility_service_invoices", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityStationPump", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pump_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PumpId"));

                    b.Property<int>("FmsPump")
                        .HasColumnType("integer")
                        .HasColumnName("fms_pump");

                    b.Property<int>("PosPump")
                        .HasColumnType("integer")
                        .HasColumnName("pos_pump");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("product_code");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("station_code");

                    b.HasKey("PumpId")
                        .HasName("pk_mobility_station_pumps");

                    b.ToTable("mobility_station_pumps", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.ViewModels.FuelSalesView", b =>
                {
                    b.Property<decimal>("AmountDb")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_db");

                    b.Property<DateOnly>("BusinessDate")
                        .HasColumnType("date")
                        .HasColumnName("business_date");

                    b.Property<decimal>("Calibration")
                        .HasColumnType("numeric")
                        .HasColumnName("calibration");

                    b.Property<decimal>("Closing")
                        .HasColumnType("numeric")
                        .HasColumnName("closing");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_code");

                    b.Property<decimal>("Liters")
                        .HasColumnType("numeric")
                        .HasColumnName("liters");

                    b.Property<decimal>("LitersSold")
                        .HasColumnType("numeric")
                        .HasColumnName("liters_sold");

                    b.Property<decimal>("Opening")
                        .HasColumnType("numeric")
                        .HasColumnName("opening");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particulars");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal>("Sale")
                        .HasColumnType("numeric")
                        .HasColumnName("sale");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_in");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_out");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<string>("xONAME")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x_oname");

                    b.Property<int>("xPUMP")
                        .HasColumnType("integer")
                        .HasColumnName("x_pump");

                    b.Property<int>("xSITECODE")
                        .HasColumnType("integer")
                        .HasColumnName("x_sitecode");

                    b.ToTable((string)null);

                    b.ToView("fuel_sales_view", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Mobility.ViewModels.GeneralLedgerView", b =>
                {
                    b.Property<int>("GeneralLedgerId")
                        .HasColumnType("integer")
                        .HasColumnName("general_ledger_id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_title");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("credit");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("text")
                        .HasColumnName("customer_code");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("debit");

                    b.Property<string>("JournalReference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("journal_reference");

                    b.Property<string>("NormalBalance")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normal_balance");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("particular");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_code");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("station_name");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("text")
                        .HasColumnName("supplier_code");

                    b.Property<string>("SupplierName")
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.HasKey("GeneralLedgerId")
                        .HasName("pk_general_ledger_views");

                    b.ToTable((string)null);

                    b.ToView("general_ledger_view", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("NotificationId")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("IBS.Models.PostedPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("module");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<string>("PostedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("posted_by");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("posted_on");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_posted_periods");

                    b.ToTable("posted_periods", (string)null);
                });

            modelBuilder.Entity("IBS.Models.UserNotification", b =>
                {
                    b.Property<Guid>("UserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_notification_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<bool>("RequiresResponse")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_response");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("UserNotificationId")
                        .HasName("pk_user_notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_user_notifications_notification_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_notifications_user_id");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IBS.Models.Bienes.BienesPlacement", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bienes_placements_filpride_bank_accounts_bank_id");

                    b.HasOne("IBS.Models.MasterFile.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bienes_placements_companies_company_id");

                    b.HasOne("IBS.Models.Bienes.BienesPlacement", "RolledFrom")
                        .WithMany()
                        .HasForeignKey("RolledFromId")
                        .HasConstraintName("fk_bienes_placements_bienes_placements_rolled_from_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "SettlementAccount")
                        .WithMany()
                        .HasForeignKey("SettlementAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bienes_placements_filpride_bank_accounts_settlement_account");

                    b.HasOne("IBS.Models.Bienes.BienesPlacement", "SwappedFrom")
                        .WithMany()
                        .HasForeignKey("SwappedFromId")
                        .HasConstraintName("fk_bienes_placements_bienes_placements_swapped_from_id");

                    b.Navigation("BankAccount");

                    b.Navigation("Company");

                    b.Navigation("RolledFrom");

                    b.Navigation("SettlementAccount");

                    b.Navigation("SwappedFrom");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCVTradePayment", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", "CV")
                        .WithMany()
                        .HasForeignKey("CheckVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_cv_trade_payments_filpride_check_voucher_headers_c");

                    b.Navigation("CV");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherDetail", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .HasConstraintName("fk_filpride_check_voucher_details_filpride_bank_accounts_bank_");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", "CheckVoucherHeader")
                        .WithMany("Details")
                        .HasForeignKey("CheckVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_check_voucher_details_filpride_check_voucher_heade");

                    b.HasOne("IBS.Models.MasterFile.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_filpride_check_voucher_details_companies_company_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_filpride_check_voucher_details_filpride_customers_customer_");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_filpride_check_voucher_details_filpride_employees_employee_");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_filpride_check_voucher_details_filpride_suppliers_supplier_");

                    b.Navigation("BankAccount");

                    b.Navigation("CheckVoucherHeader");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_check_voucher_headers_filpride_bank_accounts_bank_");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_filpride_check_voucher_headers_filpride_employees_employee_");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_check_voucher_headers_filpride_suppliers_supplier_");

                    b.Navigation("BankAccount");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherDetail", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherHeader", "JournalVoucherHeader")
                        .WithMany("Details")
                        .HasForeignKey("JournalVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_journal_voucher_details_filpride_journal_voucher_h");

                    b.Navigation("JournalVoucherHeader");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherHeader", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", "CheckVoucherHeader")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_journal_voucher_headers_filpride_check_voucher_hea");

                    b.Navigation("CheckVoucherHeader");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideMultipleCheckVoucherPayment", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", "CheckVoucherHeaderInvoice")
                        .WithMany()
                        .HasForeignKey("CheckVoucherHeaderInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_multiple_check_voucher_payments_filpride_check_vou");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", "CheckVoucherHeaderPayment")
                        .WithMany()
                        .HasForeignKey("CheckVoucherHeaderPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_multiple_check_voucher_payments_filpride_check_vou1");

                    b.Navigation("CheckVoucherHeaderInvoice");

                    b.Navigation("CheckVoucherHeaderPayment");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_purchase_orders_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilpridePickUpPoint", "PickUpPoint")
                        .WithMany()
                        .HasForeignKey("PickUpPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_orders_filpride_pick_up_points_pick_up_po");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_orders_products_product_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_orders_filpride_suppliers_supplier_id");

                    b.Navigation("Customer");

                    b.Navigation("PickUpPoint");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideReceivingReport", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", "DeliveryReceipt")
                        .WithMany()
                        .HasForeignKey("DeliveryReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_receiving_reports_filpride_delivery_receipts_deliv");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany("ReceivingReports")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_receiving_reports_filpride_purchase_orders_po_id");

                    b.Navigation("DeliveryReceipt");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceipt", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_collection_receipts_filpride_bank_accounts_bank_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_collection_receipts_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideSalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_collection_receipts_filpride_sales_invoices_sales_");

                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_collection_receipts_filpride_service_invoices_serv");

                    b.Navigation("BankAccount");

                    b.Navigation("Customer");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceiptDetail", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceipt", "FilprideCollectionReceipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("CollectionReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_collection_receipt_details_filpride_collection_rec");

                    b.Navigation("FilprideCollectionReceipt");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCreditMemo", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideSalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_credit_memos_filpride_sales_invoices_sales_invoice");

                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_credit_memos_filpride_service_invoices_service_inv");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideDebitMemo", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideSalesInvoice", "SalesInvoice")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_debit_memos_filpride_sales_invoices_sales_invoice_");

                    b.HasOne("IBS.Models.Filpride.AccountsReceivable.FilprideServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_debit_memos_filpride_service_invoices_service_invo");

                    b.Navigation("SalesInvoice");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideSalesInvoice", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_sales_invoices_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany()
                        .HasForeignKey("CustomerOrderSlipId")
                        .HasConstraintName("fk_filpride_sales_invoices_filpride_customer_order_slips_custo");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", "DeliveryReceipt")
                        .WithMany()
                        .HasForeignKey("DeliveryReceiptId")
                        .HasConstraintName("fk_filpride_sales_invoices_filpride_delivery_receipts_delivery");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_sales_invoices_products_product_id");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_sales_invoices_filpride_purchase_orders_purchase_o");

                    b.Navigation("Customer");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("DeliveryReceipt");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideServiceInvoice", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_service_invoices_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", "DeliveryReceipt")
                        .WithMany()
                        .HasForeignKey("DeliveryReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_service_invoices_filpride_delivery_receipts_delive");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_service_invoices_filpride_services_service_id");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryReceipt");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideGeneralLedgerBook", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideChartOfAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_filpride_chart_of_accounts_ac");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_filpride_bank_accounts_bank_a");

                    b.HasOne("IBS.Models.MasterFile.Company", "CompanyModel")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_companies_company_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_filpride_employees_employee_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_general_ledger_books_filpride_suppliers_supplier_id");

                    b.Navigation("Account");

                    b.Navigation("BankAccount");

                    b.Navigation("CompanyModel");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Books.FilprideInventory", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("POId")
                        .HasConstraintName("fk_filpride_inventories_filpride_purchase_orders_po_id");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_inventories_products_product_id");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideFreight", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilpridePickUpPoint", "PickUpPoint")
                        .WithMany()
                        .HasForeignKey("PickUpPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_freights_filpride_pick_up_points_pick_up_point_id");

                    b.Navigation("PickUpPoint");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilpridePurchaseLockedRecordsQueue", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilprideReceivingReport", "ReceivingReport")
                        .WithMany()
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_purchase_locked_records_queues_filpride_receiving_");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("IBS.Models.Filpride.FilprideSalesLockedRecordsQueue", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", "DeliveryReceipt")
                        .WithMany()
                        .HasForeignKey("DeliveryReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_sales_locked_records_queues_filpride_delivery_rece");

                    b.Navigation("DeliveryReceipt");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideAuthorityToLoad", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany()
                        .HasForeignKey("CustomerOrderSlipId")
                        .HasConstraintName("fk_filpride_authority_to_loads_filpride_customer_order_slips_c");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_authority_to_loads_filpride_suppliers_supplier_id");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideBookAtlDetail", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCOSAppointedSupplier", "AppointedSupplier")
                        .WithMany()
                        .HasForeignKey("AppointedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_filpride_book_atl_details_filpride_cos_appointed_suppliers_");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideAuthorityToLoad", "Header")
                        .WithMany("Details")
                        .HasForeignKey("AuthorityToLoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_book_atl_details_filpride_authority_to_loads_autho");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany()
                        .HasForeignKey("CustomerOrderSlipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_book_atl_details_filpride_customer_order_slips_cus");

                    b.Navigation("AppointedSupplier");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("Header");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideCOSAppointedSupplier", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany("AppointedSuppliers")
                        .HasForeignKey("CustomerOrderSlipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_cos_appointed_suppliers_filpride_customer_order_sl");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_cos_appointed_suppliers_filpride_purchase_orders_p");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_cos_appointed_suppliers_filpride_suppliers_supplie");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Commissionee")
                        .WithMany()
                        .HasForeignKey("CommissioneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_suppliers_commission");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Hauler")
                        .WithMany()
                        .HasForeignKey("HaulerId")
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_suppliers_hauler_id");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilpridePickUpPoint", "PickUpPoint")
                        .WithMany()
                        .HasForeignKey("PickUpPointId")
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_pick_up_points_pick_");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_customer_order_slips_products_product_id");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_purchase_orders_purc");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_filpride_customer_order_slips_filpride_suppliers_supplier_id");

                    b.Navigation("Commissionee");

                    b.Navigation("Customer");

                    b.Navigation("Hauler");

                    b.Navigation("PickUpPoint");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideDeliveryReceipt", b =>
                {
                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideAuthorityToLoad", "AuthorityToLoad")
                        .WithMany()
                        .HasForeignKey("AuthorityToLoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_authority_to_loads_auth");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Commissionee")
                        .WithMany()
                        .HasForeignKey("CommissioneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_suppliers_commissionee_");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", "CustomerOrderSlip")
                        .WithMany("DeliveryReceipts")
                        .HasForeignKey("CustomerOrderSlipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_customer_order_slips_cu");

                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Hauler")
                        .WithMany()
                        .HasForeignKey("HaulerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_suppliers_hauler_id");

                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fk_filpride_delivery_receipts_filpride_purchase_orders_purchas");

                    b.Navigation("AuthorityToLoad");

                    b.Navigation("Commissionee");

                    b.Navigation("Customer");

                    b.Navigation("CustomerOrderSlip");

                    b.Navigation("Hauler");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilpridePOActualPrice", b =>
                {
                    b.HasOne("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", "PurchaseOrder")
                        .WithMany("ActualPrices")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_po_actual_prices_filpride_purchase_orders_purchase");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideChartOfAccount", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideChartOfAccount", "ParentAccount")
                        .WithMany("Children")
                        .HasForeignKey("ParentAccountId")
                        .HasConstraintName("fk_filpride_chart_of_accounts_filpride_chart_of_accounts_paren");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideCustomerBranch", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany("Branches")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_customer_branches_filpride_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilpridePickUpPoint", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_filpride_pick_up_points_filpride_suppliers_supplier_id");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSIBilling", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_billings_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.MMSI.MMSICollection", null)
                        .WithMany("PaidBills")
                        .HasForeignKey("MMSICollectionId")
                        .HasConstraintName("fk_mmsi_billings_mmsi_collections_mmsi_collection_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIPort", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_billings_mmsi_ports_port_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIPrincipal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId")
                        .HasConstraintName("fk_mmsi_billings_mmsi_principals_principal_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITerminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_billings_mmsi_terminals_terminal_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIVessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_billings_mmsi_vessels_vessel_id");

                    b.Navigation("Customer");

                    b.Navigation("Port");

                    b.Navigation("Principal");

                    b.Navigation("Terminal");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSICollection", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_collections_filpride_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSIDispatchTicket", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_mmsi_dispatch_tickets_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_dispatch_tickets_mmsi_services_service_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITerminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_dispatch_tickets_mmsi_terminals_terminal_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITugboat", "Tugboat")
                        .WithMany()
                        .HasForeignKey("TugBoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_dispatch_tickets_mmsi_tugboats_tug_boat_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITugMaster", "TugMaster")
                        .WithMany()
                        .HasForeignKey("TugMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_dispatch_tickets_mmsi_tug_masters_tug_master_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIVessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_dispatch_tickets_mmsi_vessels_vessel_id");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Terminal");

                    b.Navigation("TugMaster");

                    b.Navigation("Tugboat");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSITariffRate", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_tariff_rates_filpride_customers_customer_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_tariff_rates_mmsi_services_service_id");

                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITerminal", "Terminal")
                        .WithMany()
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_tariff_rates_mmsi_terminals_terminal_id");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSIPrincipal", b =>
                {
                    b.HasOne("IBS.Models.Filpride.MasterFile.FilprideCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_principals_filpride_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITerminal", b =>
                {
                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSIPort", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mmsi_terminals_mmsi_ports_port_id");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MasterFile.MMSITugboat", b =>
                {
                    b.HasOne("IBS.Models.MMSI.MasterFile.MMSITugboatOwner", "TugboatOwner")
                        .WithMany()
                        .HasForeignKey("TugboatOwnerId")
                        .HasConstraintName("fk_mmsi_tugboats_mmsi_tugboat_owners_tugboat_owner_id");

                    b.Navigation("TugboatOwner");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MasterFile.MobilityPickUpPoint", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilitySupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_pick_up_points_mobility_suppliers_supplier_id");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCVTradePayment", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityCheckVoucherHeader", "CV")
                        .WithMany()
                        .HasForeignKey("CheckVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_cv_trade_payments_mobility_check_voucher_headers_c");

                    b.Navigation("CV");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCheckVoucherDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityCheckVoucherHeader", "CheckVoucherHeader")
                        .WithMany()
                        .HasForeignKey("CheckVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_check_voucher_details_mobility_check_voucher_heade");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilitySupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_mobility_check_voucher_details_mobility_suppliers_supplier_");

                    b.Navigation("CheckVoucherHeader");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCheckVoucherHeader", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityBankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_check_voucher_headers_mobility_bank_accounts_bank_");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityStationEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_mobility_check_voucher_headers_mobility_station_employees_e");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilitySupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_check_voucher_headers_mobility_suppliers_supplier_");

                    b.Navigation("BankAccount");

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCollectionReceipt", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_collection_receipts_mobility_customers_customer_id");

                    b.HasOne("IBS.Models.Mobility.MobilityServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_collection_receipts_mobility_service_invoices_serv");

                    b.Navigation("Customer");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCreditMemo", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_credit_memos_mobility_service_invoices_service_inv");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCustomerOrderSlip", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_order_slips_mobility_customers_customer_id");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_order_slips_products_product_id");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityStation", "MobilityStation")
                        .WithMany()
                        .HasForeignKey("StationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_order_slips_mobility_stations_station_code");

                    b.Navigation("Customer");

                    b.Navigation("MobilityStation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityCustomerPurchaseOrder", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_purchase_orders_mobility_customers_custom");

                    b.HasOne("IBS.Models.MasterFile.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_purchase_orders_products_product_id");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityStation", "MobilityStation")
                        .WithMany()
                        .HasForeignKey("StationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_customer_purchase_orders_mobility_stations_station");

                    b.Navigation("Customer");

                    b.Navigation("MobilityStation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityDebitMemo", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityServiceInvoice", "ServiceInvoice")
                        .WithMany()
                        .HasForeignKey("ServiceInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_debit_memos_mobility_service_invoices_service_invo");

                    b.Navigation("ServiceInvoice");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityJournalVoucherDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityJournalVoucherHeader", "JournalVoucherHeader")
                        .WithMany()
                        .HasForeignKey("JournalVoucherHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_journal_voucher_details_mobility_journal_voucher_h");

                    b.Navigation("JournalVoucherHeader");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityJournalVoucherHeader", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityCheckVoucherHeader", "CheckVoucherHeader")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mobility_journal_voucher_headers_mobility_check_voucher_hea");

                    b.Navigation("CheckVoucherHeader");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityLubePurchaseHeader", "LubePurchaseHeader")
                        .WithMany("LubePurchaseDetails")
                        .HasForeignKey("LubePurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_lube_purchase_details_mobility_lube_purchase_heade");

                    b.Navigation("LubePurchaseHeader");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityMultipleCheckVoucherPayment", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityCheckVoucherHeader", "CheckVoucherHeaderInvoice")
                        .WithMany()
                        .HasForeignKey("CheckVoucherHeaderInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_multiple_check_voucher_payments_mobility_check_vou");

                    b.HasOne("IBS.Models.Mobility.MobilityCheckVoucherHeader", "CheckVoucherHeaderPayment")
                        .WithMany()
                        .HasForeignKey("CheckVoucherHeaderPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_multiple_check_voucher_payments_mobility_check_vou1");

                    b.Navigation("CheckVoucherHeaderInvoice");

                    b.Navigation("CheckVoucherHeaderPayment");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityPurchaseOrder", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityPickUpPoint", "PickUpPoint")
                        .WithMany()
                        .HasForeignKey("PickUpPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_purchase_orders_mobility_pick_up_points_pick_up_po");

                    b.HasOne("IBS.Models.Mobility.MobilityProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_purchase_orders_mobility_products_product_id");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityStation", "MobilityStation")
                        .WithMany()
                        .HasForeignKey("StationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_purchase_orders_mobility_stations_station_code");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilitySupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_purchase_orders_mobility_suppliers_supplier_id");

                    b.Navigation("MobilityStation");

                    b.Navigation("PickUpPoint");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityReceivingReport", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilityPurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_receiving_reports_mobility_purchase_orders_purchas");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesDetail", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MobilitySalesHeader", "SalesHeader")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_sales_details_mobility_sales_headers_sales_header_");

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityServiceInvoice", b =>
                {
                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_service_invoices_mobility_customers_customer_id");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_service_invoices_mobility_services_service_id");

                    b.HasOne("IBS.Models.Mobility.MasterFile.MobilityStation", "MobilityStation")
                        .WithMany()
                        .HasForeignKey("StationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mobility_service_invoices_mobility_stations_station_code");

                    b.Navigation("Customer");

                    b.Navigation("MobilityStation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IBS.Models.UserNotification", b =>
                {
                    b.HasOne("IBS.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_notifications_notification_id");

                    b.HasOne("IBS.Models.ApplicationUser", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_application_user_user_id");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IBS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IBS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("IBS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IBS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("IBS.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideCheckVoucherHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilprideJournalVoucherHeader", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsPayable.FilpridePurchaseOrder", b =>
                {
                    b.Navigation("ActualPrices");

                    b.Navigation("ReceivingReports");
                });

            modelBuilder.Entity("IBS.Models.Filpride.AccountsReceivable.FilprideCollectionReceipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideAuthorityToLoad", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("IBS.Models.Filpride.Integrated.FilprideCustomerOrderSlip", b =>
                {
                    b.Navigation("AppointedSuppliers");

                    b.Navigation("DeliveryReceipts");
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideChartOfAccount", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("IBS.Models.Filpride.MasterFile.FilprideCustomer", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("IBS.Models.MMSI.MMSICollection", b =>
                {
                    b.Navigation("PaidBills");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilityLubePurchaseHeader", b =>
                {
                    b.Navigation("LubePurchaseDetails");
                });

            modelBuilder.Entity("IBS.Models.Mobility.MobilitySalesHeader", b =>
                {
                    b.Navigation("SalesDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
