@using IBS.Utility
@using IBS.Models.ViewModels
@model IEnumerable<GeneralLedgerView>

@{
    string currencyFormat = "N2";
    decimal balance = 0;
    decimal debit = 0;
    decimal credit = 0;

    ViewData["Title"] = "GL By Account Number";

    var accounts = ViewData["Accounts"] as List<ChartOfAccount>;
}

<style>
    .container {
        max-width: none;
    }
</style>

<div class="mb-3 row">
    <div class="col-11">
        <h5>GENERAL LEDGER BY ACCOUNT NUMBER</h5>
        <h6>Date Range: @ViewData["DateFrom"] - @ViewData["DateTo"]</h6>
        <h6>Account No: @ViewData["AccountNo"]</h6>
        <h6>Account Title: @ViewData["AccountName"]</h6>
        <h6>Product Code: @ViewData["ProductCode"]</h6>
    </div>
</div>

@if (Model.Any())
{
    <div class="table-responsive">
        <table id="ledgerTable" class="table">
            <thead>
                <tr class="table-primary">
                    <th>Transaction Date</th>
                    <th>Station Code</th>
                    <th>Station Name</th>
                    <th>Particular</th>
                    <th>Account No</th>
                    <th>Account Title</th>
                    <th>Product Code</th>
                    <th>Product Name</th>
                    <th>Customer Code</th>
                    <th>Customer Name</th>
                    <th>Supplier Code</th>
                    <th>Supplier Name</th>
                    <th class="text-end">Debit</th>
                    <th class="text-end">Credit</th>
                    <th class="text-end">Balance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var journals in Model.OrderBy(j => j.AccountNumber).GroupBy(g => g.AccountTitle))
                {
                    balance = 0;

                    foreach (var journal in journals.OrderBy(j => j.TransactionDate))
                    {

                        if (balance != 0)
                        {
                            if (journal.AccountCategory == nameof(AccountCategory.Debit))
                            {
                                balance += journal.Debit - journal.Credit;
                            }
                            else
                            {
                                balance -= journal.Debit - journal.Credit;
                            }
                        }
                        else
                        {
                            balance = journal.Debit > 0 ? journal.Debit : journal.Credit;
                        }

                        <tr>
                            <td>@Html.DisplayFor(model => journal.TransactionDate)</td>
                            <td>@Html.DisplayFor(model => journal.StationCode)</td>
                            <td>@Html.DisplayFor(model => journal.StationName)</td>
                            <td>@Html.DisplayFor(model => journal.Particular)</td>
                            <td>@Html.DisplayFor(model => journal.AccountNumber)</td>
                            <td>@Html.DisplayFor(model => journal.AccountTitle)</td>
                            <td>@Html.DisplayFor(model => journal.ProductCode)</td>
                            <td>@Html.DisplayFor(model => journal.ProductName)</td>
                            <td>@Html.DisplayFor(model => journal.CustomerCode)</td>
                            <td>@Html.DisplayFor(model => journal.CustomerName)</td>
                            <td>@Html.DisplayFor(model => journal.SupplierCode)</td>
                            <td>@Html.DisplayFor(model => journal.SupplierName)</td>
                            <td class="text-end">@journal.Debit.ToString(currencyFormat)</td>
                            <td class="text-end">@journal.Credit.ToString(currencyFormat)</td>
                            <td class="text-end">@balance.ToString(currencyFormat)</td>
                        </tr>
                    }
                    <tr class="table-primary">

                        @{
                            debit = journals.Sum(j => j.Debit);
                            credit = journals.Sum(j => j.Credit);
                            balance = debit - @credit;
                        }

                        <td colspan="12" class="text-center"> Total @journals.Key</td>
                        <td class="text-end">@debit.ToString(currencyFormat)</td>
                        <td class="text-end">@credit.ToString(currencyFormat)</td>
                        <td class="text-end">@balance.ToString(currencyFormat)</td>
                    </tr>
                }

                <tr style="border-top: double">

                    @{
                        debit = Model.Sum(j => j.Debit);
                        credit = Model.Sum(j => j.Credit);
                        balance = debit - credit;
                    }

                    <td colspan="12" class="text-center">TOTAL</td>
                    <td class="text-end">@debit.ToString(currencyFormat)</td>
                    <td class="text-end">@credit.ToString(currencyFormat)</td>
                    <td class="text-end">@balance.ToString(currencyFormat)</td>
                </tr>
            </tbody>
        </table>
    </div>
}
else
{
    <p><i>No data available in report.</i></p>
}

<div class="row mt-5">
    <div class="col-6 col-md-3">
        <a onclick="window.print()" class="btn btn-primary form-control buttons">Print</a>
    </div>
    <div class="col-6 col-md-3">
        <a asp-area="User" asp-controller="GeneralLedger" asp-action="GetAccountNo" class="btn btn-outline-primary border form-control buttons">Back</a>
    </div>
</div>
