@model IEnumerable<FilpridePurchaseOrder>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Purchase Order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">PURCHASE ORDER</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-area="Filpride" asp-controller="PurchaseOrder" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="paginatedTable">
            <thead>
                <tr class="text-nowrap table-secondary">
                    <th>
                        PO No
                    </th>
                    <th>
                        IS PO No
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Supplier)
                    </th>
                    <th>
                        Product
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Quantity)
                    </th>
                    <th>
                        Unlifted
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedBy)
                    </th>
                    <th>
                        Status
                    </th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<!-- Add Modal HTML -->
<div id="notification"></div>
<div class="modal fade" id="updatePriceModal" tabindex="-1" aria-labelledby="updatePriceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePriceModalLabel">Update Price</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updatePriceForm">
                    <input type="hidden" id="purchaseOrderId" name="purchaseOrderId" />
                    <div class="mb-3">
                        <label for="volume" class="form-label">Triggered Volume</label>
                        <input type="number" class="form-control" id="volume" name="volume" step="0.0001"/>
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Actual Price</label>
                        <input type="number" class="form-control" id="price" name="price" step="0.0001" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "PurchaseOrder", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "PurchaseOrder", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
    $(document).ready(function() {
        $('#paginatedTable').DataTable({
            "processing": true, // Enable processing indicator
            "serverSide": true, // Enable server-side processing
            "stateSave" : true,
            "ajax": {
                "url": "@Url.Action("GetPurchaseOrders", "PurchaseOrder", new { area = "Filpride" })",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                },
            },
            "columns": [
                { "data": "purchaseOrderNo" },
                { "data": "oldPoNo" },
                {
                    "data": "date",
                    "name": "date",
                    "render": function (data, type, row) {
                        // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                        var date = new Date(data);
                        return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                    }
                },
                { "data": "supplier.supplierName" },
                { "data": "product.productName" },
                {
                    "data": "quantity",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 4).display(data);
                        return `<span class="text-end d-block">${amount}</span>`;
                    }
                },
                {
                    "data": "quantityReceived",
                    "render": function (data, type, row) {
                        // Assuming 'quantityReceived' is the field for the quantity received
                        var quantityReceived = data;
                        var quantity = row.quantity;
                        var balance = quantity - quantityReceived;
                        return formatNumber(balance);
                    }
                },
                {
                    "data": "amount",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 4).display(data);
                        return `<span class="text-end d-block">${amount}</span>`;
                    }
                },
                { "data": "createdBy" },
                {
                    "data": "status",
                    "render": function(data, type, row) {
                        var statusClass = row.status == "@nameof(Status.Posted)" ? "bg-info" :
                                          row.status == "@nameof(Status.Voided)" || row.status == "@nameof(DRStatus.ForApprovalOfOM)" ? "bg-danger" :
                                          row.status == "@nameof(Status.Canceled)" ? "bg-warning" : "";

                        if (row.isReceived && row.status == "@nameof(Status.Posted)") {
                            row.status = "Lifted";
                            statusClass = "bg-success"
                        }

                        return `<span class="badge rounded-pill w-100 ${statusClass}">${row.status}</span>`;
                    }
                },
                {
                    "data": "purchaseOrderId",
                    "orderable": false,
                    "render": function (data, type, row) {
                        var dropdownContent = '';

                        if (row.status == "@nameof(DRStatus.ForApprovalOfOM)") {
                            // Show only the "Preview" option when status is "ForApprovalOfOM"
                            dropdownContent = `
                                <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Preview</a></li>
                            `;
                        } else {
                            if (row.voidedBy != null || row.canceledBy != null) {
                                // Hide dropdown entirely if the record is voided or canceled
                                dropdownContent = '';
                            } else if (row.postedBy == null) {
                                // Show Edit, Preview, and Cancel options if not posted
                                dropdownContent = `
                                    <li><a class="dropdown-item" href="@Url.Action("Edit", "PurchaseOrder", new { area = "Filpride" })/${data}">Edit</a></li>
                                    <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Preview</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmCancel(${data})">Cancel</a></li>
                                `;
                            } else {
                                // Show Update Price, Preview, and Void options if posted
                                dropdownContent = `
                                    <li><a class="dropdown-item" href="javascript:void(0);" onclick="showUpdatePriceModal(${data}, ${row.unTriggeredQuantity})">Update Price</a></li>
                                    <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Print</a></li>
                                `;
                                if (row.quantityReceived == 0) {
                                    dropdownContent += `
                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmVoid(${data})">Void</a></li>
                                    `;
                                } else {
                                    dropdownContent += `
                                        <li><button class="dropdown-item" disabled readonly>Void</button></li>
                                    `;
                                }
                            }
                        }

                        var dropdown = `
                            <div class="dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                <button class="btn btn-light dropdown-toggle w-100" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    Actions
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown">
                                    ${dropdownContent}
                                </ul>
                            </div>
                        `;

                        return dropdown;
                }
            }

            ],
            "order": [[0, "asc"]], // Default sort by TransactionDate
            "pageLength": 10 // Default number of rows per page
        });
    });
    </script>
    <script>
        function showUpdatePriceModal(purchaseOrderId, unTriggeredQuantity) {
            $('#purchaseOrderId').val(purchaseOrderId);
            $('#volume').attr('max', unTriggeredQuantity); // Set the max attribute dynamically
            $('#updatePriceModal').modal('show');
        }

        $('#updatePriceForm').on('submit', function (e) {
            e.preventDefault();

            const purchaseOrderId = $('#purchaseOrderId').val();
            const volume = $('#volume').val();
            const price = $('#price').val();

            // Validate volume and price using SweetAlert2
            if (volume <= 0 || isNaN(volume)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Volume',
                    text: 'Please enter a volume greater than 0',
                    confirmButtonColor: '#3085d6'
                });
                return false;
            }

            if (price <= 0 || isNaN(price)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Price',
                    text: 'Please enter a price greater than 0',
                    confirmButtonColor: '#3085d6'
                });
                return false;
            }

            $.ajax({
                url: '@Url.Action("UpdatePrice", "PurchaseOrder", new { area = "Filpride" })',
                type: 'POST',
                data: {
                    purchaseOrderId: purchaseOrderId,
                    volume: volume,
                    price: price,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    $('#updatePriceModal').modal('hide');

                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: response.message,
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        }).then(() => {
                            // Reload the page after the timer ends
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message,
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: true
                        });
                    }
                },
                error: function (xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating the price: ' + xhr.responseText,
                        showConfirmButton: true
                    });
                }
            });
        });
    </script>
}
