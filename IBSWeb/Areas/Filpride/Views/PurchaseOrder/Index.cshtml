@model IEnumerable<FilpridePurchaseOrder>
@using IBS.Utility.Enums
@{
    ViewData["Title"] = "Purchase Order";
}

<style>
    .container {
        max-width: 100% !important;
        width: 100% !important;
    }

    /* Custom styles for professional look */
    .table th {
        font-weight: 600;
        color: #374151;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.025em;
    }

    .table tbody tr {
        transition: all 0.2s;
    }

    .table tbody tr:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .table-loading {
        position: relative;
        opacity: 0.6;
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.8em;
        font-size: 0.75rem;
    }

    .actions-dropdown .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }

    .actions-dropdown .dropdown-item:hover {
        background-color: #f3f4f6;
    }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">@ViewData["Title"]</h2>
        <a asp-area="Filpride" asp-controller="PurchaseOrder" asp-action="Create" class="btn btn-light">
            <i class="bi bi-plus-circle"></i> New Order
        </a>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">PO#</th>
                        <th class="text-start">IS PO#</th>
                        <th class="text-start">Date</th>
                        <th class="text-start">Supplier</th>
                        <th class="text-start">Depot</th>
                        <th class="text-start">Product</th>
                        <th class="text-start">Quantity</th>
                        <th class="text-start">Price</th>
                        <th class="text-start">Unlifted</th>
                        <th class="text-start">Amount</th>
                        <th class="text-start">Created By</th>
                        <th class="text-start">Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Update Price Modal  -->
<div id="notification"></div>
<div class="modal fade" id="updatePriceModal" tabindex="-1" aria-labelledby="updatePriceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePriceModalLabel">Update Price</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updatePriceForm">
                    <input type="hidden" id="purchaseOrderId" name="purchaseOrderId" />
                    <div class="mb-3">
                        <input type="hidden" class="form-control" id="volume" name="volume" step="0.0001"/>
                    </div>
                    <div class="mb-3">
                        <label for="price" class="form-label">Actual Price</label>
                        <input type="number" class="form-control" id="price" name="price" step="0.0001" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Product Transfer Modal -->
<div class="modal fade" id="productTransferModal" tabindex="-1" aria-labelledby="productTransferModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTransferModalLabel">Product Transfer - Select Pickup Point</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productTransferForm">
                    <input type="hidden" id="transferPurchaseOrderId" name="purchaseOrderId">
                    <input type="hidden" id="transferSupplierId" name="supplierId">

                    <div class="mb-3">
                        <label for="supplierName" class="form-label">Supplier</label>
                        <input type="text" class="form-control" id="supplierName" readonly>
                    </div>

                    <div class="mb-3">
                        <label for="pickupPointSelect" class="form-label">Pickup Point</label>
                        <select class="form-select" id="pickupPointSelect" name="pickupPointId" required>
                            <option value="" selected disabled>Select pickup point...</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="transferNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="transferNotes" name="notes" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmTransferBtn">Confirm Transfer</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "PurchaseOrder", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "PurchaseOrder", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
    $(document).ready(function() {
        $('#paginatedTable').DataTable({
            "processing": true, // Enable processing indicator
            "serverSide": true, // Enable server-side processing
            "stateSave" : true,
            "stateDuration": 86400,
            "language": {
                "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
            },
            "ajax": {
                "url": "@Url.Action("GetPurchaseOrders", "PurchaseOrder", new { area = "Filpride" })",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                },
                "error": function (xhr, error, thrown) {
                    console.error('DataTables error:', error);
                    alert('An error occurred while loading the data');
                }
            },
            "preDrawCallback": function(settings) {
                $('#paginatedTable').addClass('table-loading');
            },
            "drawCallback": function(settings) {
                $('#paginatedTable').removeClass('table-loading');

                // Initialize all tooltips
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            "columns": [
                { 
                    "data": "purchaseOrderNo",
                    "name": "purchaseOrderNo",
                },
                { 
                    "data": "oldPoNo",
                    "name": "oldPoNo"
                },
                {
                    "data": "date",
                    "name": "date",
                    "render": function (data, type, row) {
                        // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                        var date = new Date(data);
                        return date.toLocaleDateString('en-US', { 
                            year: 'numeric',
                            month: 'short',
                            day: '2-digit' 
                        });
                    }
                },
                { 
                    "data": "supplierName",
                    "name": "supplierName"
                },
                { 
                    "data": "depot",
                    "name": "pickUpPoint.depot"
                },
                { 
                    "data": "productName",
                    "name": "productName"
                },
                {
                    "data": "quantity",
                    "name": "quantity",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                        return `<span class="d-block fw-medium">${amount}</span>`;
                    }
                },
                {
                    "data": "finalPrice",
                    "name": "finalPrice",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 4).display(data);
                        return `<span class="d-block fw-medium">${amount}</span>`;
                    }
                },
                {
                    "data": "quantityReceived",
                    "name": "quantityReceived",
                    "render": function (data, type, row) {
                        // Assuming 'quantityReceived' is the field for the quantity received
                        var quantityReceived = data;
                        var quantity = row.quantity;
                        var balance = quantity - quantityReceived;
                        return formatNumber(balance);
                    }
                },
                {
                    "data": "amount",
                    "name": "amount",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                        return `<span class="d-block fw-medium">${amount}</span>`;
                    }
                },
                { 
                    "data": "createdBy",
                    "name": "createdBy"
                },
                {
                    "data": "status",
                    "name": "status",
                    "render": function(data, type, row) {
                        var statusClass = row.status === "@nameof(Status.Posted)" ? "bg-info" :
                                          row.status === "@nameof(Status.Voided)" || row.status === "@nameof(DRStatus.ForApprovalOfOM)" ? "bg-danger" :
                                          row.status === "@nameof(Status.Canceled)" ? "bg-warning" : "";

                        if (row.isReceived && row.status === "@nameof(Status.Posted)") {
                            row.status = "Lifted";
                            statusClass = "bg-success"
                        }

                        return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                    }
                },
                {
                    "data": "purchaseOrderId",
                    "name": "purchaseOrderId",
                    "orderable": false,
                    "render": function (data, type, row) {
                        var dropdownContent = '';
                        const isAdmin = @User.IsInRole("Admin").ToString().ToLower();

                        if (row.status === "@nameof(DRStatus.ForApprovalOfOM)") {
                            // Show only the "Preview" option when status is "ForApprovalOfOM"
                            dropdownContent = `
                                <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Preview</a></li>
                            `;
                        } else {
                            if (row.voidedBy != null || row.canceledBy != null) {
                                // Hide dropdown entirely if the record is voided or canceled
                                dropdownContent = '';
                            } else if (row.postedBy == null) {
                                // Show Edit, Preview, and Cancel options if not posted
                                dropdownContent = `
                                    <li><a class="dropdown-item" href="@Url.Action("Edit", "PurchaseOrder", new { area = "Filpride" })/${data}">Edit</a></li>
                                    <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Preview</a></li>
                                    <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmCancel(${data})">Cancel</a></li>
                                `;
                            } else {
                                // Show Update Price, Preview, and Void options if posted
                                dropdownContent = '';

                                dropdownContent += `
                                <li><a class="dropdown-item" href="@Url.Action("Print", "PurchaseOrder", new { area = "Filpride" })/${data}">Preview</a></li>
                                 `;

                                // Validate unTriggeredQuantity before showing Update Price
                                if (row.unTriggeredQuantity > 0) {
                                    dropdownContent += `
                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="showUpdatePriceModal(${data}, ${row.unTriggeredQuantity})">Update Price</a></li>
                                    `;
                                }
                                
                                if (!row.isReceived && !row.isSubPo) {
                                    dropdownContent += `
                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="initiateProductTransfer(${data}, '${row.supplierId}', '${row.supplierName}')">Product Transfer</a></li>
                                    `;
                                }
                                
                                if (row.quantityReceived === 0 && !row.isSubPo) {
                                    dropdownContent += `<li><a class="dropdown-item" href="javascript:void(0);" onclick="updateSupplierSalesOrderNo(${data})">Update Sales Order#</a></li>`;
                                }
                                
                                if (row.quantityReceived === 0 && !row.isSubPo && isAdmin) {
                                    dropdownContent += `
                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmVoid(${data})">Void</a></li>
                                    `;
                                }
                            }
                        }

                        var dropdown = `
                            <div class="dropdown actions-dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                 <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                                        type="button" 
                                                        data-bs-toggle="dropdown" 
                                                        aria-expanded="false">
                                                    <i class="bi bi-three-dots"></i>
                                 </button>
                                <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                    ${dropdownContent}
                                </ul>
                            </div>
                        `;

                        return dropdown;
                }
            }

            ],
            "order": [[0, "asc"]], // Default sort by TransactionDate
            "pageLength": 10 // Default number of rows per page
        });
    });
    </script>
    <script>
        function showUpdatePriceModal(purchaseOrderId, unTriggeredQuantity) {
            $('#purchaseOrderId').val(purchaseOrderId);
            $('#volume').val(unTriggeredQuantity).attr('max', unTriggeredQuantity);
            $('#price').val('0.0000');
            $('#updatePriceModal').modal('show');
        }

        $('#updatePriceForm').on('submit', function (e) {
            e.preventDefault();

            const purchaseOrderId = $('#purchaseOrderId').val();
            const volume = $('#volume').val();
            const price = $('#price').val();

            // Validate volume and price using SweetAlert2
            if (volume <= 0 || isNaN(volume)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Volume',
                    text: 'Please enter a volume greater than 0',
                    confirmButtonColor: '#3085d6'
                });
                return false;
            }

            if (price <= 0 || isNaN(price)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Price',
                    text: 'Please enter a price greater than 0',
                    confirmButtonColor: '#3085d6'
                });
                return false;
            }

            $.ajax({
                url: '@Url.Action("UpdatePrice", "PurchaseOrder", new { area = "Filpride" })',
                type: 'POST',
                data: {
                    purchaseOrderId: purchaseOrderId,
                    volume: volume,
                    price: price,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    $('#updatePriceModal').modal('hide');

                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: response.message,
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        }).then(() => {
                            // Reload the page after the timer ends
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message,
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: true
                        });
                    }
                },
                error: function (xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating the price: ' + xhr.responseText,
                        showConfirmButton: true
                    });
                }
            });
        });

        // Function to initiate product transfer
        function initiateProductTransfer(purchaseOrderId, supplierId, supplierName) {
            // Set hidden input values
            document.getElementById('transferPurchaseOrderId').value = purchaseOrderId;
            document.getElementById('transferSupplierId').value = supplierId;

            // Set supplier name from the row data
            document.getElementById('supplierName').value = supplierName;
            document.getElementById('transferNotes').value = "";

            // Fetch pickup points
            fetch(`@Url.Action("GetPickUpPoints", "PurchaseOrder", new { area = "Filpride" })?supplierId=${supplierId}`)
                .then(response => response.json())
                .then(pickUpPoints => {
                    
                    // Populate pickup points dropdown
                    let pickupDropdown = $("#pickupPointSelect").empty().append('<option value="">Select Pickup Point</option>');
                    pickUpPoints.forEach(item => pickupDropdown.append(`<option value="${item.value}">${item.text}</option>`));

                    // Show the modal
                    const transferModal = new bootstrap.Modal(document.getElementById('productTransferModal'));
                    transferModal.show();
                })
                .catch(error => {
                    console.error('Error fetching pickup points:', error);
                    alert('Failed to load pickup points.');
                });
        }

        // Event listener for confirm button
        $(document).ready(function () {
            $('#confirmTransferBtn').on('click', function () {
                const pickupPointId = $('#pickupPointSelect').val();
                const notes = $('#transferNotes').val()

                if (!pickupPointId) {
                    Swal.fire({ icon: 'warning', title: 'Validation', text: 'Please select a pickup point.' });
                    return;
                }

                if (!notes) {
                    Swal.fire({ icon: 'warning', title: 'Validation', text: 'Please input notes.' });
                    return;
                }

                const purchaseOrderId = $('#transferPurchaseOrderId').val();
                const csrfToken = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: '@Url.Action("ProcessProductTransfer", "PurchaseOrder", new { area = "Filpride" })',
                    type: 'POST',
                    contentType: 'application/x-www-form-urlencoded',
                    headers: { 'X-CSRF-TOKEN': csrfToken },
                    data: {
                        purchaseOrderId: purchaseOrderId,
                        pickupPointId: pickupPointId,
                        notes: notes
                    },
                    success: function (data) {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Product transfer processed successfully!',
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            }).then(() => location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to process transfer.',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        alert('Failed to process transfer.');
                    }
                });

                // Hide the modal
                const transferModal = bootstrap.Modal.getInstance(document.getElementById('productTransferModal'));
                transferModal.hide();
            });
        });

        function updateSupplierSalesOrderNo(purchaseOrderId) {
            Swal.fire({
                title: 'Update Supplier Sales Order #',
                input: 'text',
                inputLabel: 'Sales Order Number',
                inputValue: '', // You can pre-fill this if you have the current value
                showCancelButton: true,
                confirmButtonText: 'Submit',
                showLoaderOnConfirm: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'Please enter a supplier sales order number!';
                    }
                },
                preConfirm: (supplierSalesOrderNo) => {
                    return $.ajax({
                        url: '@Url.Action("UpdateSupplierSalesOrderNo", "PurchaseOrder", new { area = "Filpride" })',
                        type: 'POST',
                        data: {
                            purchaseOrderId: purchaseOrderId,
                            supplierSalesOrderNo: supplierSalesOrderNo,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    }).then(response => {
                        if (response.success) {
                            return response; // Pass the success response
                        } else {
                            throw new Error(response.message || 'Failed to update supplier sales order number.');
                        }
                    }).catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    if (result.value.success) { // Check if the AJAX call was successful based on the returned data
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: result.value.message,
                            timer: 3000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.value.message || 'An unexpected error occurred.',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        }

    </script>
}
