@using IBS.Utility.Enums
@model CheckVoucherNonTradeInvoicingViewModel

@{
    ViewData["Title"] = "Edit Non Trade Invoicing";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Edit Non-Trade Invoicing</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data">
            <div class="row">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group mb-3">
                    <label asp-for="TransactionDate" class="control-label"></label>
                    <input asp-for="TransactionDate" type="Date" class="form-control" />
                    <span asp-validation-for="TransactionDate" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Supplier</label>
                    <input asp-for="SupplierId" type="hidden" />
                    <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 supplier" style="width:100%" required>
                        <option></option>
                    </select>
                    <span asp-validation-for="SupplierId" class="text-danger"></span>
                </div>
                <input asp-for="SupplierName" type="hidden" />
                <input asp-for="CVId" type="hidden" />
                <div class="form-floating mb-3">
                    <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierAddress" class="control-label ms-2"></label>
                    <span asp-validation-for="SupplierAddress" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="Optional" readonly />
                    <label asp-for="SupplierTinNo" class="control-label ms-2"></label>
                    <span asp-validation-for="SupplierTinNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="PoNo" class="form-control" placeholder="Input si no" style="height: 100px"></textarea>
                    <label asp-for="PoNo" class="control-label ms-2">PO No</label>
                    <span asp-validation-for="PoNo" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="SiNo" class="form-control" placeholder="Input po no" style="height: 100px"></textarea>
                    <label asp-for="SiNo" class="control-label ms-2">SI No</label>
                    <span asp-validation-for="SiNo" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="Total" class="control-label"></label>
                    <input asp-for="Total" class="form-control money inputAmount" placeholder="0.000" />
                    <span asp-validation-for="Total" class="text-danger"></span>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Upload File (Optional)</label>
                    <input name="file" type="file" class="form-control" />
                </div>
                <div class="form-floating mb-3">
                    <textarea asp-for="Particulars" class="form-control" placeholder="Leave a remarks here" style="height: 100px"></textarea>
                    <label asp-for="Particulars" class="control-label ms-2">Particulars</label>
                    <span asp-validation-for="Particulars" class="text-danger"></span>
                </div>
                <input type="hidden" id="StartDate" name="StartDate" />
                <input type="hidden" id="NumberOfYears" name="NumberOfYears" value="0" />
                <div class="container my-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Accounting Entries</h5>
                        </div>
                        <div class="card-body">
                            <table id="accountTable" class="table table-striped table-hover align-middle">
                                <thead class="table-light">
                                <tr>
                                    <th>Account</th>
                                    <th>Type</th>
                                    <th>Gross Amount</th>
                                    <th>Vatable</th>
                                    <th>EWT</th>
                                    <th>VAT Amount</th>
                                    <th>EWT Amount</th>
                                    <th>Net of VAT</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td>
                                        <select asp-for="AccountingEntries[0].AccountTitle"
                                                class="form-select form-select-sm chart-of-accounts default-expense js-select2"
                                                style="width: 100%">
                                            <option value="">-- Select Account --</option>
                                            @foreach (var account in Model.ChartOfAccounts)
                                            {
                                                <option value="@account.Value">@account.Text</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select asp-for="AccountingEntries[0].Type" class="form-select form-select-sm normal-balance" readonly tabindex="-1">
                                            <option value="@NormalBalance.Debit" selected>@NormalBalance.Debit.ToString()</option>
                                            <option value="@NormalBalance.Credit">@NormalBalance.Credit.ToString()</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[0].Amount" class="form-control form-control-sm text-end amount" />
                                    </td>
                                    <td class="text-center">
                                        <input type="checkbox" asp-for="AccountingEntries[0].Vatable" class="form-check-input vatable default-vatable" />
                                    </td>
                                    <td>
                                        <select asp-for="AccountingEntries[0].TaxPercentage" class="form-select form-select-sm taxable">
                                            <option value="" selected disabled>%</option>
                                            <option value="0">0%</option>
                                            <option value="0.01">1%</option>
                                            <option value="0.02">2%</option>
                                            <option value="0.05">5%</option>
                                            <option value="0.1">10%</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[0].VatAmount" class="form-control form-control-sm text-end vat-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[0].TaxAmount" class="form-control form-control-sm text-end tax-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[0].NetOfVatAmount" class="form-control form-control-sm text-end net-of-vat" readonly />
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm" disabled>
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <select class="form-select form-select-sm chart-of-accounts js-select2" style="width: 100%" disabled>
                                            <option value="">-- Select Account --</option>
                                            @foreach (var account in Model.ChartOfAccounts)
                                            {
                                                <option value="@account.Value" selected="@account.Value.Contains("202010200")">@account.Text</option>
                                            }
                                        </select>
                                        <input type="hidden" asp-for="AccountingEntries[1].AccountTitle" value="@Model.ChartOfAccounts.FirstOrDefault(c => c.Value.Contains("202010200"))?.Text" />
                                    </td>
                                    <td>
                                        <select class="form-select form-select-sm normal-balance" disabled>
                                            <option value="@NormalBalance.Debit">@NormalBalance.Debit.ToString()</option>
                                            <option value="@NormalBalance.Credit" selected>@NormalBalance.Credit.ToString()</option>
                                        </select>
                                        <input type="hidden" asp-for="AccountingEntries[1].Type" value="@NormalBalance.Credit" />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[1].Amount" class="form-control form-control-sm text-end amount" />
                                    </td>
                                    <td class="text-center">
                                        <input type="checkbox" asp-for="AccountingEntries[1].Vatable" class="form-check-input vatable" />
                                    </td>
                                    <td>
                                        <select asp-for="AccountingEntries[1].TaxPercentage" class="form-select form-select-sm taxable default-tax-percentage">
                                            <option value="" selected disabled>%</option>
                                            <option value="0">0%</option>
                                            <option value="0.01">1%</option>
                                            <option value="0.02">2%</option>
                                            <option value="0.05">5%</option>
                                            <option value="0.1">10%</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[1].VatAmount" class="form-control form-control-sm text-end vat-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[1].TaxAmount" class="form-control form-control-sm text-end tax-amount" readonly />
                                    </td>
                                    <td>
                                        <input type="number" asp-for="AccountingEntries[1].NetOfVatAmount" class="form-control form-control-sm text-end net-of-vat" readonly />
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-danger btn-sm" disabled>
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-end">
                                <button id="addRow" type="button" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-plus-circle"></i> Add Row
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-light">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="totalDebit" class="form-label">Total Debit</label>
                            <input id="totalDebit" type="number" class="form-control text-end" value="0" readonly />
                        </div>
                        <div class="col-md-4">
                            <label for="totalCredit" class="form-label">Total Credit</label>
                            <input id="totalCredit" type="number" class="form-control text-end" value="0" readonly />
                        </div>
                        <div class="col-md-4">
                            <label for="validationStatus" class="form-label">Status</label>
                            <input id="validationStatus" type="text" class="form-control text-center fw-bold text-danger" value="Invalid" readonly />
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-3">
                        <button id="submitButton" class="btn btn-success me-2" type="submit" disabled>
                            <i class="bi bi-check-circle"></i> Submit
                        </button>
                        <a asp-area="Filpride" asp-controller="CheckVoucherNonTradeInvoice" asp-action="Index"
                           class="btn btn-outline-primary d-flex align-items-center">
                            <i class="bi bi-arrow-left-circle me-2"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $("#AccountNo").change(function () {
            var accountNumber = $(this).val();
            if (accountNumber.startsWith("10201") || accountNumber.startsWith("10105")) {
                // Close the modal
                $("#AddAccEntry").modal("hide");
                Swal.fire({
                    title: "Create Automatic Journal Entry",
                    text: "Do you want to create an automatic journal entry?",
                    icon: "question",
                    showCancelButton: true,
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    confirmButtonText: "Yes",
                    cancelButtonText: "No",
                    showLoaderOnConfirm: true,
                    preConfirm: () => {
                        return new Promise((resolve) => {
                            Swal.fire({
                                title: "Input Start Date and Number of Years",
                                html:
                                        "<input id='start-date' type='date' class='swal2-input' placeholder='Start Date'>" +
                                        "<input id='num-years' type='number' class='swal2-input' placeholder='Number of Years'>",
                                focusConfirm: false,
                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                preConfirm: () => {
                                    return [
                                        $("#start-date").val(),
                                        $("#num-years").val()
                                    ];
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    resolve(result.value);
                                }
                            });
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Result contains an array with the start date and number of years
                        var startDate = result.value[0];
                        var numYears = result.value[1];
                        // Assign the values to hidden inputs in your form
                        $("#StartDate").val(startDate);
                        $("#NumberOfYears").val(numYears);
                        // Close the modal
                        $("#AddAccEntry").modal("show");
                    }
                });
            }
        });
    </script>
    <script>
        const VAT_RATE = 0.12; // Example VAT rate
        const VAT_INCLUDED_PRICE_MULTIPLIER = 1.12; // Multiplier for price including VAT

        // Function to calculate tax and VAT for a specific row
        function calculateTaxAndVat(row) {
            if (!row) return;

            const amountField = row.querySelector(".amount");
            const vatableField = row.querySelector(".vatable");
            const taxAmountField = row.querySelector(".tax-amount");
            const vatAmountField = row.querySelector(".vat-amount");
            const netOfVatField = row.querySelector(".net-of-vat");

            const amount = parseFloat(amountField.value) || 0;
            const taxPercentage = parseFloat(row.querySelector(".taxable").value) || 0;  // Get tax percentage from dropdown
            const isVatable = vatableField.checked;

            // Calculate net of VAT
            const netOfVat = isVatable ? amount / VAT_INCLUDED_PRICE_MULTIPLIER : amount;

            // Calculate tax and VAT
            const taxAmount = netOfVat * taxPercentage;
            const vatAmount = isVatable ? netOfVat * VAT_RATE : 0;

            // Update fields
            taxAmountField.value = taxAmount.toFixed(2);
            vatAmountField.value = vatAmount.toFixed(2);
            netOfVatField.value = netOfVat.toFixed(2);
        }

        // Event delegation to handle input and change events for the table
        document.getElementById("accountTable").addEventListener("input", (event) => {
            const row = event.target.closest("tr");
            if (row && (event.target.classList.contains("amount") ||
                    event.target.classList.contains("vatable") ||
                    event.target.classList.contains("taxable"))) {
                calculateTaxAndVat(row);
            }
        });

        document.getElementById("addRow").addEventListener("click", () => {
            const tableBody = document.querySelector("#accountTable tbody");
            const rowCount = tableBody.rows.length;

            const newRowHTML = `
                <tr>
                    <td class="px-2">
                        <select name="AccountingEntries[${rowCount}].AccountTitle" class="form-select form-select-sm chart-of-accounts js-select2" style="width: 100%" required>
                            ${document.querySelector(".chart-of-accounts").innerHTML}
                        </select>
                    </td>
                    <td class="px-2">
                        <select name="AccountingEntries[${rowCount}].Type" class="form-select form-select-sm normal-balance">
                            <option value="@NormalBalance.Debit">@NormalBalance.Debit.ToString()</option>
                            <option value="@NormalBalance.Credit">@NormalBalance.Credit.ToString()</option>
                        </select>
                    </td>
                    <td class="px-2">
                        <input type="number" name="AccountingEntries[${rowCount}].Amount" class="form-control form-control-sm text-end amount" value="0" />
                    </td>
                    <td class="text-center px-2">
                        <input type="checkbox" name="AccountingEntries[${rowCount}].Vatable" class="form-check-input vatable" value="false" />
                    </td>
                    <td class="px-2">
                        <select name="AccountingEntries[${rowCount}].TaxPercentage" class="form-select form-select-sm taxable" required>
                            <option value="" selected disabled>%</option>
                            <option value="0">0%</option>
                            <option value="0.01">1%</option>
                            <option value="0.02">2%</option>
                            <option value="0.05">5%</option>
                            <option value="0.1">10%</option>
                        </select>
                    </td>
                    <td class="px-2">
                        <input type="number" name="AccountingEntries[${rowCount}].VatAmount" class="form-control form-control-sm text-end vat-amount" readonly />
                    </td>
                    <td class="px-2">
                        <input type="number" name="AccountingEntries[${rowCount}].TaxAmount" class="form-control form-control-sm text-end tax-amount" readonly />
                    </td>
                    <td class="px-2">
                        <input type="number" name="AccountingEntries[${rowCount}].NetOfVatAmount" class="form-control form-control-sm text-end net-of-vat" readonly />
                    </td>
                    <td class="text-center px-2">
                        <button type="button" class="btn btn-sm btn-danger removeRow">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            `;

            // Add the new row to the table
            tableBody.insertAdjacentHTML("beforeend", newRowHTML);

            // Reinitialize Select2 for all js-select2 dropdowns
            $('.js-select2').select2({
                placeholder: "Select an option...",
                allowClear: true,
                width: 'resolve',
                theme: 'classic'
            });

            // Attach remove functionality only to the newly added row
            const newRow = tableBody.lastElementChild;
            newRow.querySelector(".removeRow").addEventListener("click", (event) => {
                event.target.closest("tr").remove();
            });
        });



    </script>
    <script>

        $(document).ready(function () {
            // Attach event listener to the select field
            $('.supplier').on('change', function () {
                var supplierId = $(this).val(); // Get the selected supplier ID
                console.log($(".default-expense"));

                // Fetch the supplier details and populate fields
                fetchSupplierDetails(supplierId, function (data) {
                    // Populate the fields with the supplier details
                    $("#SupplierName").val(data.name);
                    $("#SupplierAddress").val(data.address);
                    $("#SupplierTinNo").val(data.tinNo);

                    // Set the default expense account in the dropdown
                    $(".default-expense").val(data.defaultExpense).change(); // Set the selected account

                    // Set the tax percentage dropdown
                    const taxDropdown = $(".default-tax-percentage");
                    taxDropdown.val(data.taxPercent).change();

                    // Recalculate tax and VAT
                    const row = taxDropdown.closest("tr")[0]; // Find the relevant row
                    calculateTaxAndVat(row); // Call the calculation function


                    // Handle the "Vatable" checkbox
                    const vatableCheckbox = $(".default-vatable");
                    vatableCheckbox.prop("checked", data.vatable); // Check or uncheck based on the supplier
                    if (data.vatable) {
                        const row = vatableCheckbox.closest("tr")[0]; // Find the relevant row
                        calculateTaxAndVat(row); // Call the calculation function
                    }

                });
            });

            $('.supplier').each(function () {
                var supplierId = $(this).val(); // Get the supplier ID from each dropdown

                // Fetch the supplier details and populate fields
                if (supplierId) {
                    fetchSupplierDetails(supplierId, function (data) {
                        // Populate the fields with the supplier details (for each dropdown)
                        $(this).closest('.form-group').find('.supplier-address').val(data.address);
                        $(this).closest('.form-group').find('.supplier-phone').val(data.phone);
                    });
                }
            });
        });

        function fetchSupplierDetails(supplierId, onSuccessCallback) {
            if (!supplierId) {
                console.error('Supplier ID is required');
                return;
            }

            // Make AJAX call to get supplier details
            $.ajax({
                url: '@Url.Action("GetSupplierDetails", "CheckVoucherNonTradeInvoice", new { area = "Filpride" })',
                type: 'GET',
                data: { supplierId: supplierId },   // Send the selected supplier ID
                success: function (data) {
                    // Call the provided callback with the supplier details
                    if (data && typeof onSuccessCallback === 'function') {
                        onSuccessCallback(data);
                    }
                },
                error: function (xhr, status, error) {
                    // Handle any errors
                    alert('Error fetching supplier details');
                }
            });
        }
    </script>
    <script>
        function calculateTotals() {
            let totalDebit = 0;
            let totalCredit = 0;

            // Iterate through the rows to calculate totals
            $('#accountTable tbody tr').each(function () {
                const type = $(this).find('.normal-balance').val();
                const amount = parseFloat($(this).find('.amount').val()) || 0;

                if (type === "Debit") {
                    totalDebit += amount;
                } else if (type === "Credit") {
                    totalCredit += amount;
                }
            });

            // Update totals in the UI
            $('#totalDebit').val(totalDebit.toFixed(2));
            $('#totalCredit').val(totalCredit.toFixed(2));

            const isValid = totalDebit === totalCredit;
            $('#validationStatus').val(isValid ? 'Valid' : 'Invalid');

            // Enable or disable the submit button
            $('#submitButton').prop('disabled', !isValid);
        }

        $(document).on('input change', '.amount, .normal-balance', calculateTotals);

        // Recalculate totals when a new row is added
        $('#addRow').click(function () {
            // Add a new row (implementation not shown here)
            calculateTotals();
        });

        // Initial calculation on page load
        $(document).ready(calculateTotals);
    </script>
}
