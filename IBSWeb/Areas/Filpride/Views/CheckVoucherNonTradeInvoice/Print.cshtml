@using System.Globalization
@using Humanizer
@using IBS.Models
@using IBS.Utility.Constants
@using IBS.Utility.Enums
@using IBS.Utility.Helpers
@using Microsoft.AspNetCore.Identity
@model CheckVoucherVM
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Check Voucher Non-Trade Invoice - Preview";
    var supplier = Model.Supplier ?? Model.Header!.Supplier!;
        
    var selectedCompany = string.Empty;

    if (SignInManager.IsSignedIn(User))
    {
        selectedCompany = User.Claims.FirstOrDefault(c => c.Type == "Company")?.Value;
    }
}

<style>
    @@media print {
        @@page {
            size: A4;
            margin: 0.5cm;
        }
        
        body {
            print-color-adjust: exact;
            -webkit-print-color-adjust: exact;
        }
        
        /* Prevent page breaks within critical sections */
        table { page-break-inside: avoid; }
        tr { page-break-inside: avoid; }
        .table-responsive { page-break-inside: avoid; }
        
        /* Text overflow handling */
        .text-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            line-height: 1.2;
            max-height: 2.4em;
        }
        
        .text-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            line-height: 1.2;
            max-height: 3.6em;
        }
        
        /* Force word breaks for long strings */
        .break-word {
            word-wrap: break-word;
            word-break: break-word;
            overflow-wrap: break-word;
            hyphens: auto;
        }
        
        /* Reduce spacing for compact layout */
        .compact-section {
            margin-top: 10px !important;
        }
        
        /* Hide buttons during print */
        .buttons, .row.pt-2 {
            display: none !important;
        }
        
        /* Prevent orphaned headings */
        h2, h3, h4, h5, h6, thead {
            page-break-after: avoid;
        }
        
        /* Small font for long content */
        .small-if-long {
            font-size: 11px;
        }
    }
    
    /* General styles for screen and print */
    .text-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.2;
    }
    
    .text-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        line-height: 1.2;
    }
    
    .break-word {
        word-wrap: break-word;
        word-break: break-word;
        overflow-wrap: break-word;
    }
</style>

<br class="br-top" />
<table class="w-100 mb-2">
    <tbody>
    <tr>
        <td class="text-end" style="padding: 0 !important;">
            @if (selectedCompany == "Filpride")
            {
                <img src="~/img/Filpride.jpg" width="130px"/>
            }
            else if (selectedCompany == "Mobility")
            {
                <img src="~/img/usa88-logo.png" width="130px"/>
            }
        </td>
    </tr>
    <tr style="margin: 0 !important;">
        <td class="text-center" style="padding: 0 !important;">
            @if (selectedCompany == "Filpride")
            {
                <h2 class="company-name" style="margin: 0 0 1px 0;"><u><b>&nbsp;FILPRIDE RESOURCES INC.&nbsp;</b></u></h2>
                <p style="margin: 0; padding: 0; line-height: 1;">
                    57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone,<br />
                    Kalaklan, Olongapo City, 2200 Zambales, Philippines<br />
                    VAT Reg. TIN: 000-216-589-00000
                </p>
            }
            else if (selectedCompany == "Mobility")
            {
                <h2 class="company-name"><u><b>&nbsp;MOBILITY GROUP CORP.&nbsp;</b></u></h2>
                <p style="line-height: 1; margin-top:-7px;">
                    Tower B Phoenix Sun Business Park Eulogio Rodriguez JR, ave.,<br />
                    Bagumbayan Libis 1110 Quezon City NCR, Second District Philippines<br />
                    VAT Reg. TIN: 776-536-510-00000
                </p>
            }
        </td>
    </tr>
    <tr>
        <td class="text-center" style="padding-top: 10px !important;">
            <h3 class="module-name">
                <b>
                    INVOICING
                </b>
            </h3>
        </td>
    </tr>
    <tr>
        <td class="text-end" style="padding: 0 !important;">
            <h6 class="series">
                <b>
                    No.&nbsp;@Html.DisplayFor(model => model.Header!.CheckVoucherHeaderNo)
                </b>
            </h6>
        </td>
    </tr>
    </tbody>
</table>

<div class="table-responsive compact-section" style="margin-top:10px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="2" style="padding-left:20px;">I. PAYEE DETAILS</th>
                <td colspan="2" class="text-end"><b>Date : @Model.Header!.Date.ToString(SD.Date_Format)</b></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="width:10%; padding-left:20px;">Name :</td>
                <td class="text-clamp-2 break-word">@supplier.SupplierName</td>
                <td style="width:50%;" colspan="2" class="text-nowrap">Other References</td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Address :</td>
                <td class="text-clamp-2 break-word">@supplier.SupplierAddress</td>
                <td style="width:5%;">PO # :</td>
                <td class="text-clamp-2 break-word">
                    @if (Model.Header.PONo != null && Model.Header.PONo.Any())
                    {
                        @string.Join(", ", Model.Header.PONo.Where(x => !string.IsNullOrWhiteSpace(x)))
                    }
                </td>
            </tr>
            <tr>
                <td style="padding-left:20px;">TIN # :</td>
                <td>@supplier.SupplierTin</td>
                <td>SI # :</td>
                <td class="text-clamp-2 break-word">
                    @if (Model.Header.SINo != null && Model.Header.SINo.Any())
                    {
                        @string.Join(", ", Model.Header.SINo.Where(x => !string.IsNullOrWhiteSpace(x)))
                    }
                </td>
            </tr>
            <tr>
                <td style="padding-left:20px;" class="text-nowrap"></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>

<div class="table-responsive compact-section" style="margin-top:15px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="4" style="padding-left:20px;">II. CHECK DETAILS</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="width:20%; padding-left:20px;">Payee :</td>
                @if (Model.Header.SupplierId != null)
                {
                    <td class="text-clamp-2 break-word">@Model.Header!.Payee!.ToUpper()</td>
                }
                else
                {
                    <td class="text-clamp-2 break-word">@Model.Supplier!.SupplierName.ToUpper()</td>
                }
                @if (Model.Header.Total != 0)
                {
                    <td class="text-end">@Model.Header.Total.ToString(SD.Two_Decimal_Format)</td>
                }
                else
                {
                    <td></td>
                }
            </tr>
            <tr>
                <td style="padding-left:20px;">Amount in Words :</td>
                @{
                    decimal convertToWords = Model.Header.Total;

                    int integerPart = Convert.ToInt32(Math.Floor(convertToWords));
                    decimal decimalPart = Math.Round((convertToWords - integerPart), 4);

                    // Convert integer part to words
                    string integerWords = integerPart.ToWords();
                    integerWords = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(integerWords.ToLower());

                    // Convert and format cents value
                    int cents = Convert.ToInt32(decimalPart * 100) % 100;
                    string centsWords = cents.ToWords();
                    centsWords = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(centsWords.ToLower());

                    string upperCaseOne = integerWords;
                    string upperCaseTwo = centsWords;

                    // Combine words and formatting
                    string words;

                    if (cents > 0)
                    {
                        words = $"{upperCaseOne} Pesos and {upperCaseTwo} Centavos Only";
                    }
                    else
                    {
                        words = $"{upperCaseOne} Pesos Only";
                    }

                    words = words.Replace(" And", "");
                    words = words.Replace("-", " ");
                }
                @if (Model.Header.Total != 0)
                {
                    <td class="break-word">*** @words ***</td>
                }
                else
                {
                    <td></td>
                }
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Particulars :</td>
                <td><p style="margin: 0; padding: 0; text-align: justify" class="text-clamp-3 break-word small-if-long">@Model.Header!.Particulars!.ToUpper()</p></td>
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Check #:</td>
                <td>@Html.DisplayFor(model => model.Header!.CheckNo)</td>
                <td></td>
            </tr>
            <tr>
                <td style="padding-left:20px;">Check Date:</td>
                <td>
                    @if (Model.Header.AccruedType != "Invoicing")
                    {
                        @Model.Header.CheckDate?.ToString(SD.Date_Format)
                    }
                </td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>

<div class="table-responsive compact-section" style="margin-top:15px;">
    <table class="w-100">
        <thead>
            <tr style="border: 1px solid black;">
                <th colspan="4" style="padding-left:20px;">III. ACCOUNTING ENTRIES</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="padding-left:20px;"></td>
                <th class="text-end">DEBIT</th>
                <th class="text-end">CREDIT</th>
            </tr>

            @foreach (var cv in Model.Details!.OrderBy(model => model.CheckVoucherDetailId))
            {
                var subAccount = cv.Supplier?.SupplierName
                                 ?? cv.Customer?.CustomerName
                                 ?? cv.Company?.CompanyName
                                 ?? (cv.Employee != null ? $"{cv.Employee.FirstName} {cv.Employee.LastName}" : null)
                                 ?? (cv.BankAccount != null ? $"{cv.BankAccount.AccountNo} {cv.BankAccount.AccountName}" : null);

                <tr>
                    <td style="width:60%; padding-left:20px;" class="break-word small-if-long">
                        @($"{cv.AccountNo} {cv.AccountName}" + (subAccount != null && cv.Debit != 0 ? $" ({subAccount})" : string.Empty))
                    </td>
                    <td class="text-end" style="width:7%;">@cv.Debit.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end" style="width:7%;">@cv.Credit.ToString(SD.Two_Decimal_Format)</td>
                </tr>
            }

            <tr style="border-bottom:double;"></tr>
            <tr>
                <td></td>
                <td class="text-end">@Model.Details!.Sum(d => d.Debit).ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@Model.Details!.Sum(d => d.Credit).ToString(SD.Two_Decimal_Format)</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="table-responsive compact-section" style="margin-top:15px;">
    <table class="w-100">
        <tbody class="text-center">
            <tr>
                <td>Prepared by :</td>
                <td>Reviewed by </td>
                <td>Approved by </td>
            </tr>
            <tr>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">@Model.Header.CreatedBy?.ToUpper()</span> <br />
                </td>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">&nbsp;</span> <br />
                </td>
                <td style="width:33%;">
                    <br />
                    <span class="underline" style="display: inline-block; width:60%;">&nbsp;</span> <br />
                </td>
            </tr>
        </tbody>
    </table>
</div>
<br />

@if (Model.Header.Type == nameof(DocumentType.Documented))
{
    <div class="text-center w-100 compact-section" style="margin-top:10px;">
        <em><strong>"THIS DOCUMENT IS NOT VALID FOR CLAIM OF INPUT TAX"</strong></em><br/><br/>
        @if (selectedCompany == "Filpride")
        {
            <p style="font-size: 11px;">
                <span>Acknowledgement Certificate No:</span>
                <span style="display: inline-block; width:150px;"> @CS.ACCN </span>
                <span>&nbsp;&nbsp;Date Issued:</span>
                <span style="display: inline-block; width:50px;"> @CS.DateIssued </span><br/>
                Series: CV0000000001 - CV9999999999
                Date and Time Created:&nbsp; @DateTimeHelper.GetCurrentPhilippineTimeFormatted(Model.Header.CreatedDate)
            </p>
        }
    </div>
    <br />

    @if (selectedCompany == "Filpride")
    {
        <div class="text-start w-100 footer compact-section" style="margin-top:30px;">
            <p style="line-height: 1; font-size: 11px;">
                <em>
                    <strong>Software Name :</strong> @CS.AAS
                    <br/>
                    <strong>Version :</strong> @CS.Version
                    <br/>
                    <strong>Printed By :</strong> @UserManager.GetUserName(User)!.ToUpper()
                    <br/>
                    <strong>Date & Time Printed :</strong> @DateTimeHelper.GetCurrentPhilippineTimeFormatted()
                </em>
            </p>
        </div>
    }

    @if (!Model.Header.IsPrinted)
    {
        <div class="text-end">
            ORIGINAL COPY
        </div>
    }
    else
    {
        <div class="text-end">
            REPRINT COPY
        </div>
    }
}

<div class="row pt-2">
    @{
        if (Model.Header.PostedBy == null)
        {
            <div class="col-6 col-md-3">
                <a id="approveButton" class="btn btn-primary form-control buttons" onclick="confirmPost(@Model.Header.CheckVoucherHeaderId)">Post</a>
            </div>
        }
        else
        {
            <div class="col-6 col-md-3">
                <a onclick="confirmPrint(@Model.Header?.CheckVoucherHeaderId, @supplier.SupplierId)" class="btn btn-primary form-control buttons">Print</a>
            </div>
            <div class="col-6 col-md-3">
                <a id="approveButton" class="btn btn-primary form-control buttons" onclick="confirmUnpost(@Model.Header?.CheckVoucherHeaderId)">Unpost</a>
            </div>
        }
    }

    <div class="col-6 col-md-3">
        <a asp-area="Filpride" asp-controller="CheckVoucherNonTradeInvoice" asp-action="Index" class="btn btn-outline-primary border form-control buttons">Back to List</a>
    </div>
</div>

@section Scripts {
    <script>
        function confirmPost(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Post'
            }).then((result) => {
                if (result.isConfirmed) {
                    var url = `@Url.Action("Post", "CheckVoucherNonTradeInvoice", new { area = "Filpride" })?id=${encodeURIComponent(id)}&supplierId=${encodeURIComponent(@supplier.SupplierId)}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmUnpost(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This will revert its status to ForPosting",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var url = `@Url.Action("Unpost", "CheckVoucherNonTradeInvoice", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    
    @if (Model.Header?.Type == nameof(DocumentType.Documented) && !Model.Header.IsPrinted)
    {
        <script>
            function confirmPrint(id, supplierId)
            {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "This will mark the document as reprinted and can't be undone.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes'
                }).then((result) =>
                {
                    if (result.isConfirmed)
                    {
                        const afterPrintHandler  = () =>
                        {
                            window.removeEventListener('afterprint', afterPrintHandler);
                            controllerThenPrint(id, supplierId);
                        };
                        window.addEventListener('afterprint', afterPrintHandler);

                        Swal.close();
                        setTimeout(() => { window.print(); }, 200);
                    }
                });
            }
        </script>
    }
    else
    {
        <script>
            function confirmPrint(id, supplierId)
            {
                const afterPrintHandler = () => {
                    window.removeEventListener('afterprint', afterPrintHandler);
                    controllerThenPrint(id, supplierId);
                };
                window.addEventListener('afterprint', afterPrintHandler);

                window.print();
            }
        </script>
    }
    <script>
        function controllerThenPrint(id, supplierId) {
            var url = `@Url.Action("Printed", "CheckVoucherNonTradeInvoice", new { area = "Filpride" })?id=${id}&supplierId=${supplierId}`;
            window.location.href = url;
        }
    </script>

    <script src="~/js/disable-dev-tools-in-print.js" asp-append-version="true"></script>
}