@using IBS.Utility.Enums
@model IEnumerable<FilprideDeliveryReceipt>

@{
    ViewData["Title"] = "Delivery Receipt";
}

<style>
    .container {
        max-width: 100% !important;
        width: 100% !important;
    }

    /* Custom styles for professional look */
    .table th {
        font-weight: 600;
        color: #374151;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.025em;
    }

    .table tbody tr {
        transition: all 0.2s;
    }

    .table tbody tr:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .table-loading {
        position: relative;
        opacity: 0.6;
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.8em;
        font-size: 0.75rem;
    }

    .actions-dropdown .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }

    .actions-dropdown .dropdown-item:hover {
        background-color: #f3f4f6;
    }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">Delivery Receipt</h2>
        <a asp-area="Filpride" asp-controller="DeliveryReceipt" asp-action="Create" class="btn btn-light">
            <i class="bi bi-plus-circle"></i> New Delivery
        </a>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr class="text-start">
                        <th>DR#</th>
                        <th>Manual Dr#</th>
                        <th>DR Date</th>
                        <th>Delivered Date</th>
                        <th>COS#</th>
                        <th>PO#</th>
                        <th>Depot</th>
                        <th>Customer</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Created By</th>
                        <th>Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#paginatedTable').DataTable({
            "processing": true,
            "serverSide": true,
            "stateSave": true,
            "stateDuration": 86400,
            "language": {
                "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
            },
            "ajax": {
                "url": "@Url.Action("GetDeliveryReceipts", "DeliveryReceipt", new { area = "Filpride", filterType = ViewBag.FilterType?.ToString() })",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                },
                "error": function (xhr, error, thrown) {
                    console.error('DataTables error:', error);
                    alert('An error occurred while loading the data');
                }
            },
            "preDrawCallback": function(settings) {
                $('#paginatedTable').addClass('table-loading');
            },
            "drawCallback": function(settings) {
                $('#paginatedTable').removeClass('table-loading');

                // Initialize all tooltips
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            "columns": [
                { "data": "deliveryReceiptNo" },
                { "data": "manualDrNo" },
                { "data": "date", "render": function (data) {
                    var date = new Date(data);
                    return date.toLocaleDateString('en-US', { 
                        year: 'numeric',
                        month: 'short',
                        day: '2-digit'
                    });
                }},
                { 
                    "data": "deliveredDate", 
                    "render": function (data) {
                        if (!data) return '';
                        var date = new Date(data);
                        return date.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: '2-digit'
                        });
                }},
                { "data": "customerOrderSlip.customerOrderSlipNo" },
                { "data": "purchaseOrder.purchaseOrderNo" },
                { "data": "customerOrderSlip.pickUpPoint.depot" },
                { "data": "customer.customerName" },
                { "data": "customerOrderSlip.product.productName" },
                {
                    "data": "quantity",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 4).display(data);
                        return `<span class="d-block fw-medium">${amount}</span>`;
                    }
                },
                { "data": "createdBy" },
                {
                    "data": "status",
                    "render": function(data, type, row) {
                        var statusClass = row.status == "@nameof(DRStatus.ForInvoicing)" ? "bg-info" :
                                          row.status == "@nameof(DRStatus.Invoiced)" ? "bg-success" :
                                          row.status == "@nameof(DRStatus.Voided)" || row.status == "@nameof(CosStatus.ForApprovalOfOM)"  ? "bg-danger" :
                                          row.status == "@nameof(DRStatus.Canceled)" ? "bg-warning" : "";

                        return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                    }
                },
                {
                    "data": "deliveryReceiptId",
                    "orderable": false,
                    "render": function (data, type, row) {
                        let actions = `
                                <div class="dropdown actions-dropdown" style="${row.voidedBy || row.canceledBy ? 'display:none;' : ''}">
                                    <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                            type="button" 
                                            data-bs-toggle="dropdown" 
                                            aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                        if (row.authorityToLoadNo != null) {
                            if (row.status != "@DRStatus.ForApprovalOfOM") {
                                if (!row.deliveredDate) {
                                    actions += `
                                    <li><a class="dropdown-item" href="@Url.Action("Edit", "DeliveryReceipt", new { area = "Filpride" })/${data}">Edit</a></li>
                                    <li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Preview</a></li>
                                    <li><a class="dropdown-item" onclick="confirmCancel(${data})">Cancel</a></li>
                                    <li><a class="dropdown-item" onclick="markAsDelivered(${data})">Mark As Delivered</a></li>`;
                                } else {
                                    actions += `
                                    <li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Print</a></li>
                                    <li><a class="dropdown-item" onclick="confirmVoid(${data})">Void</a></li>`;
                                }
                            }
                            else {
                                actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Preview</a></li>`;
                            }
                        }
                        else{
                            actions += `<li><a class="dropdown-item BookATL" href="#" onclick="bookAuthorityToLoad('${row.customerOrderSlipId}', '${row.customerOrderSlip.supplier.supplierName}')">Book ATL</a></li>
                              <li><a class="dropdown-item" href="@Url.Action("Edit", "DeliveryReceipt", new { area = "Filpride" })/${data}">Edit</a></li>`;
                        }

                        actions += `</ul></div>`;
                        return actions;
                    }
                }
            ]
        });
    </script>
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "DeliveryReceipt", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "DeliveryReceipt", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function markAsDelivered(id) {
            // Get today's date in yyyy-MM-dd format
            let today = new Date().toISOString().split('T')[0];

            Swal.fire({
                title: "Please Confirm the Delivery Date",
                html:
                    `<input id='deliveredDate' type='date' class='swal2-input' value='${today}'>`,
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    let deliveredDate = document.getElementById('deliveredDate').value;
                    // Redirect to the delivered action with the id and date as parameters
                    let url = `@Url.Action("Delivered", "DeliveryReceipt", new { area = "Filpride" })/${id}?deliveredDate=${encodeURIComponent(deliveredDate)}`;
                    window.location.href = url;
                }
            });
        }
    </script>
    <script>
        function bookAuthorityToLoad(id, supplierName) {
            supplierName = supplierName.toUpperCase();
            const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format

            if (supplierName.includes("UNIOIL")) {
                Swal.fire({
                    title: 'Book Authority To Load',
                    html: `
                    <input type="text" id="atlNo" class="swal2-input" placeholder="UPPI ATL No">
                    <input type="date" id="bookingDate" class="swal2-input" placeholder="Date of Booking" value="${today}">`, // Default to today's date
                    focusConfirm: false,
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    preConfirm: () => {
                        const atlNo = document.getElementById('atlNo').value;
                        const bookingDate = document.getElementById('bookingDate').value;
                        if (!atlNo || !bookingDate) {
                            Swal.showValidationMessage('Please enter both UPPI ATL No and Date of Booking.');
                        }
                        return { atlNo, bookingDate };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        var url = `@Url.Action("BookAuthorityToLoad", "CustomerOrderSlip", new { area = "Filpride" })?id=${id}&supplierAtlNo=${result.value.atlNo}&bookedDate=${result.value.bookingDate}`;
                        window.location.href = url;
                    }
                });
            } else {
                Swal.fire({
                    title: 'Book Authority To Load',
                    html: `<input type="date" id="bookedDate" class="swal2-input" placeholder="Select Date" value="${today}">`, // Default to today's date
                    focusConfirm: false,
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    preConfirm: () => {
                        const bookedDate = document.getElementById('bookedDate').value;
                        if (!bookedDate) {
                            Swal.showValidationMessage('Please select a date.');
                        }
                        return bookedDate;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        var url = `@Url.Action("BookAuthorityToLoad", "CustomerOrderSlip", new { area = "Filpride" })?id=${id}&bookedDate=${result.value}`;
                        window.location.href = url;
                    }
                });
            }
        }
    </script>
}