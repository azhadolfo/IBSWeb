@using IBS.Utility.Enums
@model IEnumerable<FilprideDeliveryReceipt>

@{
    ViewData["Title"] = "Delivery Receipt";
}

<link rel="stylesheet" href="~/css/index-style.css">

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">@ViewData["Title"]</h2>
        <a asp-area="Filpride" asp-controller="DeliveryReceipt" asp-action="Create" class="btn btn-light">
            <i class="bi bi-plus-circle"></i> New Delivery
        </a>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">DR#</th>
                        <th class="text-start">Manual Dr#</th>
                        <th class="text-start">DR Date</th>
                        <th class="text-start">Delivered Date</th>
                        <th class="text-start">COS#</th>
                        <th class="text-start">PO#</th>
                        <th class="text-start">Depot</th>
                        <th class="text-start">Customer</th>
                        <th class="text-start">Product</th>
                        <th class="text-start">Quantity</th>
                        <th class="text-start">Created By</th>
                        <th class="text-start">Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#paginatedTable').DataTable({
            "processing": true,
            "serverSide": true,
            "stateSave": true,
            "stateDuration": 86400,
            "language": {
                "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
            },
            "ajax": {
                "url": "@Url.Action("GetDeliveryReceipts", "DeliveryReceipt", new { area = "Filpride", filterType = ViewBag.FilterType?.ToString() })",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                },
                "error": function (xhr, error, thrown) {
                    console.error('DataTables error:', error);
                    alert('An error occurred while loading the data');
                }
            },
            "preDrawCallback": function(settings) {
                $('#paginatedTable').addClass('table-loading');
            },
            "drawCallback": function(settings) {
                $('#paginatedTable').removeClass('table-loading');

                // Initialize all tooltips
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            "columns": [
                { 
                    "data": "deliveryReceiptNo",
                    "name": "deliveryReceiptNo"
                },
                { 
                    "data": "manualDrNo",
                    "name": "manualDrNo"
                },
                { 
                    "data": "date",
                    "name": "date",
                    "render": function (data) {
                    var date = new Date(data);
                    return date.toLocaleDateString('en-US', { 
                        year: 'numeric',
                        month: 'short',
                        day: '2-digit'
                    });
                }},
                { 
                    "data": "deliveredDate",
                    "name": "deliveredDate",
                    "render": function (data) {
                        if (!data) return '';
                        var date = new Date(data);
                        return date.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: '2-digit'
                        });
                }},
                { 
                    "data": "customerOrderSlipNo",
                    "name": "customerOrderSlip.customerOrderSlipNo"
                },
                { 
                    "data": "purchaseOrderNo",
                    "name": "purchaseOrder.PurchaseOrderNo"
                },
                { 
                    "data": "depot",
                    "name": "customerOrderSlip.depot"
                },
                { 
                    "data": "customerName",
                    "name": "customerOrderSlip.customerName",
                },
                { 
                    "data": "productName",
                    "name": "customerOrderSlip.productName"
                },
                {
                    "data": "quantity",
                    "name": "quantity",
                    "render": function (data, type, row) {
                        var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                        return `<span class="d-block fw-medium">${amount}</span>`;
                    }
                },
                { 
                    "data": "createdBy",
                    "name": "createdBy",
                },
                {
                    "data": "status",
                    "name": "status",
                    "render": function(data, type, row) {
                        var statusClass = row.status == "@nameof(DRStatus.ForInvoicing)" ? "bg-info" :
                                          row.status == "@nameof(DRStatus.Invoiced)" ? "bg-success" :
                                          row.status == "@nameof(DRStatus.Voided)" || row.status == "@nameof(CosStatus.ForApprovalOfOM)"  ? "bg-danger" :
                                          row.status == "@nameof(DRStatus.Canceled)" ? "bg-warning" : "";

                        return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                    }
                },
                {
                    "data": "deliveryReceiptId",
                    "name": "deliveryReceiptId",
                    "orderable": false,
                    "render": function (data, type, row) {
                        let actions = `
                                <div class="dropdown actions-dropdown" style="${row.voidedBy || row.canceledBy ? 'display:none;' : ''}">
                                    <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                            type="button" 
                                            data-bs-toggle="dropdown" 
                                            aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                        if (row.status != "@DRStatus.ForApprovalOfOM") {
                            if (!row.deliveredDate) {
                                actions += `
                                    <li><a class="dropdown-item" href="@Url.Action("Edit", "DeliveryReceipt", new { area = "Filpride" })/${data}">Edit</a></li>
                                    <li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Preview</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="confirmCancel(${data})">Cancel</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="markAsDelivered(${data})">Mark As Delivered</a></li>`;
                                
                            } else {
                                actions += `
                                    <li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Preview</a></li>
                                    <li><a class="dropdown-item" onclick="confirmVoid(${data})">Void</a></li>`;
                            }

                            if (!row.hasReceivingReport) {
                                actions += `<li><a class="dropdown-item" href="#" onclick="recordLiftingDate(${data}, '${row.authorityToLoadNo}', '${row.uppiAtlNo}')">Record Lifting Date</a></li>`;
                            }
                        }
                        else {
                            actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "DeliveryReceipt", new { area = "Filpride" })/${data}">Preview</a></li>`;
                        }

                        actions += `</ul></div>`;
                        return actions;
                    }
                }
            ]
        });
    </script>
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "DeliveryReceipt", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "DeliveryReceipt", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function markAsDelivered(id) {
            // Get today's date in yyyy-MM-dd format
            let today = new Date().toISOString().split('T')[0];

            // Get the last day of the current month
            let currentDate = new Date();
            let lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).toISOString().split('T')[0];

            Swal.fire({
                title: "Please confirm the delivery date",
                html: `
            <input type="date" id="deliveredDate" class="swal2-input" value="${today}" max="${lastDayOfMonth}" required>
        `,
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                preConfirm: () => {
                    let deliveredDate = document.getElementById('deliveredDate').value;

                    // Validate the selected date
                    if (!deliveredDate) {
                        Swal.showValidationMessage('Please select a delivery date.');
                        return false; // Prevent submission
                    }

                    // Check if the selected date exceeds the last day of the current month
                    let selectedDate = new Date(deliveredDate);
                    let maxDate = new Date(lastDayOfMonth);

                    if (selectedDate > maxDate) {
                        Swal.showValidationMessage('The selected date cannot exceed the current month.');
                        return false; // Prevent submission
                    }

                    return deliveredDate; // Allow submission
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    let deliveredDate = result.value;
                    // Redirect to the delivered action with the id and date as parameters
                    let url = `@Url.Action("Delivered", "DeliveryReceipt", new { area = "Filpride" })/${id}?deliveredDate=${encodeURIComponent(deliveredDate)}`;
                    window.location.href = url;
                }
            });
        }
    </script>

    <script>
        function recordLiftingDate(id, atlNo, supplierAtlNo) {
            let today = new Date().toISOString().split('T')[0];
            let currentDate = new Date();
            let lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).toISOString().split('T')[0];

            let supplierAtlDisplay = supplierAtlNo !== "null" ? `<strong>Supplier ATL No:</strong> ${supplierAtlNo}<br/>` : "";

            Swal.fire({
                title: "Please confirm the lifting date",
                html: `
        <div style="text-align: center; font-size: 14px; line-height: 1.6; margin-bottom: 10px;">
            <div><strong>ATL No:</strong> ${atlNo}</div>
            ${supplierAtlNo !== "null" ? `<div><strong>Supplier ATL No:</strong> ${supplierAtlNo}</div>` : ""}
        </div>
        <input type="date" id="liftingDate" class="swal2-input" value="${today}" max="${lastDayOfMonth}" required>
    `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes',
                cancelButtonText: 'Cancel',
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                preConfirm: () => {
                    let liftingDate = document.getElementById('liftingDate').value;

                    if (!liftingDate) {
                        Swal.showValidationMessage('Please select a date.');
                        return false;
                    }

                    let selectedDate = new Date(liftingDate);
                    let maxDate = new Date(lastDayOfMonth);

                    if (selectedDate > maxDate) {
                        Swal.showValidationMessage('The selected date cannot exceed the current month.');
                        return false;
                    }

                    return liftingDate;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    let liftingDate = result.value;
                    let url = `@Url.Action("RecordLiftingDate", "DeliveryReceipt", new { area = "Filpride" })/${id}?liftingDate=${encodeURIComponent(liftingDate)}`;
                    window.location.href = url;
                }
            });
        }
    </script>
}