@model IEnumerable<FilprideAuthorityToLoad>

@{
    ViewData["Title"] = "Authority To Load";
}

<link rel="stylesheet" href="~/css/index-style.css">

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">@ViewData["Title"]</h2>
        <a asp-area="Filpride" asp-controller="AuthorityToLoad" asp-action="Create" class="btn btn-light responsive-index-button">
            <i class="bi bi-plus-circle"></i> Book
        </a>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">ATL#</th>
                        <th class="text-start">Date Booked</th>
                        <th class="text-start">Valid Until</th>
                        <th class="text-start">COS#</th>
                        <th class="text-start">Remarks</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#paginatedTable').DataTable({
                "processing": true, // Enable processing indicator
                "serverSide": true, // Enable server-side processing
                "stateSave": true,
                "stateDuration": 86400,
                "language": {
                    "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
                },
                "ajax": {
                    "url": "@Url.Action("GetAuthorityToLoads", "AuthorityToLoad", new { area = "Filpride" })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    "error": function (xhr, error, thrown) {
                        console.error('DataTables error:', error);
                        alert('An error occurred while loading the data');
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#paginatedTable').addClass('table-loading');
                },
                "drawCallback": function(settings) {
                    $('#paginatedTable').removeClass('table-loading');

                    // Initialize all tooltips
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                "columns": [
                    { 
                        "data": "authorityToLoadNo",
                        "name": "authorityToLoadNo"
                    },
                    {
                        "data": "dateBooked",
                        "name": "dateBooked",
                        "render": function(data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { 
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit' 
                            });
                        }
                    },
                    {
                        "data": "validUntil",
                        "name": "validUntil",
                        "render": function(data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { 
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit' 
                            });
                        }
                    },
                    { 
                        "data": "customerOrderSlipId",
                        "name": "customerOrderSlipId",
                        "render": function(data, type, row) {
                            
                            if (row.cosNos.length === 1){
                                return `<span>${row.cosNos[0]}</span>`;
                            }

                            return `<span data-bs-toggle="tooltip" title="${row.cosNos.join(', ')}">
                                        ${row.cosNos.length} COS
                                    </span>`;
                            
                        }
                    },
                    { 
                        "data": "remarks",
                        "name": "remarks",
                    },
                    {
                        "data": "authorityToLoadId",
                        "name": "authorityToLoadId",
                        "orderable": false,
                        "render": function(data, type, row) {
                            let actions = `
                                <div class="dropdown actions-dropdown">
                                    <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                                        type="button" 
                                                        data-bs-toggle="dropdown" 
                                                        aria-expanded="false">
                                                    <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                            // Add Print option
                            actions += `<li><a class="dropdown-item" href="@Url.Action("Print", "AuthorityToLoad", new { area = "Filpride" })/${data}">
                                Preview</a></li>`;

                            // Add Update Valid Until option
                            actions += `<li><a class="dropdown-item" href="#" onclick="showUpdateValidUntil('${data}', '${row.validUntil}')"> Update Valid Until</a></li>`;

                            actions += `</ul></div>`;
                            return actions;
                        }
                    }
                ],
                "order": [[0, "asc"]],
                "pageLength": 10 // Default number of rows per page
            });
        });

        function showUpdateValidUntil(atlId, currentValidUntil) {
            const previousDate = new Date(currentValidUntil);
            const minDate = new Date(previousDate);
            minDate.setDate(minDate.getDate() + 1);

            const formattedDate = minDate.toISOString().split("T")[0];
            
            Swal.fire({
                title: 'Update Validity Date',
                html: `
            <div style="text-align: center; font-size: 16px; margin-bottom: 10px;">
                <label for="newValidUntil" style="display: block; margin-bottom: 5px; font-weight: bold;">Select Validity Date</label>
                <input type="date" id="newValidUntil" class="swal2-input" 
                       style="width: 70%; margin: 0 auto;" 
                       placeholder="Select Date" 
                       min="${formattedDate}" 
                       value="${formattedDate}">
                <small style="display: block; margin-top: 5px; color: gray;">Must not be earlier than <strong>${formattedDate}</strong></small>
            </div>`,
                confirmButtonText: 'Save Changes',
                confirmButtonColor: '#6C63FF',
                cancelButtonText: 'Cancel',
                cancelButtonColor: '#6C757D',
                showCancelButton: true,
                focusConfirm: false,
                preConfirm: () => {
                    const newValidUntil = document.getElementById('newValidUntil').value;
                    if (!newValidUntil) {
                        Swal.showValidationMessage('Please select a new validity date');
                        return false;
                    }
                    return newValidUntil;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const newValidUntil = result.value;
                    console.log(atlId)
                    updateValidUntil(atlId, newValidUntil);
                }
            });
        }


        function updateValidUntil(atlId, newValidUntil) {
            $.ajax({
                url: '@Url.Action("UpdateValidityDate", "AuthorityToLoad", new { area = "Filpride" })',
                type: 'POST',
                data: {
                    id: atlId,
                    newValidUntil: newValidUntil,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#paginatedTable').DataTable().ajax.reload();
                        Swal.fire('Success', 'Valid Until date updated successfully', 'success');
                    } else {
                        Swal.fire('Error', response.message || 'Error updating Valid Until date', 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', 'Error updating Valid Until date', 'error');
                }
            });
        }

    </script>
}