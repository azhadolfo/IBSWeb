@model IEnumerable<FilprideAuthorityToLoad>

@{
    ViewData["Title"] = "Authority To Load";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">AUTHORITY TO LOAD</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-area="Filpride" asp-controller="AuthorityToLoad" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="paginatedTable">
            <thead>
            <tr class="text-nowrap table-secondary">
                <th>
                    ATL No
                </th>
                <th>
                    Date Booked
                </th>
                <th>
                    Valid Until
                </th>
                <th>
                    COS No
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.Remarks)
                </th>
                <th>Actions</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#paginatedTable').DataTable({
                "processing": true, // Enable processing indicator
                "serverSide": true, // Enable server-side processing
                "stateSave": true,
                "stateDuration": 86400,
                "ajax": {
                    "url": "@Url.Action("GetAuthorityToLoads", "AuthorityToLoad", new { area = "Filpride" })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    }
                },
                "columns": [
                    { "data": "authorityToLoadNo" },
                    {
                        "data": "dateBooked",
                        "render": function(data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                        }
                    },
                    {
                        "data": "validUntil",
                        "render": function(data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                        }
                    },
                    { "data": "customerOrderSlip.customerOrderSlipNo" },
                    { "data": "remarks" },
                    {
                        "data": "authorityToLoadId",
                        "orderable": false,
                        "render": function(data, type, row) {
                            let actions = `<div class="dropdown">
                                <button class="btn btn-light dropdown-toggle w-100" type="button" id="actionsDropdown_${data}" 
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                    Actions
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown_${data}">`;

                            // Add Print option
                            actions += `<li><a class="dropdown-item" href="@Url.Action("Print", "AuthorityToLoad", new { area = "Filpride" })/${data}">
                                Print</a></li>`;

                            // Add Update Valid Until option
                            actions += `<li><a class="dropdown-item" href="#" onclick="showUpdateValidUntil('${data}', '${row.validUntil}')"> Update Valid Until</a></li>`;

                            actions += `</ul></div>`;
                            return actions;
                        }
                    }
                ],
                "order": [[0, "asc"]],
                "pageLength": 10 // Default number of rows per page
            });
        });

        function showUpdateValidUntil(atlId, currentValidUntil) {
            const previousDate = new Date(currentValidUntil);
            const minDate = new Date(previousDate);
            minDate.setDate(minDate.getDate() + 1);

            const formattedDate = minDate.toISOString().split("T")[0];
            
            Swal.fire({
                title: 'Update Validity Date',
                html: `
            <div style="text-align: center; font-size: 16px; margin-bottom: 10px;">
                <label for="newValidUntil" style="display: block; margin-bottom: 5px; font-weight: bold;">Select Validity Date</label>
                <input type="date" id="newValidUntil" class="swal2-input" 
                       style="width: 70%; margin: 0 auto;" 
                       placeholder="Select Date" 
                       min="${formattedDate}" 
                       value="${formattedDate}">
                <small style="display: block; margin-top: 5px; color: gray;">Must not be earlier than <strong>${formattedDate}</strong></small>
            </div>`,
                confirmButtonText: 'Save Changes',
                confirmButtonColor: '#6C63FF',
                cancelButtonText: 'Cancel',
                cancelButtonColor: '#6C757D',
                showCancelButton: true,
                focusConfirm: false,
                preConfirm: () => {
                    const newValidUntil = document.getElementById('newValidUntil').value;
                    if (!newValidUntil) {
                        Swal.showValidationMessage('Please select a new validity date');
                        return false;
                    }
                    return newValidUntil;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const newValidUntil = result.value;
                    console.log(atlId)
                    updateValidUntil(atlId, newValidUntil);
                }
            });
        }


        function updateValidUntil(atlId, newValidUntil) {
            $.ajax({
                url: '@Url.Action("UpdateValidityDate", "AuthorityToLoad", new { area = "Filpride" })',
                type: 'POST',
                data: {
                    id: atlId,
                    newValidUntil: newValidUntil,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#paginatedTable').DataTable().ajax.reload();
                        Swal.fire('Success', 'Valid Until date updated successfully', 'success');
                    } else {
                        Swal.fire('Error', response.message || 'Error updating Valid Until date', 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', 'Error updating Valid Until date', 'error');
                }
            });
        }

    </script>
}