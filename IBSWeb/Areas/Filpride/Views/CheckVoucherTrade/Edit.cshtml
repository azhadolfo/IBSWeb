@model CheckVoucherTradeViewModel

@{
    ViewData["Title"] = "Check Voucher Trade Supplier/Purchase Payment - Edit";
}

<link rel="stylesheet" href="~/css/form-style.css">

<div class="loader-container">
    <div class="loader"></div>
    <div class="loader-text">Loading...</div>
</div>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">@ViewData["Title"]</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data" id="paymentForm">
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-md-4">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="CVId"/>
                    <input type="hidden" asp-for="AdvancesCVNo"/>
                    <div class="form-group mb-3">
                        <label asp-for="SupplierId" class="control-label"></label><span class="required">*</span>
                        <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 GetPOList supplier" style="width:100%">
                            <option></option>
                        </select>
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="Payee" type="text" class="form-control supplierName" placeholder="" />
                        <label asp-for="Payee" class="control-label"></label>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="" readonly />
                        <label asp-for="SupplierAddress" class="control-label"></label>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="" readonly />
                        <label asp-for="SupplierTinNo" class="control-label"></label>
                    </div>
                </div>
                <div class="col-8">
                    <div class="row mb-3 overflow-auto" style="max-height: 300px;">
                        <table >
                            <thead class="sticky-top bg-white">
                            <tr>
                                <th colspan="7" class="text-center py-4">RR LIST</th>
                            </tr>
                            <tr>
                                <th><input type="checkbox" id="selectAll" onclick="toggleSelectAll(this)"></th>
                                <th>PO No's</th>
                                <th>RR No's</th>
                                <th>IS RR No's</th>
                                <th class="text-end">Amount</th>
                                <th class="text-center">Amount Paid</th>
                                <th class="text-end">Balance</th>
                            </tr>
                            </thead>
                            <tbody class="rrAmount">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="POSeries" class="control-label">Suppliers PO No.</label>
                    <select asp-for="POSeries" asp-items="@Model.PONo" class="form-select js-multiple GetRRList" multiple="multiple" style="width:100%" required>
                        <option></option>
                    </select>
                    <span asp-validation-for="POSeries" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="OldCVNo" type="text" class="form-control" placeholder="" required/>
                    <span asp-validation-for="OldCVNo" class="text-danger"></span>
                    <label asp-for="OldCVNo" class="control-label mx-2">Old CV #<span class="required">*</span></label>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="TransactionDate" class="control-label"></label><span class="required">*</span>
                    <input asp-for="TransactionDate" type="Date" class="form-control" />
                    <span asp-validation-for="TransactionDate" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="BankId" class="control-label"></label><span class="required">*</span>
                    <select asp-for="BankId" asp-items="@Model.BankAccounts" class="form-select js-select2" id="bankAccounts" style="width:100%">
                        <option></option>
                    </select>
                    <span asp-validation-for="BankId" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="CheckNo" type="text" class="form-control" placeholder="" />
                    <span asp-validation-for="CheckNo" class="text-danger"></span>
                    <label asp-for="CheckNo" class="control-label mx-2">Check No<span class="required">*</span></label>
                </div>
                <div class="form-group mb-3">
                    <label asp-for="CheckDate" class="control-label"></label><span class="required">*</span>
                    <input asp-for="CheckDate" type="date" class="form-control" />
                    <span asp-validation-for="CheckDate" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Particulars" type="text" class="form-control" placeholder="" />
                    <span asp-validation-for="Particulars" class="text-danger"></span>
                    <label asp-for="Particulars" class="control-label mx-2">Particulars<span class="required">*</span></label>
                </div>
                <div class="form-group mb-3">
                    <label class="control-label">Upload File (Optional)</label>
                    <input name="file" type="file" class="form-control" />
                </div>
                <br />
                <div class="form-group">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Account No.</th>
                            <th>Account Title</th>
                            <th>
                                Debit
                            </th>
                            <th>
                                Credit
                            </th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody id="accountingEntriesBody">
                        <tr>
                            <td><input type="text" name="AccountNumber" value="202010100" class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="AccountTitle" value='AP-Trade Payable' class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="Debit" value='0.000' class="w-100 totalNetOfEWT" style='border:none' readonly /></td>
                            <td><input type='text' name="Credit" value='0.000' class="w-100" style='border:none' readonly /></td>
                            <td></td>
                        </tr>
                        <tr>
                            <td><input type="text" name="AccountNumber" value="101010100" class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="AccountTitle" value="Cash in Bank" class="w-100 accountTitle" style='border:none' readonly /></td>
                            <td><input type='text' name="Debit" value='0.000' class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="Credit" value="0.000" class="w-100 cib-credit" style='border:none' readonly /></td>
                            <td></td>
                        </tr>
                        <tr id="advancesRow" style="display: none;">
                            <td><input type="text" name="AccountNumber" value="101060100" class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="AccountTitle" value='Advances to Supplier' class="w-100" style='border:none' readonly /></td>
                            <td><input type='text' name="Debit" value='0.000' class="w-100" id="advancesDebit" style='border:none' readonly /></td>
                            <td><input type='text' name="Credit" value='0.000' class="w-100" id="advancesCredit" style='border:none' readonly /></td>
                            <td></td>
                        </tr>
                        </tbody>
                        <tbody>
                        <tr>
                            <td class="text-end" colspan="2">TOTAL:</td>
                            <td class="totalDebit">0.000</td>
                            <td class="totalCredit">0.000</td>
                            <td></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                <br />
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control">Save</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-area="Filpride" asp-controller="CheckVoucherTrade" asp-action="Index" class="btn btn-outline-primary border  form-control ">Back to List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#AccountNo').select2({
            dropdownParent: $('#AddAccEntry')
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".supplier").each(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });
            $(".supplier").change(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });
        });
        
        function computeDefaultEntry(suppId) {
            if (suppId !== "") {
                // Make an AJAX request to get the TaxType based on the selected SupplierId
                $.ajax({
                    url: "@Url.Action("GetSupplierDetails", "CheckVoucherTrade")",
                    method: "GET",
                    data: { supplierId: suppId },
                    success: function (data) {
                        if (data.address !== null || data.tinNo !== null) {
                            $("#SupplierAddress").val(data.address);
                            $("#SupplierTinNo").val(data.tinNo);
                            $(".supplierName").val(data.name);
                        } else {
                            $("#SupplierAddress").val("");
                            $("#SupplierTinNo").val("");
                            $(".supplierName").val("");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching TaxType:', error);
                    }
                });
            } else {
                $("#SupplierAddress").val("");
                $("#SupplierTinNo").val("");
                $(".supplierName").val("");
            }
        }
        

        $(function () {
            $(".GetPOList").change(function () {
                var suppId = $(this).val();
                if (suppId !== "") {
                    // Make an AJAX request to get the POs based on the selected SupplierId
                    $.ajax({
                        url: "@Url.Action("GetPOs", "CheckVoucherTrade")",
                        method: "GET",
                        data: { supplierId: suppId }, // Corrected parameter name
                        success: function (data) {
                            if (data) {
                                // Clear existing options
                                $("#POSeries").empty();
                                // Add new options based on the fetched data
                                $.each(data, function (index, po) {
                                    if (po && po.poNumber) { // Adjust property name to poNumber
                                        $('#POSeries').append('<option value="' + po.poNumber + '">' + po.poNumber + '</option>'); // Adjust property names
                                    } else {
                                        console.error("Invalid PO object:", po);
                                    }
                                });
                            } else {
                                // Clear the fields if no POs are found
                                $("#POSeries").empty();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching POs:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $("#POSeries").empty();
                }
            });
        });

        let cvId = @Html.Raw(Json.Serialize(Model.CVId));
        
        $(document).ready(function () {
            let poNumber = $(".GetRRList").val();
            displayRecords(poNumber, cvId)
            displayAdvances(poNumber);
        });

        $(".GetRRList").change(function () {
            let poNumber = $(this).val(); // Get all selected POIds
            displayRecords(poNumber, cvId);
            displayAdvances(poNumber);
        });

        function displayRecords(poNumber, cvId) {
            $.ajax({
                url: "@Url.Action("GetRRs", "CheckVoucherTrade")",
                method: "GET",
                data: { poNumber: poNumber, cvId: cvId  }, // Pass PO numbers to controller
                traditional: true, // Ensure jQuery sends the array properly
                success: function (data) {
                    const tbody = $('.rrAmount');
                    let totalGross = 0;
                    let totalAmountPaid = 0;
                    let totalBalance = 0;
                    let subTotalGross = 0;

                    tbody.empty();

                    if (data) {
                        let currentPO = null;
                        const modelRRs = new Map(
                            @Html.Raw(Json.Serialize(Model.RRs.Select(r => new { r.Id, r.Amount })))
                                .map(r => [r.id, r.amount])
                        );

                        data.forEach((rr, index) => {
                            currentPO = rr.purchaseOrderNo;
                            const isChecked = modelRRs.has(rr.id) ? 'checked' : '';
                            let display = modelRRs.has(rr.id) ? '' : 'display: none';
                            let inputamountClass = modelRRs.has(rr.id) ? 'inputAmount' : '';
                            const amountPaid = modelRRs.get(rr.id);
                            const tr = $(`
                                <tr data-po="${rr.purchaseOrderNo}">
                                    <td><input type="checkbox" value="${rr.id}" class="selectCheckbox" ${isChecked}></td>
                                    <td>${rr.purchaseOrderNo}</td>
                                    <td>${rr.receivingReportNo}</td>
                                    <td>${rr.oldRRNo}</td>
                                    <td class="text-end grossAmount">${formatNumber(rr.netOfEwtAmount)}</td>
                                    <td class="text-center"><input type="text" class="paymentAmount ${inputamountClass}" readonly style="${display}" value="${amountPaid}"></td>
                                    <td class="text-end balance">${formatNumber(parseNumber(rr.netOfEwtAmount) - parseNumber(rr.amountPaid))}</td>
                                </tr>
                            `);

                            subTotalGross += parseNumber(rr.netOfEwtAmount);
                            totalGross += parseNumber(rr.netOfEwtAmount);

                            tbody.append(tr);

                            // Append subtotal ONLY when last row of this PO group
                            if (index === data.length - 1 || data[index + 1].purchaseOrderNo !== currentPO) {
                                const subTotal = $(`
                                <tr class="fw-bold bg-light subtotalRow" data-po="${currentPO}">
                                    <td colspan="3"></td>
                                    <td class="fw-bold text-end">Subtotal (${rr.purchaseOrderNo}):</td>
                                    <td class="text-end subTotalGross">${formatNumber(subTotalGross)}</td>
                                    <td class="text-center subTotalAmountPaid">0.00</td>
                                    <td class="text-end subTotalBalance">0.00</td>
                                </tr>
                            `);
                                tbody.append(subTotal);
                                subTotalGross = 0;
                            }
                        });
                        reindexSelected();
                    }


                    // Append Grand Total Rows
                    const totalRow = $(`
                        <tr style="border-bottom:double;" class="sticky-lg-bottom">
                            <td colspan="7" class="pt-1"></td>
                        </tr>
                        <tr class="sticky-bottom bg-white">
                            <td colspan="3"></td>
                            <td class="fw-bold text-end p-2">Grand Total:</td>
                            <td class="text-end grandTotalGross" id="grandTotalRRAmount">${formatNumber(totalGross)}</td>
                            <td class="text-center grandTotalAmountPaid" id="grandTotalNetAmount">0.00</td>
                            <td class="text-end grandTotalBalance" id="grandTotalNetOfEWT">${formatNumber(totalBalance)}</td>
                        </tr>
                    `);
                    tbody.append(totalRow);
                    updateAmounts();
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching RRs:', error);
                }
            });
        }

        function displayAdvances(poNumber){
            // New addition: Check if any selected PO has COD or PREPAID terms
            if (poNumber && poNumber.length > 0) {
                $.ajax({
                    url: "@Url.Action("CheckPOPaymentTerms", "CheckVoucherTrade")",
                    method: "GET",
                    data: { poNumbers: poNumber },
                    traditional: true,
                    success: function(response) {
                        // If any PO has COD or PREPAID terms, show the Advances row
                        if (response.hasCodOrPrepaid) {
                            $("#advancesRow").show();
                            // Default values can be set based on what makes sense for your business logic
                            $("#advancesDebit").val(formatNumber(0));
                            $("#advancesCredit").val(formatNumber(response.advanceAmount || 0));
                            $("#AdvancesCVNo").val(response.advanceCVNo);
                            updateTotalDebitAndCredit();
                        } else {
                            $("#advancesRow").hide();
                            $("#advancesDebit").val("0.000");
                            $("#advancesCredit").val("0.000");
                            $("#AdvancesCVNo").val("");
                            updateTotalDebitAndCredit();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error checking PO payment terms:', error);
                        $("#advancesRow").hide();
                    }
                });
            } else {
                $("#advancesRow").hide();
            }
        }

        let selectedRecords = []; // Store selected records
        let allRecordsSelected = false;  // Flag to check if "Select All" is toggled

        function toggleSelectAll(selectAllCheckbox) {
            const isChecked = selectAllCheckbox.checked;

            $(".selectCheckbox").each(function () {
                if (isChecked && !this.checked) {
                    // Check unchecked ones only
                    $(this).prop("checked", true).trigger("change");
                } else if (!isChecked && this.checked) {
                    // Uncheck checked ones only
                    $(this).prop("checked", false).trigger("change");
                }
            });

            allRecordsSelected = isChecked;
        }

        $(document).on('change', '.selectCheckbox', function () {
            const row = $(this).closest('tr');
            const inputField = row.find('.paymentAmount');
            const balance = parseNumber(row.find('.balance').text().trim());
            const grossAmount = parseNumber(row.find('.grossAmount').text());

            if (this.checked) {
                if (!selectedRecords.includes(this.value)) {
                    selectedRecords.push(this.value); // ✅ push instead of add
                }
                inputField.val(balance).addClass("inputAmount").show();
                row.find('.balance').text(formatNumber(grossAmount - balance));
            } else {
                selectedRecords = selectedRecords.filter(v => v !== this.value); // ✅ filter instead of delete
                inputField.removeAttr("name").hide().val('');
                row.find('.selectCheckbox').removeAttr("name");
                row.find('.balance').text(formatNumber(grossAmount));
            }

            reindexSelected();
            updateAmounts();
        });

        function reindexSelected() {
            $(".selectCheckbox:checked").each(function (i) {
                const row = $(this).closest('tr');
                const inputField = row.find('.paymentAmount');

                $(this).attr("name", `RRs[${i}].Id`);
                inputField.attr("name", `RRs[${i}].Amount`);
            });
        }

        $(document).on('input', '.inputAmount', function () {
            updateAmounts();
        });

        function updateAmounts() {
            let totalNetOfEWT = 0;

            $(".subtotalRow").each(function () {
                const po = $(this).data("po");
                let amountInputs = document.querySelectorAll(`tr[data-po='${po}'] .inputAmount`);
                let subTotalAmountPaid = 0;

                amountInputs.forEach(function (input) {
                    let rawValue = input.value;
                    let rrAmount = parseNumber(rawValue);

                    totalNetOfEWT += rrAmount;
                    subTotalAmountPaid += rrAmount;
                });

                let subTotalGross = parseNumber($(this).find(".subTotalGross").text());
                $(this).find(".subTotalAmountPaid").text(formatNumber(subTotalAmountPaid));
                $(this).find(".subTotalBalance").text(formatNumber(Math.abs(subTotalGross - subTotalAmountPaid)));
            });

            $(".totalNetOfEWT").val(formatNumber(totalNetOfEWT));
            $(".grandTotalAmountPaid").text(formatNumber(totalNetOfEWT));
            let grandTotalGross = parseNumber($(".grandTotalGross").text());
            $(".grandTotalBalance").text(formatNumber(Math.abs(grandTotalGross - totalNetOfEWT)));

            // Check if advances row is visible
            var hasAdvances = $("#advancesRow").is(":visible");
            var advancesAmount = hasAdvances ? parseNumber($("#advancesCredit").val()) : 0;

            // Adjust the Cash in Bank (Credit) - deduct advances if present
            var cashInBankAmount = totalNetOfEWT;
            if (hasAdvances) {
                cashInBankAmount = totalNetOfEWT - advancesAmount;
                if (cashInBankAmount < 0) cashInBankAmount = 0; // Prevent negative values
            }

            // Update the Cash in Bank amount
            $(".cib-credit").val(formatNumber(cashInBankAmount));

            updateTotalDebitAndCredit();
            validateDebitAndCredit();
        }
        
        function updateTotalDebitAndCredit() {
            var totalDebit = 0;
            var totalCredit = 0;

            // Loop through each row in the table body and sum up the debit values
            $("#accountingEntriesBody tr, .defaultEntry tr").each(function () {
                var debitInput = $(this).find("td:eq(2) input").val();
                var creditInput = $(this).find("td:eq(3) input").val();
                // Ensure debitInput and creditInput are strings before using replace
                debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                creditInput = creditInput ? String(creditInput) : "";

                var debit = parseNumber(debitInput);
                var credit = parseNumber(creditInput);

                totalDebit += debit;
                totalCredit += credit;
            });

            // Display the total debit value
            $(".totalDebit").text(formatNumber(totalDebit));
            $(".totalCredit").text(formatNumber(totalCredit));
            $("#debit").val("0.000");
            $("#credit").val("0.000");
        }
    </script>
    <script>
        function validateDebitAndCredit() {
            var totalDebit = parseNumber($(".totalDebit").text());
            var totalCredit = parseNumber($(".totalCredit").text());
            var errorMessage = "";
            var isValid = true;

            if ($("#balance-error-message").length === 0) {
                $("#accountingEntriesBody").after('<div id="balance-error-message" class="text-danger mt-2"></div>');
            }

            if (totalDebit !== totalCredit) {
                errorMessage = "Debit and Credit totals must be equal.";
                isValid = false;
            } else if (totalDebit === 0 && totalCredit === 0) {
                errorMessage = "Debit and Credit cannot both be zero.";
                isValid = false;
            } else if (totalDebit === 0 || totalCredit === 0) {
                errorMessage = "Debit and Credit cannot be zero.";
                isValid = false;
            }

            // Display or clear the error message
            $("#balance-error-message").text(errorMessage);

            // Optionally disable/enable the submit button based on validation
            $("button[type='submit']").prop("disabled", !isValid);

            return isValid;
        }
    </script>
}
