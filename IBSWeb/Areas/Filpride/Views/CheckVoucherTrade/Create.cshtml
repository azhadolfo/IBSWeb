@model CheckVoucherTradeViewModel

@{
    ViewData["Title"] = "Create Trade";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Create Trade</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data">
            <div class="row">
                <div class="col-md-4">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group mb-3">
                        <label asp-for="SupplierId" class="control-label"></label><span class="required">*</span>
                        <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 GetPOList supplier" style="width:100%">
                            <option></option>
                        </select>
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="Payee" type="text" class="form-control supplierName" placeholder="" />
                        <label asp-for="Payee" class="control-label"></label>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="" readonly />
                        <label asp-for="SupplierAddress" class="control-label"></label>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="" readonly />
                        <label asp-for="SupplierTinNo" class="control-label"></label>
                    </div>
                </div>
                <div class="col-8">
                    <div class="row mb-3 overflow-auto" style="max-height: 300px;">
                        <table >
                            <thead class="sticky-top bg-white">
                            <tr>
                                <th colspan="7" class="text-center py-4">RR LIST</th>
                            </tr>
                            <tr>
                                <th><input type="checkbox" id="selectAll" onclick="toggleSelectAll(this)"></th>
                                <th>RR No's</th>
                                <th>Payment</th>
                                <th class="text-end">Gross</th>
                                <th class="text-end">Amount Paid</th>
                                <th class="text-end">Balance</th>
                            </tr>
                            </thead>
                            <tbody class="rrAmount">
                            </tbody>
                        </table>
                    </div>
                </div>
                    <div class="form-group mb-3">
                        <label asp-for="POSeries" class="control-label">Suppliers PO No.</label><span class="required">*</span>
                        <select asp-for="POSeries" asp-items="@Model.PONo" class="form-select js-multiple GetRRList" multiple="multiple" style="width:100%" required>
                            <option></option>
                        </select>
                        <span asp-validation-for="POSeries" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="TransactionDate" class="control-label"></label><span class="required">*</span>
                        <input asp-for="TransactionDate" type="Date" class="form-control" value="@DateTime.UtcNow.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="TransactionDate" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="BankId" class="control-label"></label><span class="required">*</span>
                        <select asp-for="BankId" asp-items="@Model.BankAccounts" class="form-select js-select2" id="bankAccounts" style="width:100%">
                            <option></option>
                        </select>
                        <span asp-validation-for="BankId" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="CheckNo" type="text" class="form-control" placeholder="" />
                        <span asp-validation-for="CheckNo" class="text-danger"></span>
                        <label asp-for="CheckNo" class="control-label mx-2">Check No<span class="required">*</span></label>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="CheckDate" class="control-label"></label><span class="required">*</span>
                        <input asp-for="CheckDate" type="date" value="@DateTime.UtcNow.ToString("yyyy-MM-dd")" class="form-control" />
                        <span asp-validation-for="CheckDate" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="Particulars" type="text" class="form-control" placeholder="" />
                        <span asp-validation-for="Particulars" class="text-danger"></span>
                        <label asp-for="Particulars" class="control-label mx-2">Particulars<span class="required">*</span></label>
                    </div>
                    <div class="form-group mb-3">
                        <label class="control-label">Upload File (Optional)</label>
                        <input name="file" type="file" class="form-control" />
                    </div>
                <br />
                <div class="form-group">
                    <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#AddAccEntry">
                        Add Entry
                    </button>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Account No.</th>
                                <th>Account Title</th>
                                <th>
                                    Debit
                                </th>
                                <th>
                                    Credit
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="accountingEntriesBody">
                            <tr>
                                <td><input type="text" name="AccountNumber" value="202010100" class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="AccountTitle" value='AP-Trade Payable' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Debit" value='0.000' class="w-100 apTradePayable" style='border:none' readonly /></td>
                                <td><input type='text' name="Credit" value='0.000' class="w-100" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr class="EWTCredit">
                                <td><input type="text" name="AccountNumber" value="201030210" class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="AccountTitle" value='Expanded Witholding Tax 1%' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Debit" value='0.000' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Credit" value='0.000' class="w-100 totalEWT" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td><input type="text" name="AccountNumber" value="101010100" class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="AccountTitle" value="Cash in Bank" class="w-100 accountTitle" style='border:none' readonly /></td>
                                <td><input type='text' name="Debit" value='0.000' class="w-100" style='border:none' readonly /></td>
                                <td><input type='text' name="Credit" value="0.000" class="w-100 totalNetOfEWT" style='border:none' readonly /></td>
                                <td></td>
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>
                                <td class="text-end" colspan="2">TOTAL:</td>
                                <td class="totalDebit">0.000</td>
                                <td class="totalCredit">0.000</td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <br />
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control" onclick="validateDebitAndCredit(event)">Create</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-area="Filpride" asp-controller="CheckVoucherTrade" asp-action="Index" class="btn btn-outline-primary border  form-control ">Back to List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="AddAccEntry" data-bs-backdrop="static" tabindex="-1" aria-labelledby="AddAccEntryLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="AddAccEntryLabel">Add Accounting Entry</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label class="control-label">Account No.</label>
                        <select asp-items="@Model.COA" class="form-select" style="width: 100%" id="AccountNo">
                            <option></option>
                        </select>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Debit</label>
                        <input id="debit" value="0.000" class="form-control moneyInput" placeholder="0.000" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group pt-4">
                        <label class="control-label">Credit</label>
                        <input id="credit" value="0.000" class="form-control moneyInput" placeholder="0.000" />
                        <span class="text-danger"></span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveAccountingEntry(event)">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#AccountNo').select2({
            dropdownParent: $('#AddAccEntry')
        });

        $(document).ready(function () {
            // Store the form submit state
            let isSubmitting = false;

            $('form').on('submit', function (e) {
                // If the form is already submitting, prevent additional submissions
                if (isSubmitting) {
                    e.preventDefault();
                    return;
                }

                // Get the submit button
                const submitButton = $(this).find('button[type="submit"]');

                // Set submitting state to true
                isSubmitting = true;

                // Disable the submit button and change text to show processing
                submitButton.prop('disabled', true)
                    .html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');
                
                setTimeout(function() {
                    submitButton.prop('disabled', false).html('Create');
                    isSubmitting = false;
                }, 3000);
            });

            // Optional: Reset form state when navigating away or if there's an error
            $(window).on('beforeunload', function() {
                isSubmitting = false;
                $('button[type="submit"]').prop('disabled', false).html('Create');
            });
        });
        
    </script>
    <script>
        function saveAccountingEntry(event) {
            // Get the values from the modal inputs
            var accountNumber = $("#AccountNo").val();
            var accountNumberText = $("#AccountNo option:selected").text().replace(/^\S+\s/, '');
            var debit = parseNumber($("#debit").val());
            var credit = parseNumber($("#credit").val());

            if (debit === 0 && credit === 0) {
                event.preventDefault();
                alert('Please input amount');
                return;
            } else if (accountNumberText === "") {
                event.preventDefault();
                alert('Please select Account No.!');
                return;
            }

            // Format debit and credit values with commas and two decimal places
            var formattedDebit = formatNumber(debit);
            var formattedCredit = formatNumber(credit);

            // Create a new row with the text only and a hidden input for the value
            var newRow = `<tr>
                                                            <td><input type='text' name='AccountNumber' value='${accountNumber}' style='border:none' class='w-100' readonly /></td>
                                                            <td><input type='text' name='AccountTitle' value='${accountNumberText}' style='border:none' class='w-100' readonly /></td>
                                                            <td><input name='Debit' id='debit_${accountNumber}' value='${formattedDebit}' style='border:none' class='w-100' readonly /></td>
                                                            <td><input name='Credit' id='credit_${accountNumber}' value='${formattedCredit}' style='border:none' class='w-100' readonly /></td>
                                                            <td><button type='button' class='btn btn-danger btn-sm' onclick='removeRow(this)'>Remove</button></td>
                                                        </tr>`;

            // Append the new row to the table body
            $("#accountingEntriesBody").append(newRow);

            // Close the modal
            $("#AddAccEntry").modal("hide");

            // Clear the modal inputs
            $("#AccountNo").val(""); // Reset the select to its default state
            $("#AccountNo").trigger("change"); // Trigger change event for the select
            $("#Debit").val("0.000");
            $("#Credit").val("0.000");

            updateTotalDebitAndCredit();
        }

        function updateTotalDebitAndCredit() {
            var totalDebit = 0;
            var totalCredit = 0;

            // Loop through each row in the table body and sum up the debit values
            $("#accountingEntriesBody tr, .defaultEntry tr").each(function () {
                var debitInput = $(this).find("td:eq(2) input").val();
                var creditInput = $(this).find("td:eq(3) input").val();
                // Ensure debitInput and creditInput are strings before using replace
                debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                creditInput = creditInput ? String(creditInput) : "";

                var debit = parseNumber(debitInput);
                var credit = parseNumber(creditInput);

                totalDebit += debit;
                totalCredit += credit;
            });

            // Display the total debit value
            $(".totalDebit").text(formatNumber(totalDebit));
            $(".totalCredit").text(formatNumber(totalCredit));
            $("#debit").val("0.000");
            $("#credit").val("0.000");
        }

        // Function to remove the corresponding row
        function removeRow(button) {
            // Get the reference to the button's parent row and remove it
            $(button).closest("tr").remove();
            updateTotalDebitAndCredit();
        }
    </script>
    <script>
        $(function () {
            $(".supplier").each(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });
            $(".supplier").change(function () {
                var suppId = $(this).val();
                computeDefaultEntry(suppId)
            });

            function computeDefaultEntry(suppId) {
                if (suppId !== "") {
                    // Make an AJAX request to get the TaxType based on the selected SupplierId
                    $.ajax({
                        url: "@Url.Action("GetSupplierDetails", "CheckVoucherTrade")",
                        method: "GET",
                        data: { supplierId: suppId },
                        success: function (data) {
                            if (data.address !== null || data.tinNo !== null) {
                                $("#SupplierAddress").val(data.address);
                                $("#SupplierTinNo").val(data.tinNo);
                                $(".supplierName").val(data.name);
                            } else {
                                $("#SupplierAddress").val("");
                                $("#SupplierTinNo").val("");
                                $(".supplierName").val("");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching TaxType:', error);
                        }
                    });
                } else {
                    $("#SupplierAddress").val("");
                    $("#SupplierTinNo").val("");
                    $(".supplierName").val("");
                }
            }
        });

        $(function () {
            $(".GetPOList").change(function () {
                var suppId = $(this).val();
                if (suppId !== "") {
                    // Make an AJAX request to get the POs based on the selected SupplierId
                    $.ajax({
                        url: "@Url.Action("GetPOs", "CheckVoucherTrade")",
                        method: "GET",
                        data: { supplierId: suppId }, // Corrected parameter name
                        success: function (data) {
                            if (data) {
                                // Clear existing options
                                $("#POSeries").empty();
                                // Add new options based on the fetched data
                                $.each(data, function (index, po) {
                                    if (po && po.poNumber) { // Adjust property name to poNumber
                                        $('#POSeries').append('<option value="' + po.poNumber + '">' + po.poNumber + '</option>'); // Adjust property names
                                    } else {
                                        console.error("Invalid PO object:", po);
                                    }
                                });
                            } else {
                                // Clear the fields if no POs are found
                                $("#POSeries").empty();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching POs:', error);
                        }
                    });
                } else {
                    // Clear the fields if no supplier is selected
                    $("#POSeries").empty();
                }
            });
        });

        $(function criteria() {
            var criteria; // Variable to store the selected criteria

            $(".GetRRList").change(function () {
                var poNumber = $(this).val(); // Get all selected POIds
                if (poNumber && poNumber.length > 0) {

                    if (!criteria) {
                        Swal.fire({
                            title: 'Choose Criteria',
                            text: 'Do you want to display records based on Due Date or Transaction Date?',
                            input: 'select',
                            inputOptions: {
                                'Due Date': 'Due Date',
                                'Transaction Date': 'Transaction Date'
                            },
                            inputPlaceholder: 'Select display criteria',
                            allowOutsideClick: false, // Prevent closing on outside click
                            allowEscapeKey: false,  // Prevent closing with Esc key
                            showCancelButton: true,
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                criteria = result.value; // Store the selected criteria
                                if (criteria) {
                                    displayRecords(poNumber, criteria); // Pass criteria and PO numbers to displayRecords function
                                } else {
                                    console.error('Invalid display criteria');
                                }
                            } else {
                                criteria();
                                console.log('User canceled');
                            }
                        });
                    } else {
                        if (poNumber && poNumber.length > 0) {
                            displayRecords(poNumber, criteria); // Pass PO number and criteria to displayRecords function
                        } else {
                            console.error('No PO number selected');
                        }
                    }
                } else {
                    // Clear the fields if no POs are selected
                    $("#RRSeries").empty();
                }
            });
        });

        function displayRecords(poNumber, criteria) {
            $.ajax({
                url: "@Url.Action("GetRRs", "CheckVoucherTrade")",
                method: "GET",
                data: { poNumber: poNumber, criteria: criteria }, // Pass PO numbers to controller
                traditional: true, // Ensure jQuery sends the array properly
                success: function (data) {
                    const tbody = $('.rrAmount');
                    let totalGross = 0;
                    let totalAmountPaid = 0;
                    let totalBalance = 0;
                    
                    tbody.empty();

                    data.forEach((rr, index) => {
                        let balance = parseNumber(rr.grossAmount) - parseNumber(rr.amountPaid);
                        const tr = $(`
                                        <tr>
                                            <td><input type="checkbox" value="${rr.id}" class="selectCheckbox"></td>
                                            <td>${rr.receivingReportNo}</td>
                                            <td><input type="text" class="paymentAmount" style="display: none"></td>
                                            <td class="text-end grossAmount">${formatNumber(rr.grossAmount)}</td>
                                            <td class="text-end">${formatNumber(rr.amountPaid)}</td>
                                            <td class="text-end">${formatNumber(balance)}</td>
                                        </tr>
                                    `);
                        tbody.append(tr);

                        totalGross += parseNumber(rr.grossAmount);
                        totalAmountPaid += parseNumber(rr.amountPaid);
                        totalBalance += balance;
                    });

                    // Append Grand Total Rows
                    const totalRow = $(`
                <tr style="border-bottom:double;" class="sticky-lg-bottom">
                    <td colspan="7" class="pt-1"></td>
                </tr>
                <tr class="sticky-bottom bg-white">
                    <td colspan="2"></td>
                    <td class="fw-bold text-end p-2">Grand Total:</td>
                    <td class="text-end" id="grandTotalRRAmount">${formatNumber(totalGross)}</td>
                    <td class="text-end" id="grandTotalNetAmount">${formatNumber(totalAmountPaid)}</td>
                    <td class="text-end" id="grandTotalNetOfEWT">${formatNumber(totalBalance)}</td>
                </tr>
            `);
                    tbody.append(totalRow);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching RRs:', error);
                }
            });
        }

        let selectedRecords = new Set(); // Store selected records
        let allRecordsSelected = false;  // Flag to check if "Select All" is toggled across all pages

        function toggleSelectAll(selectAllCheckbox) {
            const checkboxes = document.querySelectorAll('.selectCheckbox');
            const isChecked = selectAllCheckbox.checked;

            checkboxes.forEach((checkbox, index) => {
                const row = checkbox.closest('tr'); // Get the row

                if (isChecked) {
                    checkbox.checked = true;
                    selectedRecords.add(checkbox.value);

                    if (row) {
                        const inputField = $(row).find('.paymentAmount');
                        const grossAmount = $(row).find('.grossAmount').text().trim();

                        inputField.val(grossAmount).attr("name", `RRs[${index}].Amount`).addClass("inputAmount").show();
                        $(checkbox).attr("name", `RRs[${index}].Id`);
                        updateAmounts()
                    }
                } else {
                    checkbox.checked = false;
                    selectedRecords.delete(checkbox.value);

                    if (row) {
                        const inputField = $(row).find('.paymentAmount');
                        inputField.removeAttr("name").hide().val(''); // Hide and clear input
                        $(checkbox).removeAttr("name");
                        updateAmounts()
                    }
                }
            });

            allRecordsSelected = isChecked;
        }

        // Event listener to show/hide input field on checkbox toggle
        $(document).on('change', '.selectCheckbox', function () {
            const row = $(this).closest('tr');
            const inputField = row.find('.paymentAmount');
            const grossAmount = row.find('.grossAmount').text().trim();

            if (this.checked) {
                selectedRecords.add(this.value);
                inputField.val(grossAmount).attr("name", `RRs[${selectedRecords.size - 1}].Amount`).addClass("inputAmount").show();
                row.find('.selectCheckbox').attr("name", `RRs[${selectedRecords.size - 1}].Id`);
                updateAmounts()
            } else {
                selectedRecords.delete(this.value);
                inputField.removeAttr("name").hide().val('');
                row.find('.selectCheckbox').removeAttr("name");
                updateAmounts()
            }
        });

        $(document).on('input', '.inputAmount', function () {
            updateAmounts();
        });
        
        function updateAmounts() {
            var amountInputs = document.querySelectorAll('.inputAmount');
            var totalNetOfEWT = 0;
            var totalEWT = 0;
            var apTradePayable = 0;
            amountInputs.forEach(function (input) {
                var rawValue = input.value;
                var rrAmount = parseNumber(rawValue);
                var netOfVat = rrAmount / 1.12;
                var vat = netOfVat * 0.12;
                var ewt = netOfVat * 0.01;
                var rrAmountNetOfEWT = rrAmount - ewt;
                totalNetOfEWT += rrAmountNetOfEWT;
                totalEWT += ewt;
                apTradePayable += rrAmount;
            });
            $(".totalNetOfEWT").val(formatNumber(totalNetOfEWT));
            $(".totalEWT").val(formatNumber(totalEWT));
            $(".apTradePayable").val(formatNumber(apTradePayable));
            updateTotalDebitAndCredit();
        }
    
    </script>
    <script>
        function validateDebitAndCredit(event) {
            var totalDebit = parseNumber($(".totalDebit").text());
            var totalCredit = parseNumber($(".totalCredit").text());

            if (totalDebit !== totalCredit) {
                alert("Debit and Credit totals must be equal.");
                event.preventDefault(); // Prevent form submission
                return false;
            }

            if (totalDebit === 0 && totalCredit === 0) {
                alert("Debit and Credit cannot both be zero.");
                event.preventDefault(); // Prevent form submission
                return false;
            }

            if (totalDebit === 0 || totalCredit === 0) {
                alert("Debit and Credit cannot be zero.");
                event.preventDefault();
                return false;
            }

            return true; // Allow form submission
        }
    </script>
}
