@model IEnumerable<SalesReportViewModel>
@using IBS.Utility.Constants
@using IBS.Utility.Enums
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Sales Report";
    
    var totalQuantity = 0m;
    var totalFreight = 0m;
    var totalAmount = 0m;
    var totalVat = 0m;
    var totalSalesNetOfVat = 0m;
    var totalFreightNetOfVat = 0m;
    var totalCommissionRate = 0m;
    
    var totalQuantityForBiodiesel = 0m;
    var totalAmountForBiodiesel = 0m;

    var totalQuantityForEconogas = 0m;
    var totalAmountForEconogas = 0m;

    var totalQuantityForEnvirogas = 0m;
    var totalAmountForEnvirogas = 0m;
}
<style>
    .container {
        max-width: none;
    }

    .table-responsive {
        overflow-y: auto;
        max-height: 70vh;
    }

    table thead th {
        position: sticky;
        top: 0;
        z-index: 10;
        background: white;
    }

    @@media print {
        body * {
            visibility: hidden;
        }

        .print-header, .table-responsive, .table-responsive * {
            visibility: visible;
        }

        .print-header {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
        }

        .table-responsive {
            position: absolute;
            top: 0; /* Adjust this value based on your header's height */
            left: 0;
            width: 100%;
            height: auto;
            overflow: visible;
        }
    }
</style>

@if (Model.Any())
{
    <div class="table-responsive">
        <h5>SALES REPORT</h5>
        <h6>Date Range: @ViewData["DateFrom"] - @ViewData["DateTo"]</h6>
        <table id="ledgerTable" class="table">
            <thead>
            <tr class="table-primary text-center text-nowrap sticky-top">
                <th>Date Delivered</th>
                <th>Customer Name</th>
                <th>Segment</th>
                <th>Specialist</th>
                <th>SI No.</th>
                <th>COS #</th>
                <th>OTC COS #</th>
                <th>DR # </th>
                <th>OTC DR #</th>
                <th>PO #</th>
                <th>IS PO #</th>
                <th>Delivery Option</th>
                <th>Items</th>
                <th class="text-end">Quantity</th>
                <th class="text-end">Freight</th>
                <th class="text-end">Sales G. VAT</th>
                <th class="text-end">VAT</th>
                <th class="text-end">Sales N. VAT</th>
                <th class="text-end">Freight N. VAT</th>
                <th class="text-end">Commission</th>
                <th>Remarks</th>
            </tr>
            </thead>
            <tbody>

            @foreach (var viewModel in Model)
            {
                var quantity = viewModel.DeliveryReceipt.Quantity;
                var freight = (viewModel.DeliveryReceipt?.Freight ?? 0) * quantity;
                var freightNetOfVat = freight / 1.12m;
                var salesNetOfVat = viewModel.DeliveryReceipt.TotalAmount != 0 ? viewModel.DeliveryReceipt.TotalAmount / 1.12m : 0;
                var vat = salesNetOfVat * .12m;
                    
                <tr class="align-text-bottom">
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.DeliveredDate)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.Customer.CustomerName)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.Customer.CustomerType)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.CustomerOrderSlip.AccountSpecialist)</td>
                    <td>@Html.DisplayFor(model => viewModel.SalesInvoiceNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.CustomerOrderSlip.CustomerOrderSlipNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.CustomerOrderSlip.OldCosNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.DeliveryReceiptNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.ManualDrNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.PurchaseOrder.PurchaseOrderNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.PurchaseOrder.OldPoNo)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.CustomerOrderSlip.DeliveryOption)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.CustomerOrderSlip.Product.ProductName)</td>
                    <td class="text-end">@quantity.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@freight.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@viewModel.DeliveryReceipt.TotalAmount.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@vat.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@salesNetOfVat.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@freightNetOfVat.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@viewModel.DeliveryReceipt.CustomerOrderSlip.CommissionRate.ToString(SD.Four_Decimal_Format)</td>
                    <td>@Html.DisplayFor(model => viewModel.DeliveryReceipt.Remarks)</td>
                </tr>

                totalQuantity += viewModel.DeliveryReceipt.Quantity;
                totalFreight += freight;
                totalAmount += viewModel.DeliveryReceipt.TotalAmount;
                totalVat += vat;
                totalSalesNetOfVat += salesNetOfVat;
                totalFreightNetOfVat += freightNetOfVat;
                totalCommissionRate += viewModel.DeliveryReceipt.CustomerOrderSlip?.CommissionRate ?? 0;
            }
            <tr class="table-primary" style="border-top: double">
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="text-center"><b>TOTAL:</b></td>
                <td class="text-end">@totalQuantity.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalFreight.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalAmount.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalVat.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalSalesNetOfVat.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalFreightNetOfVat.ToString(SD.Two_Decimal_Format)</td>
                <td class="text-end">@totalCommissionRate.ToString(SD.Four_Decimal_Format)</td>
                <td></td>
            </tr>
            </tbody>
        </table>
    </div>
    
    // table for summary
    <div class="row mt-5">
        <h5>SUMMARY</h5>
        <div class="col">
            <table id="ledgerTable" class="table">
                <thead>
                <tr class="table-primary text-center">
                    <th colspan="4">Diesel</th>
                </tr>
                </thead>
                <thead>
                <tr class="table-primary text-center">
                    <th>Segment</th>
                    <th class="text-end">Volume</th>
                    <th class="text-end">Sales N. VAT</th>
                    <th class="text-end">Ave. SP</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var customerType in Enum.GetValues<CustomerType>())
                {
                    var list = Model.Where(s => s.DeliveryReceipt.Customer?.CustomerType == customerType.ToString()).ToList();
                    var listForBiodiesel = list.Where(s => s.DeliveryReceipt.CustomerOrderSlip.Product?.ProductName == "BIODIESEL").ToList();

                    // Computation for Biodiesel
                    var biodieselQuantitySum = listForBiodiesel.Sum(s => s.DeliveryReceipt.Quantity);
                    var biodieselAmountSum = listForBiodiesel.Sum(s => s.DeliveryReceipt.TotalAmount);
                    var biodieselNetOfAmountSum = biodieselAmountSum != 0m ? biodieselAmountSum / 1.12m : 0;
                    var biodieselAverageSellingPrice = biodieselNetOfAmountSum != 0m || biodieselQuantitySum != 0m ? biodieselNetOfAmountSum / biodieselQuantitySum : 0m;
                    <tr class="align-text-bottom">
                        <td>@customerType.ToString()</td>
                        <td class="text-end">@biodieselQuantitySum.ToString(SD.Two_Decimal_Format)</td>
                        <td class="text-end">@biodieselNetOfAmountSum.ToString(SD.Two_Decimal_Format)</td>
                        <td class="text-end">@biodieselAverageSellingPrice.ToString(SD.Four_Decimal_Format)</td>
                    </tr>

                    totalQuantityForBiodiesel += biodieselQuantitySum;
                    totalAmountForBiodiesel += biodieselNetOfAmountSum;
                }
                <tr class="table-primary" style="border-top: double">
                    <td class="text-center"><b>TOTAL:</b></td>
                    <td class="text-end">@totalQuantityForBiodiesel.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@totalAmountForBiodiesel.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@(totalAmountForBiodiesel != 0 || totalQuantityForBiodiesel != 0 ? (totalAmountForBiodiesel / totalQuantityForBiodiesel).ToString(SD.Four_Decimal_Format) : 0m)</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="col">
            <table id="ledgerTable" class="table">
                <thead>
                <tr class="table-primary text-center">
                    <th colspan="4">Econo</th>
                </tr>
                </thead>
                <thead>
                <tr class="table-primary text-center">
                    <th colspan="2" class="text-end">Volume</th>
                    <th class="text-end">Sales N. VAT</th>
                    <th class="text-end">Ave. SP</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var customerType in Enum.GetValues<CustomerType>())
                {
                    var list = Model.Where(s => s.DeliveryReceipt.Customer?.CustomerType == customerType.ToString()).ToList();
                    var listForEconogas = list.Where(s => s.DeliveryReceipt.CustomerOrderSlip.Product?.ProductName == "ECONOGAS").ToList();

                    // Computation for Econogas
                    var econogasQuantitySum = listForEconogas.Sum(s => s.DeliveryReceipt.Quantity);
                    var econogasAmountSum = listForEconogas.Sum(s => s.DeliveryReceipt.TotalAmount);
                    var econogasNetOfAmountSum = econogasAmountSum != 0m ? econogasAmountSum / 1.12m : 0;
                    var econogasAverageSellingPrice = econogasNetOfAmountSum != 0m || econogasQuantitySum != 0m ? econogasNetOfAmountSum / econogasQuantitySum : 0m;
                    <tr class="align-text-bottom text-end">
                        <td></td>
                        <td>@econogasQuantitySum.ToString(SD.Two_Decimal_Format)</td>
                        <td>@econogasAmountSum.ToString(SD.Two_Decimal_Format)</td>
                        <td>@econogasAverageSellingPrice.ToString(SD.Four_Decimal_Format)</td>
                    </tr>

                    totalQuantityForEconogas += econogasQuantitySum;
                    totalAmountForEconogas += econogasNetOfAmountSum;
                }
                <tr class="table-primary" style="border-top: double">
                    <td class="text-center"><b>TOTAL:</b></td>
                    <td class="text-end">@totalQuantityForEconogas.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@totalAmountForEconogas.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@(totalAmountForEconogas != 0 || totalQuantityForEconogas != 0 ? (totalAmountForEconogas / totalQuantityForEconogas).ToString(SD.Four_Decimal_Format) : 0m)</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="col">
            <table id="ledgerTable" class="table">
                <thead>
                <tr class="table-primary text-center">
                    <th colspan="4">Enviro</th>
                </tr>
                </thead>
                <thead>
                <tr class="table-primary text-center">
                    <th colspan="2" class="text-end">Volume</th>
                    <th class="text-end">Sales N. VAT</th>
                    <th class="text-end">Ave. SP</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var customerType in Enum.GetValues<CustomerType>())
                {
                    var list = Model.Where(s => s.DeliveryReceipt.Customer?.CustomerType == customerType.ToString()).ToList();
                    var listForEnvirogas = list.Where(s => s.DeliveryReceipt.CustomerOrderSlip.Product?.ProductName == "ENVIROGAS").ToList();

                    // Computation for Envirogas
                    var envirogasQuantitySum = listForEnvirogas.Sum(s => s.DeliveryReceipt.Quantity);
                    var envirogasAmountSum = listForEnvirogas.Sum(s => s.DeliveryReceipt.TotalAmount);
                    var envirogasNetOfAmountSum = envirogasAmountSum != 0m ? envirogasAmountSum / 1.12m : 0;
                    var envirogasAverageSellingPrice = envirogasNetOfAmountSum != 0m || envirogasQuantitySum != 0m ? envirogasNetOfAmountSum / envirogasQuantitySum : 0m;
                    <tr class="align-text-bottom text-end">
                        <td></td>
                        <td>@envirogasQuantitySum.ToString(SD.Two_Decimal_Format)</td>
                        <td>@envirogasAmountSum.ToString(SD.Two_Decimal_Format)</td>
                        <td>@envirogasAverageSellingPrice.ToString(SD.Four_Decimal_Format)</td>
                    </tr>

                    totalQuantityForEnvirogas += envirogasQuantitySum;
                    totalAmountForEnvirogas += envirogasNetOfAmountSum;
                }
                <tr class="table-primary" style="border-top: double">
                    <td class="text-center"><b>TOTAL:</b></td>
                    <td class="text-end">@totalQuantityForEnvirogas.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@totalAmountForEnvirogas.ToString(SD.Two_Decimal_Format)</td>
                    <td class="text-end">@(totalAmountForEnvirogas != 0 || totalQuantityForEnvirogas != 0 ? (totalAmountForEnvirogas / totalQuantityForEnvirogas).ToString(SD.Four_Decimal_Format) : 0m)</td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <p><i>No data available in report.</i></p>
}

<div class="row mt-5">
    <div class="col-6 col-md-3">
        <a onclick="printTable()" class="btn btn-primary form-control buttons">Print</a>
    </div>
    <div class="col-6 col-md-3">
        <a asp-area="Filpride" asp-controller="Report" asp-action="SalesReport" class="btn btn-outline-primary border form-control buttons">Back</a>
    </div>
</div>
@section Scripts {
    <script>
        function printTable() {
            window.print();
        }
    </script>
}