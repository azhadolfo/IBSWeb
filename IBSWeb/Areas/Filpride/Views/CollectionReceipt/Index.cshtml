@model IEnumerable<FilprideCollectionReceipt>
@using IBS.Utility.Enums
@{
    ViewData["Title"] = "Collection Receipt for Sales Invoice";
    var model = new FilprideCollectionReceipt();
}

<link rel="stylesheet" href="~/css/index-style.css">

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">@ViewData["Title"]</h2>
        <div class="d-flex gap-2">
            <a asp-area="Filpride" asp-controller="CollectionReceipt" asp-action="SingleCollectionCreateForSales"
               class="btn btn-light d-flex align-items-center gap-2">
                <i class="bi bi-plus-circle"></i> Single Invoice
            </a>
            <a asp-area="Filpride" asp-controller="CollectionReceipt" asp-action="MultipleCollectionCreateForSales"
               class="btn btn-light d-flex align-items-center gap-2">
                <i class="bi bi-plus-circle"></i> Multiple Invoice
            </a>
        </div>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">CR#</th>
                        <th class="text-start">Date</th>
                        <th class="text-start">Invoice#</th>
                        <th class="text-start">Customer</th>
                        <th class="text-start">Total</th>
                        <th class="text-start">Created By</th>
                        <th class="text-start">Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        async function addDepositInfo(collectionReceiptId) {
            // Fetch banks
            const response = await fetch('@Url.Action("GetBanks", "CollectionReceipt", new { area = "Filpride" })');
            const banks = await response.json();

            // Build <option>s
            let bankOptions = '<option value="">Select a bank</option>' + banks.map(b => `<option value="${b.value}">${b.text}</option>`).join('');
            let bankSelect = `<select id="swal-input2" class="swal2-select w-75" style="width: 75%;">${bankOptions}</select>`;

            // Convert ViewBag.MinDate to JavaScript date string format
            let minDate = new Date('@(ViewBag.MinDate?.ToString("yyyy-MM-dd") ?? "1900-01-01")').toISOString().split('T')[0];

            // Today's date
            let today = new Date().toISOString().split('T')[0];

            Swal.fire({
                title: 'Enter Deposit Info',
                html:
                    `<input id="swal-input1" type="date" value="${today}" min="${minDate}" class="swal2-input w-75">` +
                    bankSelect,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Next',
                didOpen: () => {
                    // Initialize Select2 after the modal opens
                    $('#swal-input2').select2({
                        dropdownParent: $('.swal2-container'),
                        width: '75%',
                        placeholder: 'Select a bank'
                    });
                },
                preConfirm: () => {
                    const depositDate = document.getElementById('swal-input1').value;
                    const bankId = $('#swal-input2').val(); // Use jQuery to get Select2 value

                    let selectedDate = new Date(depositDate);
                    let minDateObj = new Date(minDate);

                    if (!depositDate || !bankId) {
                        Swal.showValidationMessage('Both Deposit Date and Bank are required');
                        return false;
                    }

                    if (selectedDate < minDateObj) {
                        Swal.showValidationMessage(`The selected date cannot be before ${minDateObj.toLocaleDateString()}.`);
                        return false;
                    }

                    return { depositDate, bankId };
                },
                willClose: () => {
                    // Destroy Select2 when closing to prevent memory leaks
                    if ($('#swal-input2').data('select2')) {
                        $('#swal-input2').select2('destroy');
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const { depositDate, bankId } = result.value;

                    // Get the bank name (text) for display
                    const bankName = banks.find(b => b.value == bankId)?.text || "Unknown Bank";

                    // Now ask for confirmation before redirect
                    Swal.fire({
                        title: 'Confirm Deposit',
                        html: `
                    <p><b>Deposit Date:</b> ${depositDate}</p>
                    <p><b>Bank:</b> ${bankName}</p>
                `,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Confirm'
                    }).then((confirmResult) => {
                        if (confirmResult.isConfirmed) {
                            window.location.href = `@Url.Action("Deposit", "CollectionReceipt", new { area = "Filpride" })/${collectionReceiptId}?depositDate=${encodeURIComponent(depositDate)}&bankId=${encodeURIComponent(bankId)}`;
                        }
                    });
                }
            });
        }
    </script>

    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "CollectionReceipt", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "CollectionReceipt", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        async function redeposit(collectionReceiptId) {
            // Convert ViewBag.MinDate to JavaScript date string format
            let minDate = new Date('@(ViewBag.MinDate?.ToString("yyyy-MM-dd") ?? "1900-01-01")').toISOString().split('T')[0];

            // Today's date
            let today = new Date().toISOString().split('T')[0];

            Swal.fire({
                title: 'Enter Deposit Date',
                html:
                    `<input id="swal-input1" type="date" value="${today}" min="${minDate}" class="swal2-input w-75">`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Next',
                preConfirm: () => {
                    const depositDate = document.getElementById('swal-input1').value;
                    let selectedDate = new Date(depositDate);
                    let minDateObj = new Date(minDate);

                    if (!depositDate) {
                        Swal.showValidationMessage('Deposit Date is required');
                        return false;
                    }

                    if (selectedDate < minDateObj) {
                        Swal.showValidationMessage(`The selected date cannot be before ${minDateObj.toLocaleDateString()}.`);
                        return false;
                    }

                    return depositDate;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    let depositDate = result.value;

                    // Now ask for confirmation before redirect
                    Swal.fire({
                        title: 'Confirm Redeposit',
                        html: `
                    <p><b>Deposit Date:</b> ${depositDate}</p>
                `,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Confirm'
                    }).then((confirmResult) => {
                        if (confirmResult.isConfirmed) {
                            window.location.href = `@Url.Action("Redeposit", "CollectionReceipt", new { area = "Filpride" })/${collectionReceiptId}?redepositDate=${encodeURIComponent(depositDate)}`;
                        }
                    });
                }
            });
        }
    </script>
    <script>
        function returnCheck(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Return", "CollectionReceipt", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        async function applyClearingDate(collectionReceiptId) {
            // Convert ViewBag.MinDate to JavaScript date string format
            let minDate = new Date('@(ViewBag.MinDate?.ToString("yyyy-MM-dd") ?? "1900-01-01")').toISOString().split('T')[0];

            // Today's date
            let today = new Date().toISOString().split('T')[0];

            Swal.fire({
                title: 'Enter Clearing Date',
                html:
                    `<input id="swal-input1" type="date" value="${today}" min="${minDate}" class="swal2-input w-75">`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Next',
                preConfirm: () => {
                    const clearingDate = document.getElementById('swal-input1').value;
                    let selectedDate = new Date(clearingDate);
                    let minDateObj = new Date(minDate);

                    if (!clearingDate) {
                        Swal.showValidationMessage('Deposit Date is required');
                        return false;
                    }

                    if (selectedDate < minDateObj) {
                        Swal.showValidationMessage(`The selected date cannot be before ${minDateObj.toLocaleDateString()}.`);
                        return false;
                    }

                    return clearingDate;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    let clearingDate = result.value;

                    // Now ask for confirmation before redirect
                    Swal.fire({
                        title: 'Apply Clearing Date',
                        html: `
                    <p><b>Cleared Date:</b> ${clearingDate}</p>
                `,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Confirm'
                    }).then((confirmResult) => {
                        if (confirmResult.isConfirmed) {
                            window.location.href = `@Url.Action("ApplyClearingDate", "CollectionReceipt", new { area = "Filpride" })/${collectionReceiptId}?clearingDate=${encodeURIComponent(clearingDate)}`;
                        }
                    });
                }
            });
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#paginatedTable').DataTable({
                "processing": true,
                "serverSide": true,
                "stateSave": true,
                "stateDuration": 86400,
                "language": {
                    "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
                },
                "ajax": {
                    "url": "@Url.Action("GetCollectionReceipts", "CollectionReceipt", new { area = "Filpride" })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                            invoiceType: "Sales"
                        });
                    },
                    "error": function (xhr, error, thrown) {
                        console.error('DataTables error:', error);
                        alert('An error occurred while loading the data');
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#paginatedTable').addClass('table-loading');
                },
                "drawCallback": function(settings) {
                    $('#paginatedTable').removeClass('table-loading');

                    // Initialize all tooltips
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                "columns": [
                    { "data": "collectionReceiptNo" },
                    {
                        "data": "transactionDate",
                        "name": "transactionDate",
                        "render": function (data, type, row) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit'
                            });
                        }
                    },
                    {
                        "data": "collectionReceiptId",
                        "render": function (data, type, row) {
                            if (row.salesInvoiceId != null) {
                                return row.siNo;
                            } else if (row.multipleSIId != null && Array.isArray(row.multipleSIId)) {
                                return row.multipleSI.map(function (si) {
                                    return si;
                                }).join(", "); // Concatenate multiple siNo values with a comma
                            } else {
                                return row.svNo;
                            }
                        }
                    },
                    { "data": "customer.customerName" },
                    {
                        "data": "total",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    { "data": "createdBy" },
                    {
                        "data": "status",
                        "render": function(data, type, row) {
                            var statusClass = row.status === "@nameof(CollectionReceiptStatus.Posted)" 
                            || row.status === "@nameof(CollectionReceiptStatus.Deposited)"
                            || row.status === "@nameof(CollectionReceiptStatus.Redeposited)"    
                                ? "bg-info" 
                                : row.status === "@nameof(CollectionReceiptStatus.Cleared)" 
                                    ? "bg-success" 
                                    : row.status === "@nameof(CollectionReceiptStatus.Voided)"
                                    || row.status === "@nameof(CollectionReceiptStatus.Returned)" 
                                        ? "bg-danger" 
                                        : row.status === "@nameof(CollectionReceiptStatus.Canceled)" 
                                            ? "bg-warning" 
                                            : "";

                            return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                        }
                    },
                    {
                        "data": null,
                        "orderable": false,
                        "render": function (data, type, row) {
                            let dropdownHtml = `
                                    <div class="dropdown actions-dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                        <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                                        type="button" 
                                                        data-bs-toggle="dropdown" 
                                                        aria-expanded="false">
                                                    <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                            if (row.postedBy == null) {
                                if (row.multipleSIId != null) {
                                    dropdownHtml += `
                                        <li><a href="@Url.Action("MultipleCollectionEdit", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Edit</a></li>
                                        <li><a href="@Url.Action("MultipleCollectionPrint", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Preview</a></li>`;
                                } else {
                                    dropdownHtml += `
                                        <li><a href="@Url.Action("EditForSales", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Edit</a></li>
                                        <li><a href="@Url.Action("Print", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Preview</a></li>`;
                                }
                                dropdownHtml += `<li><a class="dropdown-item" onclick="confirmCancel(${row.collectionReceiptId})">Cancel</a></li>`;
                            } else {

                                const hasDeposit = row.depositedDate && row.depositedDate !== "";
                                const postedStatus = "@nameof(CollectionReceiptStatus.Posted)";
                                const returnedStatus = "@nameof(CollectionReceiptStatus.Returned)";
                                
                                if (!hasDeposit && row.status === postedStatus) {
                                    dropdownHtml += `<li><a class="dropdown-item" href="javascript:void(0);" onclick="addDepositInfo(${row.collectionReceiptId})">Add Deposit Info</a></li>`;
                                } else if (!hasDeposit && row.status === returnedStatus) {
                                    dropdownHtml += `<li><a class="dropdown-item" href="javascript:void(0);" onclick="redeposit(${row.collectionReceiptId})">Redeposit</a></li>`;
                                } else if (hasDeposit && row.status !== returnedStatus) {
                                    dropdownHtml += `<li><a class="dropdown-item" href="javascript:void(0);" onclick="applyClearingDate(${row.collectionReceiptId})">Apply Clearing Date</a></li>`;
                                } else{
                                    dropdownHtml += `<li><a class="dropdown-item" href="javascript:void(0);" onclick="returnCheck(${row.collectionReceiptId})">Return Check</a></li>`;
                                }
                                
                                if (row.multipleSIId != null) {
                                    dropdownHtml += `<li><a href="@Url.Action("MultipleCollectionPrint", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Preview</a></li>`;
                                } else {
                                    dropdownHtml += `<li><a href="@Url.Action("Print", "CollectionReceipt", new { area = "Filpride" })/${row.collectionReceiptId}" class="dropdown-item">Preview</a></li>`;
                                }
                                
                                dropdownHtml += `<li><a class="dropdown-item" onclick="confirmVoid(${row.collectionReceiptId})">Void</a></li>`;
                            }

                            dropdownHtml += `</ul></div>`;
                            return dropdownHtml;
                        }
                    }

                ]
            });
        });

    </script>
}