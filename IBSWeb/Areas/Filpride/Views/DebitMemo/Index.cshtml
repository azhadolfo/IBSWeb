@model IEnumerable<FilprideDebitMemo>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Debit Memo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">DEBIT MEMO</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-area="Filpride" asp-controller="DebitMemo" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="paginatedTable">
            <thead>
                <tr class="text-nowrap table-secondary">
                    <th>
                        @Html.DisplayNameFor(model => model.DebitMemoNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TransactionDate)
                    </th>
                    <th>
                        Invoice No.
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Source)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DebitAmount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedBy)
                    </th>
                    <th>
                        Status
                    </th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>
@section Scripts {
    <script>
        function confirmVoid(id) {
            console.log(id);
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "DebitMemo", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            console.log(id);
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "DebitMemo", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
    $(document).ready(function() {
        $('#paginatedTable').DataTable({
            "processing": true, // Enable processing indicator
            "serverSide": true, // Enable server-side processing
            "stateSave" : true,
            "ajax": {
                "url": "@Url.Action("GetDebitMemos", "DebitMemo", new { area = "Filpride" })",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    });
                },
            },
            "columns": [
                { "data": "debitMemoNo" },
                {
                    "data": "transactionDate",
                    "name": "transactionDate",
                    "render": function (data, type, row) {
                        // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                        var date = new Date(data);
                        return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
                    }
                },
                {
                    "data": null,
                    "render": function (data, type, row) {
                        if (row.salesInvoiceId) {
                            return row.salesInvoice.salesInvoiceNo
                        }
                        else {
                            return row.serviceInvoice.serviceInvoiceNo
                        }
                    }
                },
                { "data": "source" },
                { "data": "debitAmount", "render": $.fn.dataTable.render.number(',', '.', 4) },
                { "data": "createdBy" },
                {
                    "data": null,
                    "render": function(data, type, row) {
                        var status = row.postedBy != null && row.voidedBy == null && row.canceledBy == null ? "Posted" :
                            row.voidedBy != null ? "Voided" :
                            row.canceledBy != null ? "Cancelled" : "Pending";

                        var statusClass = status == "Posted" ? "bg-info" :
                                          status == "Voided" ? "bg-danger" :
                                          status == "Cancelled" ? "bg-warning" : "";

                        return `<span class="badge rounded-pill ${statusClass}">${status}</span>`;
                    }
                },
                {
                    "data": "debitMemoId",
                    "render": function (data, type, row) {
                        var dropdown = `<div class="dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                            <button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                Actions
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="actionsDropdown">
                                                ${row.postedBy == null ? `
                                                    <li><a class="dropdown-item" href="@Url.Action("Edit", "DebitMemo", new { area = "Filpride" })/${data}">Edit</a></li>
                                                    <li><a class="dropdown-item" href="@Url.Action("Print", "DebitMemo", new { area = "Filpride" })/${data}">Preview</a></li>
                                                    <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmCancel(${data})">Cancel</a></li>
                                                ` : `
                                                    <li><a class="dropdown-item" href="@Url.Action("Print", "DebitMemo", new { area = "Filpride" })/${data}">Print</a></li>
                                                    ${row.amountPaid == 0 ? `
                                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmVoid(${data})">Void</a></li>
                                                    ` : `
                                                        <li><button class="dropdown-item" disabled readonly>Void</button></li>
                                                    `}
                                                `}
                                            </ul>
                                        </div>`;
                        return dropdown;
                    }
                }
            ],
            "order": [[0, "asc"]], // Default sort by TransactionDate
            "pageLength": 10 // Default number of rows per page
        });
    });
    </script>
}