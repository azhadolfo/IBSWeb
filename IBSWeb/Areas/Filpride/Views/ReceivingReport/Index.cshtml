@model IEnumerable<FilprideReceivingReport>
@using IBS.Utility.Enums
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Receiving Report";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .container {
        max-width: 100% !important;
        width: 100% !important;
    }

    /* Custom styles for professional look */
    .table th {
        font-weight: 600;
        color: #374151;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.025em;
    }

    .table tbody tr {
        transition: all 0.2s;
    }

    .table tbody tr:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .table-loading {
        position: relative;
        opacity: 0.6;
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.8em;
        font-size: 0.75rem;
    }

    .actions-dropdown .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }

    .actions-dropdown .dropdown-item:hover {
        background-color: #f3f4f6;
    }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">Receiving Report</h2>
    </div>

    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">RR#</th>
                        <th class="text-start">Date</th>
                        <th class="text-start">PO#</th>
                        <th class="text-start">IS PO#</th>
                        <th class="text-start">IS RR#</th>
                        <th class="text-start">DR#</th>
                        <th class="text-start">Customer</th>
                        <th class="text-start">Product</th>
                        <th class="text-start">Quantity</th>
                        <th class="text-start">Created By</th>
                        <th class="text-start" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "ReceivingReport", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "ReceivingReport", new { area = "Filpride" })?id=${id}&cancellationRemarks=${encodedRemarks}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        $(document).ready(function() {
            $('#paginatedTable').DataTable({
                "processing": true, // Enable processing indicator
                "serverSide": true, // Enable server-side processing
                "stateSave" : true,
                "stateDuration": 86400,
                "language": {
                    "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
                },
                "ajax": {
                    "url": "@Url.Action("GetReceivingReports", "ReceivingReport", new { area = "Filpride" })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    "error": function (xhr, error, thrown) {
                        console.error('DataTables error:', error);
                        alert('An error occurred while loading the data');
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#paginatedTable').addClass('table-loading');
                },
                "drawCallback": function(settings) {
                    $('#paginatedTable').removeClass('table-loading');

                    // Initialize all tooltips
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                "columns": [
                    { "data": "receivingReportNo" },
                    {
                        "data": "date",
                        "name": "date",
                        "render": function (data, type, row) {
                            // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { 
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit' 
                            });
                        }
                    },
                    { "data": "purchaseOrder.purchaseOrderNo" },
                    { "data": "purchaseOrder.oldPoNo" },
                    { "data": "oldRRNo" },
                    { 
                        "data": "deliveryReceiptId",
                        "render" : function (data, type, row){
                            return row.deliveryReceipt ? row.deliveryReceipt.deliveryReceiptNo : "" ;
                        }
                    },
                    {
                        "data": "deliveryReceiptId",
                        "render" : function (data, type, row){
                            return row.deliveryReceipt ? row.deliveryReceipt.customer.customerName : "" ;
                        }
                    },
                    { "data": "purchaseOrder.product.productName" },
                    {
                        "data": "quantityReceived",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    { "data": "createdBy" },
                    {
                        "data": "status",
                        "render": function(data, type, row) {
                            var statusClass = row.status == "@nameof(Status.Posted)" ? "bg-info" :
                                              row.status == "@nameof(Status.Voided)"  ? "bg-danger" :
                                              row.status == "@nameof(Status.Canceled)" ? "bg-warning" : "";

                            return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                        }
                    },
                    {
                        "data": "receivingReportId",
                        "orderable": false,
                        "render": function (data, type, row) {
                            var dropdown = `<div class="dropdown actions-dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                                <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                                        type="button" 
                                                        data-bs-toggle="dropdown" 
                                                        aria-expanded="false">
                                                    <i class="bi bi-three-dots"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                                    ${row.postedBy == null ? `
                                                        <li><a class="dropdown-item" href="@Url.Action("Edit", "ReceivingReport", new { area = "Filpride" })/${data}">Edit</a></li>
                                                        <li><a class="dropdown-item" href="@Url.Action("Print", "ReceivingReport", new { area = "Filpride" })/${data}">Preview</a></li>
                                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmCancel(${data})">Cancel</a></li>
                                                    ` : `
                                                        <li><a class="dropdown-item" href="@Url.Action("Edit", "ReceivingReport", new { area = "Filpride" })/${data}">Edit</a></li>
                                                        <li><a class="dropdown-item" href="@Url.Action("Print", "ReceivingReport", new { area = "Filpride" })/${data}">Print</a></li>
                                                    `}
                                                </ul>
                                            </div>`;
                            return dropdown;
                        }
                    }
                ],
                "order": [[0, "asc"]], // Default sort by TransactionDate
                "pageLength": 10 // Default number of rows per page
            });
        });
    </script>
}