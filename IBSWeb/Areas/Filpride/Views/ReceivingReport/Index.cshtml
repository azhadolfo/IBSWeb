@model IEnumerable<FilprideReceivingReport>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Receiving Report";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">RECEIVING REPORT</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
            <div class="col-6 text-end">
                <a asp-area="Filpride" asp-controller="ReceivingReport" asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New
                </a>
            </div>
        </div>
        <table class="table table-bordered table-hover" id="paginatedTable">
            <thead>
                <tr class="text-nowrap table-secondary">
                    <th class="text-start">
                        RR No
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.PurchaseOrder.PurchaseOrderNo)
                    </th>
                    <th>
                        Delivered
                    </th>
                    <th>
                        Received
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedBy)
                    </th>
                    <th>
                        Status
                    </th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        function confirmVoid(id) {
            console.log(id);
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "ReceivingReport", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            console.log(id);
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "ReceivingReport", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        $(document).ready(function() {
            $('#paginatedTable').DataTable({
                "processing": true, // Enable processing indicator
                "serverSide": true, // Enable server-side processing
                "stateSave" : true,
                "ajax": {
                    "url": "@Url.Action("GetReceivingReports", "ReceivingReport", new { area = "Filpride" })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                },
                "columns": [
                    { "data": "receivingReportNo" },
                    {
                        "data": "date",
                        "name": "date",
                        "render": function (data, type, row) {
                            // Assuming 'Date' is in ISO format like "2024-07-12T00:00:00"
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
                        }
                    },
                    { "data": "purchaseOrder.purchaseOrderNo" },
                    { "data": "quantityDelivered", "render": $.fn.dataTable.render.number(',', '.', 4) },
                    { "data": "quantityReceived", "render": $.fn.dataTable.render.number(',', '.', 4) },
                    { "data": "createdBy" },
                    {
                        "data": "status",
                        "render": function(data, type, row) {
                            var statusClass = row.status == "@nameof(Status.Posted)" ? "bg-info" :
                                              row.status == "@nameof(Status.Voided)"  ? "bg-danger" :
                                              row.status == "@nameof(Status.Canceled)" ? "bg-warning" : "";

                            return `<span class="badge rounded-pill ${statusClass}">${row.status}</span>`;
                        }
                    },
                    {
                        "data": "receivingReportId",
                        "render": function (data, type, row) {
                            var dropdown = `<div class="dropdown" style="${row.voidedBy != null || row.canceledBy != null ? 'display:none;' : ''}">
                                                <button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                    Actions
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown">
                                                    ${row.postedBy == null ? `
                                                        <li><a class="dropdown-item" href="@Url.Action("Edit", "ReceivingReport", new { area = "Filpride" })/${data}">Edit</a></li>
                                                        <li><a class="dropdown-item" href="@Url.Action("Print", "ReceivingReport", new { area = "Filpride" })/${data}">Preview</a></li>
                                                        <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmCancel(${data})">Cancel</a></li>
                                                    ` : `
                                                        <li><a class="dropdown-item" href="@Url.Action("Print", "ReceivingReport", new { area = "Filpride" })/${data}">Print</a></li>
                                                        ${row.amountPaid == 0 ? `
                                                            <li><a class="dropdown-item" href="javascript:void(0);" onclick="confirmVoid(${data})">Void</a></li>
                                                        ` : `
                                                            <li><button class="dropdown-item" disabled readonly>Void</button></li>
                                                        `}
                                                    `}
                                                </ul>
                                            </div>`;
                            return dropdown;
                        }
                    }
                ],
                "order": [[0, "asc"]], // Default sort by TransactionDate
                "pageLength": 10 // Default number of rows per page
            });
        });
    </script>
}