@using IBS.Utility.Enums
@model IEnumerable<FilprideCustomerOrderSlip>

@{
    ViewData["Title"] = "Customer Order Slip";
}

<style>
    .container {
        max-width: 100% !important;
        width: 100% !important;
    }

    /* Custom styles for professional look */
    .table th {
        font-weight: 600;
        color: #374151;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.025em;
    }

    .table tbody tr {
        transition: all 0.2s;
    }

    .table tbody tr:hover {
        background-color: rgba(59, 130, 246, 0.05);
    }

    .table-loading {
        position: relative;
        opacity: 0.6;
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.8em;
        font-size: 0.75rem;
    }

    .actions-dropdown .dropdown-item {
        padding: 0.5rem 1rem;
        font-size: 0.8rem;
    }

    .actions-dropdown .dropdown-item:hover {
        background-color: #f3f4f6;
    }
</style>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">Customer Order Slip</h2>
        <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Create" class="btn btn-light">
            <i class="bi bi-plus-circle"></i> New Order
        </a>
    </div>
    
    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">COS#</th>
                        <th class="text-start">OTC COS#</th>
                        <th class="text-start">PO#</th>
                        <th class="text-start">Depot</th>
                        <th class="text-start">@Html.DisplayNameFor(m => m.Date)</th>
                        <th class="text-start">Customer</th>
                        <th class="text-start">Product</th>
                        <th class="text-start">Quantity</th>
                        <th class="text-start">Balance</th>
                        <th class="text-start">Total Amount</th>
                        <th class="text-start">Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            
            $('#paginatedTable').DataTable({
                "processing": true,
                "serverSide": true,
                "stateSave": true,
                "stateDuration": 86400,
                "language": {
                    "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
                },
                "ajax": {
                    "url": "@Url.Action("GetCustomerOrderSlips", "CustomerOrderSlip", new { area = "Filpride", filterType = ViewBag.FilterType?.ToString() })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    "error": function (xhr, error, thrown) {
                        console.error('DataTables error:', error);
                        alert('An error occurred while loading the data');
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#paginatedTable').addClass('table-loading');
                },
                "drawCallback": function(settings) {
                    $('#paginatedTable').removeClass('table-loading');

                    // Initialize all tooltips
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                "columns": [
                    { "data": "customerOrderSlipNo" },
                    { "data": "oldCosNo" },
                    {
                        "data": "purchaseOrderId",
                        "render": function(data, type, row) {
                            if (!row.appointedSupplierPOs || row.appointedSupplierPOs.length === 0) {
                                return `<span>${row.purchaseOrderNo ? row.purchaseOrderNo : ""}</span>`;
                            }

                            // For multiple PO numbers
                            return `<span data-bs-toggle="tooltip" title="${row.appointedSupplierPOs.join(', ')}">
                                        ${row.appointedSupplierPOs.length} POs
                                    </span>`;
                        },
                    },
                    { 
                        "data": "pickUpPointId",
                        "render": function (data, type, row){
                            return row.depot
                        },
                    },
                    {
                        "data": "date",
                        "render": function (data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit'
                            });
                        }
                    },
                    { "data": "customerName" },
                    { "data": "productName" },
                    {
                        "data": "quantity",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "balanceQuantity",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "totalAmount",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "status",
                        "render": function (data) {
                            var badgeClass = "";
                            switch (data) {
                                case '@CosStatus.Created':
                                    badgeClass = "bg-primary";
                                    break;
                                case '@CosStatus.SupplierAppointed':
                                case '@CosStatus.HaulerAppointed':
                                case '@CosStatus.ForAtlBooking':
                                    badgeClass = "bg-info";
                                    break;
                                case '@CosStatus.ForApprovalOfFM':
                                    badgeClass = "bg-warning";
                                    break;
                                case '@CosStatus.ForDR':
                                case '@CosStatus.Completed':
                                    badgeClass = "bg-success";
                                    break;
                                case "@CosStatus.Expired":
                                case "@CosStatus.Disapproved":
                                case "@CosStatus.Closed":
                                    badgeClass = "bg-danger";
                                    break;
                                default:
                                    badgeClass = "bg-secondary";
                                    break;
                            }
                            return `<span class="badge ${badgeClass} rounded-pill">${data}</span>`;
                        }
                    },
                    {
                        "data": null,
                        "orderable": false,
                        "render": function (data, type, row) {
                            var status = row.status;
                            var customerOrderSlipId = row.customerOrderSlipId;
                            var actions = `
                                <div class="dropdown actions-dropdown">
                                    <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                            type="button" 
                                            data-bs-toggle="dropdown" 
                                            aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                            switch (status) {
                                case '@CosStatus.Created':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>
                                                <li><a class="dropdown-item" href="@Url.Action("AppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Appoint Supplier</a></li>
                                                <li><a class="dropdown-item" href="@Url.Action("AppointHauler", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Appoint Hauler</a></li>`;
                                    break;
                                case '@CosStatus.SupplierAppointed':
                                case '@CosStatus.HaulerAppointed':
                                case '@CosStatus.ForAtlBooking':
                                    // Check for Supplier Appointment Status

                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;

                                    if (row.pickUpPointId != null ) {
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Supplier</a></li>`;
                                    } else {
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("AppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Appoint Supplier</a></li>`;
                                    }

                                    // Check for Hauler Appointment Status
                                    if (row.driver != null && row.plateNo != null) {
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointHauler", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Hauler</a></li>`;
                                    } else {
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("AppointHauler", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Appoint Hauler</a></li>`;
                                    }

                                    if (status === '@CosStatus.ForAtlBooking') {
                                        actions += `<li><a class="dropdown-item" target="_blank" href="@Url.Action("Create", "AuthorityToLoad", new { area = "Filpride" })">Book ATL</a></li>`;
                                    }

                                    break;
                                case '@CosStatus.ForApprovalOfOM':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Preview</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Supplier</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointHauler", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Hauler</a></li>`;
                                    break;
                                case '@CosStatus.ForApprovalOfFM':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Preview</a></li>`;
                                    break;
                                case '@CosStatus.ForDR':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Print</a></li>`;
                                    break;
                                default:
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">View Details</a></li>`;
                                    break;
                            }

                            if (status != '@CosStatus.Expired' && status != '@CosStatus.Completed' && status != '@CosStatus.Closed')
                            {
                                actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                            }
                            actions += `</ul></div>`;
                            return actions;
                        }
                    }
                ]
            });
        });
    </script>
    <script>
        
        // SweetAlert function
        function confirmCloseCos(customerOrderSlipId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, close it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the Close COS action
                    window.location.href = `@Url.Action("Close", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}`;
                }
            });
        }
    
    
    </script>

}