@using IBS.Utility.Enums
@model IEnumerable<FilprideCustomerOrderSlip>

@{
    ViewData["Title"] = "Customer Order Slip";
}

<link rel="stylesheet" href="~/css/index-style.css">

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center bg-secondary p-3 rounded shadow">
        <h2 class="text-white m-0">@ViewData["Title"]</h2>
        <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Create" class="btn btn-light">
            <i class="bi bi-plus-circle"></i> New Order
        </a>
    </div>
    
    <div class="card shadow border-0 mt-3">
        <div class="card-body p-3">
            <div class="table-responsive" style="max-height: 70vh">
                <table class="table table-hover mb-0" id="paginatedTable">
                    <thead class="bg-light">
                    <tr>
                        <th class="text-start">COS#</th>
                        <th class="text-start">Delivery Option</th>
                        <th class="text-start">PO#</th>
                        <th class="text-start">Depot</th>
                        <th class="text-start">@Html.DisplayNameFor(m => m.Date)</th>
                        <th class="text-start">Customer</th>
                        <th class="text-start">Product</th>
                        <th class="text-start">Price</th>
                        <th class="text-start">Quantity</th>
                        <th class="text-start">Balance</th>
                        <th class="text-start">Total Amount</th>
                        <th class="text-start">Status</th>
                        <th class="text-center" style="width: 100px;">Actions</th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>
<form id="changePriceForm" method="post" enctype="multipart/form-data"
      asp-action="ChangePrice" asp-controller="CustomerOrderSlip" asp-area="Filpride">
    <input type="hidden" name="id" />
    <input type="hidden" name="newPrice" />
    <input type="hidden" name="referenceNo" />
    <input type="file" name="file" id="hiddenFileInput" style="display:none;" />
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            
            $('#paginatedTable').DataTable({
                "processing": true,
                "serverSide": true,
                "stateSave": true,
                "stateDuration": 86400,
                "language": {
                    "processing": `<div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                 </div>`
                },
                "ajax": {
                    "url": "@Url.Action("GetCustomerOrderSlips", "CustomerOrderSlip", new { area = "Filpride", filterType = ViewBag.FilterType?.ToString() })",
                    "type": "POST",
                    "data": function (d) {
                        return $.extend({}, d, {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        });
                    },
                    "error": function (xhr, error, thrown) {
                        console.error('DataTables error:', error);
                        alert('An error occurred while loading the data');
                    }
                },
                "preDrawCallback": function(settings) {
                    $('#paginatedTable').addClass('table-loading');
                },
                "drawCallback": function(settings) {
                    $('#paginatedTable').removeClass('table-loading');

                    // Initialize all tooltips
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                "columns": [
                    { 
                        "data": "customerOrderSlipNo",
                        "name": "CustomerOrderSlipNo",
                    },
                    { 
                        "data": "deliveryOption",
                        "name": "deliveryOption",
                    },
                    {
                        "data": "purchaseOrderId",
                        "name": "PurchaseOrderId",
                        "render": function(data, type, row) {

                            if (!row.appointedSupplierPOs || row.appointedSupplierPOs.length === 0) {
                                return ""; 
                            }
                            
                            if (row.appointedSupplierPOs.length === 1) {
                                return `<span>${row.appointedSupplierPOs[0]}</span>`;
                            }

                            // For multiple PO numbers
                            return `<span data-bs-toggle="tooltip" title="${row.appointedSupplierPOs.join(', ')}">
                                        ${row.appointedSupplierPOs.length} POs
                                    </span>`;
                        },
                    },
                    { 
                        "data": "depot",
                        "name": "Depot",
                    },
                    {
                        "data": "date",
                        "name": "Date",
                        "render": function (data) {
                            var date = new Date(data);
                            return date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'short',
                                day: '2-digit'
                            });
                        }
                    },
                    { 
                        "data": "customerName",
                        "name": "CustomerName",
                    },
                    { 
                        "data": "productName",
                        "name": "ProductName",
                    },
                    {
                        "data": "deliveredPrice",
                        "name": "DeliveredPrice",
                        "render": function (data, type, row) {
                            var price = $.fn.dataTable.render.number(',', '.', 4).display(data);
                            return `<span class="d-block fw-medium">${price}</span>`;
                        }
                    },
                    {
                        "data": "quantity",
                        "name": "Quantity",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "balanceQuantity",
                        "name": "BalanceQuantity",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "totalAmount",
                        "name": "TotalAmount",
                        "render": function (data, type, row) {
                            var amount = $.fn.dataTable.render.number(',', '.', 2).display(data);
                            return `<span class="d-block fw-medium">${amount}</span>`;
                        }
                    },
                    {
                        "data": "status",
                        "name": "Status",
                        "render": function (data) {
                            var badgeClass = "";
                            switch (data) {
                                case '@CosStatus.Created':
                                    badgeClass = "bg-primary";
                                    break;
                                case '@CosStatus.SupplierAppointed':
                                case '@CosStatus.HaulerAppointed':
                                case '@CosStatus.ForAtlBooking':
                                    badgeClass = "bg-info";
                                    break;
                                case '@CosStatus.ForApprovalOfCNC':
                                case '@CosStatus.ForApprovalOfFM':
                                    badgeClass = "bg-warning";
                                    break;
                                case '@CosStatus.ForDR':
                                case '@CosStatus.Completed':
                                    badgeClass = "bg-success";
                                    break;
                                case "@CosStatus.Expired":
                                case "@CosStatus.Disapproved":
                                case "@CosStatus.Closed":
                                    badgeClass = "bg-danger";
                                    break;
                                default:
                                    badgeClass = "bg-secondary";
                                    break;
                            }
                            return `<span class="badge ${badgeClass} rounded-pill">${data}</span>`;
                        }
                    },
                    {
                        "data": null,
                        "orderable": false,
                        "render": function (data, type, row) {
                            var status = row.status;
                            const isAdmin = @User.IsInRole("Admin").ToString().ToLower();
                            var customerOrderSlipId = row.customerOrderSlipId;
                            var actions = `
                                <div class="dropdown actions-dropdown">
                                    <button class="btn btn-light btn-sm dropdown-toggle w-100" 
                                            type="button" 
                                            data-bs-toggle="dropdown" 
                                            aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end shadow-sm">`;

                            actions += `<li><a class="dropdown-item" href="@Url.Action("Preview", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Preview</a></li>`;
                            
                            switch (status) {
                                case '@CosStatus.ForApprovalOfCNC':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                                    break;
                                case '@CosStatus.Created':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("AppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Appoint Supplier</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                                    break;
                                case '@CosStatus.ForAtlBooking':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Supplier</a></li>`;
                                    actions += `<li><a class="dropdown-item" target="_blank" href="@Url.Action("Create", "AuthorityToLoad", new { area = "Filpride" })">Book ATL</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                                    break;
                                case '@CosStatus.ForApprovalOfOM':
                                case '@CosStatus.ForApprovalOfFM':
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Supplier</a></li>`;
                                    actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                                    break;
                                case '@CosStatus.ForDR':
                                    if (row.deliveredQuantity === 0){
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("EditCos", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Edit COS</a></li>`;
                                        actions += `<li><a class="dropdown-item" href="@Url.Action("ReAppointSupplier", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}">Reappoint Supplier</a></li>`;
                                    }
                                    else if (row.oldPrice === 0){
                                        actions += `<li><a class="dropdown-item" href="#" onclick="changePrice('${customerOrderSlipId}')">Change Price</a></li>`;
                                    }
                                    actions += `<li><a class="dropdown-item" href="#" onclick="confirmCloseCos('${customerOrderSlipId}')">Close COS</a></li>`;
                                    break;
                                case '@CosStatus.Completed':
                                    if (row.deliveredQuantity > 0 && row.oldPrice === 0){
                                        actions += `<li><a class="dropdown-item" href="#" onclick="changePrice('${customerOrderSlipId}')">Change Price</a></li>`;
                                    }
                                    break;
                                case '@CosStatus.Closed':
                                    if (row.oldPrice === 0){
                                        actions += `<li><a class="dropdown-item" href="#" onclick="changePrice('${customerOrderSlipId}')">Change Price</a></li>`;
                                    }
                                    break;
                            }
                            
                            actions += `</ul></div>`;
                            return actions;
                        }
                    }
                ]
            });
        });
    </script>
    <script>
        
        // SweetAlert function
        function confirmCloseCos(customerOrderSlipId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, close it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the Close COS action
                    window.location.href = `@Url.Action("Close", "CustomerOrderSlip", new { area = "Filpride" })/${customerOrderSlipId}`;
                }
            });
        }

        function changePrice(customerOrderSlipId) {
            Swal.fire({
                title: 'Change Price (One Time Only)',
                html:
                    '<input id="swal-input1" class="swal2-input" placeholder="Enter New Price">' +
                    '<input id="swal-input2" class="swal2-input" placeholder="Enter Ref#">' +
                    '<div class="mt-3 d-flex justify-content-center align-items-center"><input class="form-control" type="file" id="formFileLg" style="max-width: 252.38px; min-width: 224.56px;"></div>',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Submit',
                preConfirm: () => {
                    const price = document.getElementById('swal-input1').value;
                    const ref = document.getElementById('swal-input2').value;
                    const file = document.getElementById('formFileLg').files[0];
                    if (!price || !ref || !file) {
                        Swal.showValidationMessage('Price, Ref#, and Attachment are required');
                        return false;
                    }
                    return { price: price, ref: ref, file: file };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const price = result.value.price;
                    const ref = result.value.ref;
                    const file = result.value.file;

                    Swal.fire({
                        title: 'Are you sure? (One Time Only)',
                        html: `Do you want to proceed with the price change?<br><br><b>Price:</b> ${price}<br><b>Reference #:</b> ${ref}<br><b>File:</b> ${file ? file.name : 'No file selected'}`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((confirmResult) => {
                        if (confirmResult.isConfirmed) {
                            const formData = new FormData();
                            formData.append('id', customerOrderSlipId);
                            formData.append('newPrice', price);
                            formData.append('referenceNo', ref);
                            formData.append('file', file);

                            if (confirmResult.isConfirmed) {
                                const form = document.getElementById("changePriceForm");

                                form.querySelector("input[name='id']").value = customerOrderSlipId;
                                form.querySelector("input[name='newPrice']").value = price;
                                form.querySelector("input[name='referenceNo']").value = ref;

                                // If file is selected, copy it into the hidden file input
                                const hiddenFileInput = document.getElementById("hiddenFileInput");
                                if (file) {
                                    // Replace the hidden input with the selected file (must clone, File inputs are read-only)
                                    const newFileInput = hiddenFileInput.cloneNode();
                                    const dataTransfer = new DataTransfer();
                                    dataTransfer.items.add(file);
                                    newFileInput.files = dataTransfer.files;
                                    hiddenFileInput.parentNode.replaceChild(newFileInput, hiddenFileInput);
                                }

                                form.submit();
                            }
                        }
                    });
                }
            });
        }

    </script>

}