@using IBS.Utility.Constants
@using IBS.Utility.Enums
@model CustomerOrderSlipViewModel

@{
    ViewData["Title"] = "Edit Customer Order Slip";
}

<link rel="stylesheet" href="~/css/form-style.css">

<style>
    #dragOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
        color: #333;
        font-family: Arial, sans-serif;
    }
    #dropZone {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        width: 300px;
    }
    #dropZone img {
        margin-bottom: 10px;
    }
    #fileUploadArea:empty:before {
        content: attr(placeholder);
        color: #6c757d; /* Bootstrap placeholder color */
        display: block;
    }
    #fileUploadArea {
        border: 1px solid #ced4da; /* Bootstrap form-control border */
        border-radius: 0.25rem; /* Bootstrap form-control border-radius */
        padding: 0.375rem 0.75rem; /* Bootstrap form-control padding */
        background-color: #fff;
        overflow: auto;
    }
    #fileUploadArea:focus {
        outline: none;
        border-color: #80bdff; /* Bootstrap focus border */
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Bootstrap focus shadow */
    }
    .text-truncate {
        display: inline-block;
        max-width: 100%;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

<div class="loader-container">
    <div class="loader"></div>
    <div class="loader-text">Loading...</div>
</div>
<div id="dragOverlay">
    <div id="dropZone">
        <img src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'><path d='M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2v9.67z'/></svg>" alt="Drop icon">
        <h3>Drop your files here</h3>
        <p>Drop your files here to upload</p>
    </div>
</div>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Edit Customer Order Slip</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" enctype="multipart/form-data" class="row">
            @Html.AntiForgeryToken()
            <div class="border-2 p-3">
                <div asp-validation-summary="ModelOnly"></div>
                <input asp-for="CustomerOrderSlipId" type="hidden" />
                <input  asp-for="StationCode" type="hidden" />
                <input asp-for="CustomerType" type="hidden" />
                <div class="row py-2">
                    <div class="form-floating col-6">
                        <input asp-for="Date" type="date" class="form-control border-0 shadow" placeholder="" />
                        <label asp-for="Date" class="ms-2">Date<span class="required">*</span></label>
                        <span asp-validation-for="Date" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="OtcCosNo" class="form-control border-0 shadow" placeholder="" />
                    <label asp-for="OtcCosNo">OTC COS No<span class="required">*</span></label>
                    <span asp-validation-for="OtcCosNo" class="text-danger"></span>
                </div>
                <fieldset class="border p-2 py-2">
                    <legend class="w-auto px-2">Delivered To</legend>
                    <div class="form-group py-2 col-12">
                        <label class="control-label">Customer List<span class="required">*</span></label>
                        <select asp-for="CustomerId" asp-items="@Model.Customers" class="form-select js-select2 border-0 shadow" style="width:100%">
                            <option value="" selected>Select customer</option>
                        </select>
                        <span asp-validation-for="CustomerId" class="text-danger"></span>
                    </div>
                    <div class="form-floating py-2 col-12">
                        <input asp-for="CustomerAddress" class="form-control border-0 shadow" placeholder="" readonly tabindex="-1" />
                        <label asp-for="CustomerAddress"></label>
                        <span asp-validation-for="CustomerAddress" class="text-danger"></span>
                    </div>
                    <div class="form-floating py-2 col-12">
                        <input asp-for="TinNo" class="form-control border-0 shadow" placeholder="" readonly tabindex="-1" />
                        <label asp-for="TinNo"></label>
                        <span asp-validation-for="TinNo" class="text-danger"></span>
                    </div>
                    <div class="form-group py-2 col-12">
                        <label class="control-label">Customer Terms<span class="required">*</span></label>
                        <select asp-for="Terms" class="form-select js-select2 border-0 shadow" style="width:100%; max-height: 200px;" 
                                id ="termsSelect" required>
                            <option value="" selected disabled>Select payment terms</option>
                            <option value="@SD.Terms_Cod">@SD.Terms_Cod</option>
                            <option value="@SD.Terms_Prepaid">@SD.Terms_Prepaid</option>
                            <option value="@SD.Terms_7d">@SD.Terms_7d</option>
                            <option value="@SD.Terms_10d">@SD.Terms_10d</option>
                            <option value="@SD.Terms_15d">@SD.Terms_15d</option>
                            <option value="@SD.Terms_30d">@SD.Terms_30d</option>
                            <option value="@SD.Terms_45d">@SD.Terms_45d</option>
                            <option value="@SD.Terms_60d">@SD.Terms_60d</option>
                            <option value="@SD.Terms_90d">@SD.Terms_90d</option>
                            <option value="@SD.Terms_15pdc">@SD.Terms_15pdc</option>
                            <option value="@SD.Terms_30pdc">@SD.Terms_30pdc</option>
                            <option value="@SD.Terms_45pdc">@SD.Terms_45pdc</option>
                            <option value="@SD.Terms_60pdc">@SD.Terms_60pdc</option>
                            <option value="@SD.Terms_M15">@SD.Terms_M15</option>
                            <option value="@SD.Terms_M29">@SD.Terms_M29</option>
                            <option value="@SD.Terms_M30">@SD.Terms_M30</option>
                        </select>
                        <span asp-validation-for="Terms" class="text-danger"></span>
                        <input type="hidden" asp-for="Terms"/>
                    </div>
                    <div class="form-group py-2 col-12" style="display: @(Model.SelectedBranch != null ? "block" : "none")">
                        <label class="control-label">Branch<span class="required">*</span></label>
                        <select asp-for="SelectedBranch" asp-items="@Model.Branches" class="form-select js-select2 border-0 shadow" style="width:100%" required>
                            <option value="" selected>Select branch</option>
                        </select>
                        <span asp-validation-for="SelectedBranch" class="text-danger"></span>
                    </div>
                    <div class="form-group py-2 col-12">
                        <label class="control-label">Product List<span class="required">*</span></label>
                        <select asp-for="ProductId" asp-items="@Model.Products" class="form-select js-select2 border-0 shadow products" style="width:100%">
                            <option value="" selected>Select product</option>
                        </select>
                        <span asp-validation-for="ProductId" class="text-danger"></span>
                    </div>
                    <div class="form-floating py-2 col-12 customerPOContainer">
                        <input asp-for="CustomerPoNo" class="form-control border-0 shadow" placeholder="" />
                        <label asp-for="CustomerPoNo">Customer PO No.<span class="required">*</span></label>
                        <span asp-validation-for="CustomerPoNo" class="text-danger"></span>
                    </div>
                    <div class="form-group py-2 col-12 substituteCustomerPOContainer" style="display: none">
                        <label class="control-label">Customer PO List<span class="required">*</span></label>
                        <select asp-for="CustomerPoNo" asp-items="@Model.PurchaseOrder" class="form-select js-select2 border-0 shadow customerPoNo" style="width:100%">
                            <option value="" selected>Select customer PO</option>
                        </select>
                        <span asp-validation-for="CustomerPoNo" class="text-danger"></span>
                    </div>
                </fieldset>
                <div class="row py-2">
                    <div class="form-floating col-3">
                        <input asp-for="Quantity"
                               class="form-control border-0 shadow"
                               placeholder=""
                               required min="0.01"
                               value="@Model.Quantity"/>
                        <label asp-for="Quantity" class="ms-2">Quantity<span class="required">*</span></label>
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                    </div>
                    <div class="form-floating col-3">
                        <input asp-for="DeliveredPrice" class="form-control border-0 shadow" placeholder="" required min="0.01" />
                        <label asp-for="DeliveredPrice" class="ms-2">Delivered Price<span class="required">*</span></label>
                        <span asp-validation-for="DeliveredPrice" class="text-danger"></span>
                    </div>
                    <div class="form-floating col-3">
                        <input asp-for="Freight" class="form-control border-0 shadow" placeholder="" />
                        <label asp-for="Freight" class="ms-2">Freight</label>
                        <span asp-validation-for="Freight" class="text-danger"></span>
                    </div>
                    <div class="form-floating col-3">
                        <input asp-for="Vat" class="form-control border-0 shadow" placeholder="" readonly tabindex="-1" />
                        <label asp-for="Vat" class="ms-2">VAT</label>
                        <span asp-validation-for="Vat" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="TotalAmount" class="form-control border-0 shadow" placeholder="" readonly tabindex="-1" />
                    <label asp-for="TotalAmount">Total Amount</label>
                    <span asp-validation-for="TotalAmount" class="text-danger"></span>
                </div>
                <!-- Add radio button for HasCommission -->
                <div class="form-group py-2">
                    <label>Has Commission<span class="required">*</span></label><br />
                    <input type="radio" asp-for="HasCommission" value="true" id="HasCommissionYes" />
                    <label for="HasCommissionYes">Yes</label>

                    <input type="radio" asp-for="HasCommission" value="false" id="HasCommissionNo" />
                    <label for="HasCommissionNo">No</label>

                    <span asp-validation-for="HasCommission" class="text-danger"></span>
                </div>

                <!-- Commission info fields -->
                <div id="commissionInfo" style="display: none;">
                    <div class="form-group py-2 col-12">
                        <label class="control-label">Commissionee List<span class="required">*</span></label>
                        <select asp-for="CommissioneeId" asp-items="@Model.Commissionee" class="form-select js-select2 border-0 shadow" style="width:100%" required>
                            <option value="" selected>Select commissionee</option>
                        </select>
                        <span asp-validation-for="CommissioneeId" class="text-danger"></span>
                    </div>
                    <div class="form-floating col-12 py-2">
                        <input asp-for="CommissionRate" class="form-control border-0 shadow" placeholder="Enter Commission Rate" min="0.01" />
                        <label asp-for="CommissionRate" class="ms-2">Commission Rate<span class="required">*</span></label>
                        <span asp-validation-for="CommissionRate" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group py-2 col-12">
                    <label asp-for="AccountSpecialist" class="control-label">Account Specialist<span class="required">*</span></label>
                    <select asp-for="AccountSpecialist" class="form-select js-select2 border-0 shadow" style="width:100%">
                        <option value="" selected>Select Account Specialist</option>
                        @foreach (var accountSpecialist in Enum.GetValues<AccountSpecialistEnum>())
                        {
                            <option value="@accountSpecialist">@accountSpecialist.ToString()</option>
                        }
                    </select>
                    <span asp-validation-for="AccountSpecialist" class="text-danger"></span>
                </div>

                <div class="form-floating py-2 col-12">
                    <textarea asp-for="Remarks" class="form-control border-0 shadow" placeholder="Indicate the reason for this change." style="height: 100px"></textarea>
                    <label asp-for="Remarks" class="control-label">Remarks<span class="required">*</span></label>
                    <span asp-validation-for="Remarks" class="text-danger"></span>
                </div>
                @if (Model.FileInfos?.Count != 0 && Model.FileInfos != null)
                {
                    <div class="px-1 row d-flex justify-content-start">
                        <label class="mt-3">Attachments: </label>
                    </div>
                    <div class="pt-2 px-1 row">
                        @foreach (var file in Model.FileInfos)
                        {
                            <div class="file-item d-inline-flex align-items-center mb-3 col-3">
                                <a class="existingFile-link btn btn-outline-primary border shadow text-truncate" data-name="@file.FileName" data-url="@file.SignedUrl" title="@file.FileName">
                                    @file.FileName
                                </a>
                            </div>
                        }
                        <div class="file-item d-inline-flex align-items-center mb-3 col-3">
                            <a class="newAttachmentButton btn btn-outline-danger border shadow text-truncate">
                                New attachments
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="pt-2 px-1 row">
                        <div class="file-item d-inline-flex align-items-center mb-3 col-3">
                            <a class="newAttachmentButton btn btn-outline-danger border shadow text-truncate">
                                New attachments
                            </a>
                        </div>
                    </div>
                }
                <div id="newAttachmentGroup" class="row py-2 px-2 justify-content-start text-start d-none">
                    <div class="form-group col-12">
                        
                        <div class="row">
                            <div class="col">
                                <label for="fileUploadArea">New attachments</label>
                            </div>
                        </div>

                        <div id="fileUploadArea" class="row justify-content-center text-center shadow pt-2" style="min-height: 100px;">
                            <a id="fileChoosingArea" class="col-6 d-flex flex-column justify-content-center align-items-center" style="height: 100px; cursor: pointer;">
                                <h5><i class="bi bi-card-image"></i></h5>
                                <h5>Browse or drop image</h5>
                            </a>
                        </div>

                        <div class="row">
                            <div class="col">
                                <input asp-for="UploadedFiles" type="file" accept="image/*" multiple style="display: none;"/>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="previewContainer" class="pt-2"></div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control">Update</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Index" asp-route-filterType="@ViewBag.FilterType" class="btn btn-outline-primary border form-control">Back to List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var isInitialize = true;
            function loadCustomerData() {
                var customerId = $('select[name="CustomerId"]').val();
                if (customerId) {
                    $.ajax({
                        url: '@Url.Action("GetCustomerDetails", "CustomerOrderSlip", new { area = "Filpride" })',
                        type: "GET",
                        data: { id: customerId },
                        success: function (data) {
                            if (data) {
                                $('input[name="CustomerAddress"]').val(data.address);
                                $('input[name="TinNo"]').val(data.tinNo);
                                $('input[name="CustomerType"]').val(data.customerType);
                                $('select[name="Terms"]').val(data.terms).change();
                                $('input[name="StationCode"]').val(data.stationCode);

                                // Populate Branches dropdown using fetched data
                                populateBranches(data.branches);

                                updateTermsEditability(data.hasMultipleTerms);

                            } else {
                                $('input[name="CustomerAddress"]').val('');
                                $('input[name="TinNo"]').val('');
                                $('select[name="Terms"]').val('');
                                $('select[name="StationCode"]').val('');
                                clearBranches();
                            }
                            var poSelect = $(".customerPoNo");
                            var products = $(".products");

                            if (!isInitialize) {
                                products.val(null).trigger("change");
                            }

                            @*TODO Uncomment this feature once the mobility company is live*@
                            // if (data.customerType === 'Retail' && @Model.CustomerOrderSlipId > 2107) { @*TODO change the actual latest cos id**@
                            //     $(".customerPOContainer").hide();
                            //     $(".substituteCustomerPOContainer").show();
                            //     poSelect.prop("disabled", false);
                            //     $("input[name='CustomerPoNo']").prop("disabled", true);
                            //     $('input[name="Quantity"]').attr('readonly', true);
                            //     $('input[name="DeliveredPrice"]').attr('readonly', true);
                            // } else {
                            //     $(".customerPOContainer").show();
                            //     $(".substituteCustomerPOContainer").hide();
                            //     $("input[name='CustomerPoNo']").prop("disabled", false);
                            //     poSelect.prop("disabled", true);
                            //     $('input[name="Quantity"]').removeAttr('readonly');
                            //     $('input[name="DeliveredPrice"]').removeAttr('readonly');
                            // }

                            @*TODO Delete this feature once the mobility company is live*@
                            $(".customerPOContainer").show();
                            $(".substituteCustomerPOContainer").hide();
                            $("input[name='CustomerPoNo']").prop("disabled", false);
                            poSelect.prop("disabled", true);
                            $('input[name="Quantity"]').removeAttr('readonly');
                            $('input[name="DeliveredPrice"]').removeAttr('readonly');

                            isInitialize = false;
                        },
                        error: function (xhr, status, error) {
                            console.log("Error: " + error);
                        }
                    });
                } else {
                    $('input[name="CustomerAddress"]').val('');
                    $('input[name="TinNo"]').val('');
                    $('select[name="Terms"]').val('');
                    $('select[name="StationCode"]').val('');
                    clearBranches();
                }
            }
            $('select[name="CustomerId"]').on('change', loadCustomerData);
            loadCustomerData();

            // Function to populate branches dropdown
            function populateBranches(branches) {
                var branchDropdown = $('select[name="SelectedBranch"]');
                branchDropdown.empty();
                branchDropdown.append('<option value="" selected>Select branch</option>');
                if (branches && branches.length > 0) {
                    $.each(branches, function (index, item) {
                        branchDropdown.append('<option value="' + item.value + '">' + item.text + '</option>');
                    });
                    // Show the Branch dropdown
                    branchDropdown.closest('.form-group').show();
                }
                else{
                    clearBranches();
                }
            }

            // Function to clear branches dropdown
            function clearBranches() {
                var branchDropdown = $('select[name="SelectedBranch"]');
                branchDropdown.closest('.form-group').hide();
                branchDropdown.empty();
                branchDropdown.append('<option value="" selected>Select branch</option>');
            }

            function updateTermsEditability(hasMultipleTerms) {
                var termsSelect = $('#termsSelect');
                var selectedValue = termsSelect.val(); // Get the current selected value

                if (hasMultipleTerms) {
                    termsSelect.prop('disabled', false);
                    termsSelect.removeClass('bg-light');
                } else {
                    // Set the value to the model before disabling
                    termsSelect.val(selectedValue).change();
                    termsSelect.prop('disabled', true);
                    termsSelect.addClass('bg-light');

                    // This ensures the value is bound to your model
                    $('input[name="Terms"]').val(selectedValue);
                }
            }
            
        });
    </script>
    <script>
        $(document).ready(function () {
            function toggleCommissionFields() {
                var hasCommission = $('input[name="HasCommission"]:checked').val() === 'true';
                if (hasCommission) {
                    $('#commissionInfo').show();
                    $('input[name="CommissioneeId"]').prop('required', true);
                    $('input[name="CommissionRate"]').prop('required', true);
                } else {
                    $('#commissionInfo').hide();
                    $('select[name="CommissioneeId"]')
                        .val('') 
                        .trigger('change') 
                        .prop('required', false);
                    $('input[name="CommissionRate"]')
                        .val('0.00')
                        .prop('required', false);
                }
            }

            // Initial check
            toggleCommissionFields();

            // On radio button change
            $('input[name="HasCommission"]').on('change', function () {
                toggleCommissionFields();
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('select[name="CustomerId"]').on('change', function () {
                var customerType = $('input[name="CustomerType"]').val();

                if (customerType === 'Retail') {
                    $('#accountSpecialistDiv').hide();
                    $('select[name="AccountSpecialist"]').val(''); // Clear selection if hidden
                } else {
                    $('#accountSpecialistDiv').show();
                }
            });
        });
    </script>
    @*TODO Uncomment this feature once the mobility company is live*@
    @* <script> *@
    @*     $(document).ready(function () { *@
    @*         function loadPurchaseOrderList() { *@
    @*             var customerType = $('input[name="CustomerType"]').val(); *@
    @*             *@
    @*             if (customerType !== 'Retail' && @Model.CustomerOrderSlipId > 2107) { $1$TODO change the actual latest cos id*#1# *@
    @*                 return; *@
    @*             } *@
    @*              *@
    @*             var productId = $('select[name="ProductId"]').val(); *@
    @*             var poSelect = $(".customerPoNo"); *@
    @*             var stationCode = $('input[name="StationCode"]').val(); *@
    @*             if (productId) { *@
    @*                 $.ajax({ *@
    @*                     url: '@Url.Action("GetPurchaseOrderList", "CustomerOrderSlip", new { area = "Filpride" })', *@
    @*                     type: "GET", *@
    @*                     data: { productId: productId, stationCode: stationCode }, *@
    @*                     success: function (data) { *@
    @*                         if (data) { *@
    @*                             // Populate DR dropdown *@
    @*                             poSelect.empty(); *@
    @*                             $.each(data, function (index, po) { *@
    @*                                 poSelect.append($('<option>', { *@
    @*                                     value: po.text, *@
    @*                                     text: po.text *@
    @*                                 })); *@
    @*                             }); *@
    @* *@
    @*                             poSelect.trigger("change"); *@
    @*                         } else { *@
    @*                             $('input[name="Quantity"]').val(''); *@
    @*                             $('input[name="DeliveredPrice"]').val(''); *@
    @*                             $('input[name="Vat"]').val(''); *@
    @*                             $('input[name="TotalAmount"]').val(''); *@
    @*                         } *@
    @*                     }, *@
    @*                     error: function (xhr, status, error) { *@
    @*                         console.log("Error: " + error); *@
    @*                     } *@
    @*                 }); *@
    @*             } else { *@
    @*                 $('input[name="Quantity"]').val(''); *@
    @*                 $('input[name="DeliveredPrice"]').val(''); *@
    @*                 $('input[name="Vat"]').val(''); *@
    @*                 $('input[name="TotalAmount"]').val(''); *@
    @*             } *@
    @*             poSelect.val(null).empty().trigger("change"); *@
    @*         } *@
    @* *@
    @*         $('select[name="ProductId"]').on('change', loadPurchaseOrderList); *@
    @*         loadPurchaseOrderList(); *@
    @* *@
    @*         function getPurchaseOrder() { *@
    @* *@
    @*             var customerType = $('input[name="CustomerType"]').val(); *@
    @*              *@
    @*             if (customerType !== 'Retail') { *@
    @*                 return; *@
    @*             } *@
    @*              *@
    @*             var customerPoNo = $('.customerPoNo').val(); *@
    @*             if (customerPoNo) { *@
    @*                 $.ajax({ *@
    @*                     url: '@Url.Action("GetPurchaseOrder", "CustomerOrderSlip", new { area = "Filpride" })', *@
    @*                     type: "GET", *@
    @*                     data: { customerPoNo: customerPoNo }, *@
    @*                     success: function (data) { *@
    @*                         if (data) { *@
    @*                             $('input[name="Quantity"]').val(data.quantity); *@
    @*                             $('input[name="DeliveredPrice"]').val(data.unitPrice); *@
    @*                         } else { *@
    @*                             $('input[name="Quantity"]').val(''); *@
    @*                             $('input[name="DeliveredPrice"]').val(''); *@
    @*                             $('input[name="Vat"]').val(''); *@
    @*                             $('input[name="TotalAmount"]').val(''); *@
    @*                         } *@
    @*                         calculateAmountAndVat(); *@
    @*                     }, *@
    @*                     error: function (xhr, status, error) { *@
    @*                         console.log("Error: " + error); *@
    @*                     } *@
    @*                 }); *@
    @*             } else { *@
    @*                 $('input[name="Quantity"]').val(''); *@
    @*                 $('input[name="DeliveredPrice"]').val(''); *@
    @*                 $('input[name="Vat"]').val(''); *@
    @*                 $('input[name="TotalAmount"]').val(''); *@
    @*             } *@
    @*         } *@
    @* *@
    @*         $('.customerPoNo').on('change', getPurchaseOrder); *@
    @*         getPurchaseOrder(); *@
    @*     }); *@
    @* </script> *@
    <script>
        function calculateAmountAndVat() {
            var quantity = parseNumber($('input[name="Quantity"]').val());
            var deliveredPrice = parseNumber($('input[name="DeliveredPrice"]').val());

            var totalAmount = (quantity * deliveredPrice);
            var vat = (totalAmount / 1.12) * 0.12;

            $('input[name="Vat"]').val(formatNumber(vat));
            $('input[name="TotalAmount"]').val(formatNumber(totalAmount));

            if (totalAmount > 0) {
                checkCustomerBalance(totalAmount);
            }
        }

        $(document).ready(function () {
            $('input[name="Quantity"], input[name="DeliveredPrice"]').on('blur', calculateAmountAndVat);
        });
    </script>
    <script>
        function checkCustomerBalance(totalAmount) {
            var customerId = $('select[name="CustomerId"]').val();
            if (customerId) {
                $.ajax({
                    url: '@Url.Action("CheckCustomerBalance", "CustomerOrderSlip", new { area = "Filpride" })',
                    type: "GET",
                    data: { customerId: customerId },
                    success: function (data) {
                        if (totalAmount > data) {
                            if (confirm("Customer balance exceeded! Current balance: " + formatNumber(data) + ". Do you want to proceed with the creation?")) {
                                // User chose to proceed
                            } else {
                                // User chose not to proceed
                                $('input[name="DeliveredPrice"]').val('0.0000');
                                $('input[name="TotalAmount"]').val('0.0000');
                                $('input[name="Vat"]').val('0.0000');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("Error: " + error);
                    }
                });
            }
        }
    </script>
    <script>
        $(document).ready(function () {
            const DragOverlayHandler = (function () {
                const $overlay = $('#dragOverlay');
                const $fileUploadArea = $('#fileUploadArea');
                const $fileChoosingArea = $('#fileChoosingArea');
                const $fileInput = $('#UploadedFiles');
                const $previewContainer = $('#previewContainer');
                const $fileLink = $('.file-link');
                const $newAttachmentGroup = $('#newAttachmentGroup');
                let uploadedFiles = []; // Array to store all uploaded files
                let enableUploadNewAttachment = false; // Used in condition to enable uploading

                function init() {
                    bindEvents();
                }

                function bindEvents() {
                    $(document)
                        .on('dragenter', onDragEnter)
                        .on('dragover', onDragOver)
                        .on('dragleave', onDragLeave)
                        .on('drop', onDrop);
                    $fileUploadArea.on('paste', onPaste);
                    $fileChoosingArea.on('click', triggerFileInput);
                    $fileInput.on('change', onFileInputChange);
                    $(document).on('click', '.file-link', showUpload);
                    $(document).on('click', '.existingFile-link', showExistingUpload);
                    $(document).on('click', '.remove-file', removeFile);
                    $(document).on('click', '.newAttachmentButton', showReplaceUploadDisclaimer);
                }

                // Trigger file input on clicking the contenteditable div
                function triggerFileInput() {
                    $fileInput.click(); 
                }

                // Warning for replacing old attachments
                function showReplaceUploadDisclaimer() {
                    Swal.fire({
                        title: 'Warning',
                        text: "Uploading new attachments will overwrite existing attachments, continue?",
                        icon: 'question',
                        showDenyButton: true,
                        confirmButtonText: 'Yes, replace old attachments',
                        denyButtonText: 'No, keep old attachments'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            enableUploadNewAttachment = true;
                            $newAttachmentGroup.removeClass("d-none");
                        }
                    });
                }

                function onFileInputChange(event) {
                    const files = event.target.files;
                    if (files.length > 0) {
                        handleFiles(files);
                    }
                }

                function clearText(event) {
                    // Clear any text pasted into the contenteditable div to keep it clean
                    if ($fileUploadArea.text().trim() !== '') {
                        $fileUploadArea.text('');
                    }
                }

                // Displaying new files
                function showUpload(event) {
                    const fileName = $(event.currentTarget).data('name');
                    const file = uploadedFiles.find(f => f.name === fileName);

                    if (!file) {
                        console.warn('File not found:', fileName);
                        return;
                    }

                    const imageUrl = URL.createObjectURL(file);

                    Swal.fire({
                        imageUrl: imageUrl,
                        imageAlt: fileName,
                        showConfirmButton: false,
                        background: 'transparent',
                        customClass: {
                            popup: 'custom-image-popup'
                        },
                        padding: '1rem',
                        width: '90vw',
                        heightAuto: true,
                        didOpen: () => {
                            $('.swal2-image').css({
                                'max-height': '80vh',
                                'max-width': '100%',
                                'height': 'auto',
                                'width': 'auto'
                            });

                            $('#custom-swal-close').remove();

                            const closeButton = $('<button>×</button>').css({
                                position: 'fixed',
                                top: '10px',
                                right: '10px',
                                zIndex: '9999',
                                background: 'rgba(202, 25, 41, 1)',
                                color: '#fff',
                                border: 'none',
                                borderRadius: '20%',
                                width: '40px',
                                height: '40px',
                                fontSize: '30px',
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }).attr('id', 'custom-swal-close').on('click', () => Swal.close());

                            $('body').append(closeButton);
                        },
                        willClose: () => {
                            $('#custom-swal-close').remove();
                            URL.revokeObjectURL(imageUrl);
                        }
                    });
                }

                // Displaying old files
                function showExistingUpload(event) {
                    const fileName = $(event.currentTarget).data('name');
                    const fileUrl = $(event.currentTarget).data('url');
                    
                    Swal.fire({
                        imageUrl: fileUrl,
                        imageAlt: fileName,
                        showConfirmButton: false,
                        background: 'transparent',
                        customClass: {
                            popup: 'custom-image-popup'
                        },
                        padding: '1rem',
                        width: '90vw',
                        heightAuto: true,
                        didOpen: () => {
                            $('.swal2-image').css({
                                'max-height': '80vh',
                                'max-width': '100%',
                                'height': 'auto',
                                'width': 'auto'
                            });

                            $('#custom-swal-close').remove();

                            const closeButton = $('<button>×</button>').css({
                                position: 'fixed',
                                top: '10px',
                                right: '10px',
                                zIndex: '9999',
                                background: 'rgba(202, 25, 41, 1)',
                                color: '#fff',
                                border: 'none',
                                borderRadius: '20%',
                                width: '40px',
                                height: '40px',
                                fontSize: '30px',
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            }).attr('id', 'custom-swal-close').on('click', () => Swal.close());

                            $('body').append(closeButton);
                        },
                        willClose: () => {
                            $('#custom-swal-close').remove();
                            URL.revokeObjectURL(fileUrl);
                        }
                    });
                }

                function onPaste(event) {
                    const clipboardData = event.originalEvent ? event.originalEvent.clipboardData : event.clipboardData;
                    if (!clipboardData) {
                        return;
                    }

                    if (clipboardData.files && clipboardData.files.length > 0) {
                        handleFiles(clipboardData.files);
                        event.preventDefault();
                        return;
                    }

                    const items = clipboardData.items;
                    if (!items || items.length === 0) {
                        return;
                    }

                    const files = [];
                    for (const item of items) {
                        const file = item.getAsFile();
                        if (file) {
                            files.push(file);
                        }
                    }

                    if (files.length > 0) {
                        handleFiles(files);
                        event.preventDefault();
                    }
                }

                function onDrop(event) {
                    event.preventDefault();
                    $overlay.css('display', 'none');
                    const files = event.originalEvent.dataTransfer.files;
                    if (files.length > 0) {
                        handleFiles(files);
                    }
                }

                // General for what to do with uploaded files
                function handleFiles(files) {
                    
                    if(!enableUploadNewAttachment){
                        const Toast = Swal.mixin({
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 2000,
                            didOpen: (toast) => {
                                toast.onmouseenter = Swal.stopTimer;
                                toast.onmouseleave = Swal.resumeTimer;
                            }
                        });
                        Toast.fire({
                            icon: "error",
                            title: "Uploading is disabled"
                        });
                        return;
                    }

                    // Convert FileList to array
                    const fileArray = Array.from(files);

                    // Filter out duplicates based on name and size
                    const newFiles = fileArray.filter(file =>
                        !uploadedFiles.some(existing =>
                            existing.name === file.name && existing.size === file.size
                        )
                    );

                    // Add new files to uploadedFiles
                    uploadedFiles = uploadedFiles.concat(newFiles);

                    // Initialize DataTransfer
                    const dataTransfer = new DataTransfer();

                    // Assign all files to dataTransfer object
                    uploadedFiles.forEach(file => {
                        if (file instanceof File) { // Validate File object
                            dataTransfer.items.add(file);
                        }
                    });

                    // Assign all file objects to file input
                    $fileInput[0].files = dataTransfer.files;

                    // Store file names in $fileUploadArea (fix overwriting issue)
                    const fileNames = newFiles.map(file => file.name);
                    fileNames.forEach(fileName => displayFileName({ name: fileName })); // Assuming displayFileName accepts an object
                    $fileUploadArea.data('file', fileNames); // Store array of names instead of single name
                    $fileUploadArea.data('allFiles', uploadedFiles.map(file => file.name));
                }

                // Create element for new file
                function displayFileName(file) {

                    const container = document.createElement('div');
                    container.className = 'file-item d-inline-flex align-items-center me-2 mb-3';

                    const fileElement = document.createElement('a');
                    fileElement.textContent = file.name;
                    fileElement.className = 'file-link btn btn-outline-primary border me-1 shadow';
                    fileElement.setAttribute('data-name', file.name);

                    const removeBtn = document.createElement('a');
                    removeBtn.textContent = '×';
                    removeBtn.className = 'remove-file btn btn-outline-danger btn-sm me-2 shadow';
                    removeBtn.setAttribute('data-name', file.name);

                    container.appendChild(fileElement);
                    container.appendChild(removeBtn);

                    $previewContainer.append(container);
                }

                // Remove the file from array: the elements will be removed when fileInput is changed
                function removeFile(event) {
                    event.preventDefault();

                    const fileName = $(this).data('name');

                    uploadedFiles = uploadedFiles.filter(f => f.name !== fileName);

                    $(this).closest('.file-item').remove();

                    $fileUploadArea.data('allFiles', uploadedFiles.map(file => file.name));

                    // Initialize DataTransfer
                    const dataTransfer = new DataTransfer();

                    // Assign all files to dataTransfer
                    uploadedFiles.forEach(file => {
                        if (file instanceof File) { // Validate File object
                            dataTransfer.items.add(file);
                        }
                    });

                    // Assign FileList to file input
                    $fileInput[0].files = dataTransfer.files;
                }

                function clearUploads() {
                    uploadedFiles = [];
                    $previewContainer.html('');
                    $fileUploadArea.data('file', null);
                    $fileUploadArea.data('allFiles', []);
                }

                function onDragEnter(event) {
                    event.preventDefault();
                    $overlay.css('display', 'flex');
                }

                function onDragOver(event) {
                    event.preventDefault();
                }

                function onDragLeave(event) {
                    if (!event.relatedTarget || $(event.relatedTarget).is('html')) {
                        $overlay.css('display', 'none');
                    }
                }

                return {
                    init,
                    getUploadedFiles: () => uploadedFiles // Expose for debugging
                };
            })();

            DragOverlayHandler.init();
        });
    </script>
}