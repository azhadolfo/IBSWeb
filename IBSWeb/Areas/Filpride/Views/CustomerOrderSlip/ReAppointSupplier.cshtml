@using IBS.Utility.Constants
@model CustomerOrderSlipAppointingSupplierViewModel

@{
    ViewData["Title"] = "COS - Appoint Supplier";
}
<div class="loader-container">
    <div class="loader"></div>
    <div class="loader-text">Loading...</div>
</div>
<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Reappoint Supplier</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4">
        <form method="post" class="row">
            <div class="border-2 p-3">
                <div asp-validation-summary="ModelOnly"></div>
                <input asp-for="CustomerOrderSlipId" type="hidden" />
                <input asp-for="ProductId" type="hidden" />
                <div class="form-group py-2 col-12">
                    <label class="control-label">Port List<span class="required">*</span></label>
                    <select asp-for="PickUpPointId" asp-items="@Model.PickUpPoints" class="form-select js-select2 border-0 shadow" style="width:100%">
                    </select>
                    <span asp-validation-for="PickUpPointId" class="text-danger"></span>
                </div>
                <div class="form-group py-2 col-12">
                    <label class="control-label">Delivery Option<span class="required">*</span></label><br />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" asp-for="DeliveryOption" value="@SD.DeliveryOption_ForPickUpByHauler" id="DeliveryType_ForPickUpByHauler" />
                        <label class="form-check-label" for="DeliveryType_ForPickUpByHauler">@SD.DeliveryOption_ForPickUpByHauler</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" asp-for="DeliveryOption" value="@SD.DeliveryOption_ForPickUpByClient" id="DeliveryType_ForPickUpByClient" />
                        <label class="form-check-label" for="DeliveryType_ForPickUpByClient">@SD.DeliveryOption_ForPickUpByClient</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" asp-for="DeliveryOption" value="@SD.DeliveryOption_DirectDelivery" id="DeliveryType_DirectDelivery" />
                        <label class="form-check-label" for="DeliveryType_DirectDelivery">@SD.DeliveryOption_DirectDelivery</label>
                    </div>
                    <span asp-validation-for="DeliveryOption" class="text-danger"></span>
                </div>
                <!-- Freight and SubPoRemarks fields -->
                <div id="freightRemarksSection" style="display:none;">
                    <div class="form-floating py-2 col-12">
                        <input asp-for="Freight" class="form-control border-0 shadow" placeholder="" required min="0.01" />
                        <label asp-for="Freight" class="ms-2">Freight<span class="required">*</span></label>
                        <span asp-validation-for="Freight" class="text-danger"></span>
                    </div>
                    <div class="form-floating py-2 col-12">
                        <textarea asp-for="SubPoRemarks" class="form-control border-0 shadow" placeholder="Add description." style="height: 100px" required></textarea>
                        <label asp-for="SubPoRemarks" class="control-label">Sub PO Remarks<span class="required">*</span></label>
                        <span asp-validation-for="SubPoRemarks" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group py-2 col-12">
                    <label class="control-label">Supplier List<span class="required">*</span></label>
                    <select asp-for="SupplierIds" asp-items="@Model.Suppliers"
                            class="form-select js-select2 border-0 shadow"
                            style="width:100%"
                            multiple="multiple">
                    </select>
                    <span asp-validation-for="SupplierIds" class="text-danger"></span>
                </div>
                <div class="form-group py-2 col-12">
                    <label class="control-label">PO List<span class="required">*</span></label>
                    <select asp-for="PurchaseOrderIds" asp-items="@Model.PurchaseOrders" 
                            class="form-select js-select2 border-0 shadow" 
                            style="width:100%"
                            multiple="multiple">
                    </select>
                    <span asp-validation-for="PurchaseOrderIds" class="text-danger"></span>
                </div>
                <div id="poQuantitySection" style="display:none;">
                    <div class="form-group py-2 col-12">
                        <label class="control-label">Enter Quantities for Selected POs</label>
                        <div id="poQuantities"></div>
                    </div>
                </div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control">Appoint</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Index" class="btn btn-outline-primary border  form-control ">Back to List</a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {

            // Function to handle freight section visibility
            function handleFreightSection(deliveryOption) {
                if (deliveryOption === '@SD.DeliveryOption_DirectDelivery') {
                    $('#freightRemarksSection').show();
                } else {
                    $('#freightRemarksSection').hide();
                }
            }

            // Trigger change event when a radio button is selected
            $('input[name="DeliveryOption"]').change(function () {
                handleFreightSection($(this).val());
            });

            // Ensure the freight section visibility on page load based on the selected value
            handleFreightSection($('input[name="DeliveryOption"]:checked').val());

            $(document).ready(function() {
                $('#SupplierIds').trigger('change');
            });

            function fetchPurchaseOrders() {
                var supplierIds = $('#SupplierIds').val();
                var productId = $('#ProductId').val();
                var cosId = @Model.CustomerOrderSlipId; // Pass the current COS ID
                var $poSelect = $('#PurchaseOrderIds');
                var cosVolume = @Model.COSVolume;

                // Clear existing options
                $poSelect.empty();

                if (supplierIds && supplierIds.length > 0) {
                    $.ajax({
                        url: '@Url.Action("GetPurchaseOrders", "CustomerOrderSlip")',
                        type: 'GET',
                        data: {
                            supplierIds: supplierIds.join(','),
                            productId: productId,
                            cosId: cosId
                        },
                        success: function (data) {
                            var preSelectedPOs = [];

                            $.each(data, function (index, po) {
                                var $option = $('<option></option>')
                                    .val(po.value)
                                    .text(po.text + ' (Balance: ' + formatNumber(po.availableBalance) + ')')
                                    .data('available-balance', po.availableBalance)
                                    .data('supplier-id', po.supplierId)
                                    .data('previous-quantity', po.previousQuantity);

                                // Mark pre-selected POs
                                if (po.isPreSelected) {
                                    $option.prop('selected', true);
                                    preSelectedPOs.push(po.value);
                                }

                                $poSelect.append($option);
                            });

                            // Reinitialize Select2 to reflect new options
                            $poSelect.trigger('change');

                            // If there are pre-selected POs, trigger quantity population
                            if (preSelectedPOs.length > 0) {
                                $('#PurchaseOrderIds').val(preSelectedPOs).trigger('change');
                            }
                        },
                        error: function () {
                            alert('Failed to retrieve POs');
                        }
                    });
                }
            }


            // Separate function for handling PO selection changes
            function handlePOSelectionChange() {
                var selectedPOs = $(this).val() || [];
                $('#poQuantities').empty();

                if (selectedPOs && selectedPOs.length > 0) {
                    $.each(selectedPOs, function (index, po) {
                        var selectedOption = $('#PurchaseOrderIds option[value="' + po + '"]');
                        var selectedText = selectedOption.text();
                        var availableBalance = selectedOption.data('available-balance');
                        var supplierId = selectedOption.data('supplier-id');
                        var previousQuantity = selectedOption.data('previous-quantity') || 0;
                        var cosVolume = @Model.COSVolume;

                        $('#poQuantities').append(
                            `<div class="form-group py-2">
                                <input type="hidden" name="PurchaseOrderQuantities[${index}].PurchaseOrderId" value="${po}" />
                                <input type="hidden" name="PurchaseOrderQuantities[${index}].SupplierId" value="${supplierId}" />
                                <label for="quantity_${po}">Enter Quantity for ${selectedText}</label>
                                <input type="number" name="PurchaseOrderQuantities[${index}].Quantity" class="form-control" id="quantity_${index}" 
                                       min="0" max="${availableBalance}" 
                                       placeholder="Quantity (max: ${availableBalance})" 
                                       value="${previousQuantity}" 
                                       required/>
                            </div>`
                        );
                    });

                    $('#poQuantitySection').show();
                } else {
                    $('#poQuantitySection').hide();
                }
            }

            // Only attach to specific events that should trigger refresh
            $('#SupplierIds').on('change', function() {
                // Use setTimeout to avoid race conditions with select2 internal events
                setTimeout(fetchPurchaseOrders, 50);
            });

            // Attach PO change handler separately
            $('#PurchaseOrderIds').on('change', handlePOSelectionChange);

           $('form').on('submit', function(event) {
                 var totalQuantity = 0;
                 var cosVolume = @Model.COSVolume;
                 var selectedPO = $('#PurchaseOrderIds').val();
                 var isValid = true;
                 console.log(cosVolume)
                 if (selectedPO.length > 0) {
                     $('#poQuantities input[type="number"]').each(function () {
                         var enteredQuantity = parseFloat($(this).val()) || 0;
                         var maxQuantity = parseFloat($(this).attr('max'));

                         if (enteredQuantity > maxQuantity) {
                             alert(`Quantity exceeds the available balance for this PO (max: ${maxQuantity}).`);
                             isValid = false;
                             return false;
                         }

                         totalQuantity += enteredQuantity;
                     });

                     // Check if total quantity is equal to COS volume
                     if (totalQuantity !== cosVolume) {
                         alert(`Total quantity (${totalQuantity}) must equal the available COS quantity of ${cosVolume}.`);
                         isValid = false;
                     }
                 }

                 // Additional validation for total quantity not exceeding the PO available balance
                 var totalAvailableBalance = 0;
                 $('#PurchaseOrderIds option:selected').each(function () {
                     totalAvailableBalance += parseFloat($(this).data('available-balance')) || 0;
                 });

                 if (totalQuantity > totalAvailableBalance) {
                     alert(`Total quantity (${totalQuantity}) exceeds the total available balance of the selected POs (${totalAvailableBalance}).`);
                     isValid = false;
                 }

                 if (!isValid) {
                     event.preventDefault();
                 }
             });

        });
    </script>
    <script>
        // Trigger the change event when the page loads to show the quantities for pre-selected POs
        $(document).ready(function () {
            $('#SupplierId').change();
            // Trigger change event when a radio button is selected
            $('input[name="DeliveryOption"]').change(function () {
                handleFreightSection($(this).val());
            });
        });
    </script>
}