@using IBS.Utility.Enums
@using Microsoft.AspNetCore.Identity
@model CustomerOrderSlipForApprovalViewModel
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "COS - Ops Manager Approval";
}

<div class="container mt-4">
    @if (Model.Status == nameof(CosStatus.Disapproved))
    {
        <div class="disapproved-indicator" style="position: absolute; top: 200px; left: 50%; transform: translate(-50%, 0); z-index: 9999; font-size: 72px; color: red; opacity: 0.5;">
            <b>DISAPPROVED</b>
        </div>
    }
    <div class="text-end">
        <img src="~/img/Filpride.jpg" width="130px" />
    </div>
    <div class="text-center mb-4">
        <h2><u><b>FILPRIDE RESOURCES INC.</b></u></h2>
        <p>
            57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone, Kalaklan,<br />
            Olongapo City, 2200 Zambales, Philippines<br />
            VAT Reg. TIN: 000-216-589-00000
        </p>
        <h3><b>CUSTOMER ORDER SLIP</b></h3>
        <h6 class="text-end"><b>No.&nbsp;@Html.DisplayFor(model => model.CustomerOrderSlip.CustomerOrderSlipNo)</b></h6>
    </div>

    <div class="table-responsive">
        <table class="table table-borderless">
            <tbody>
                <tr>
                    <td><b>Customer No:</b> @Model.CustomerOrderSlip.Customer?.CustomerCode</td>
                    <td class="text-end"><b>Date:</b> @Html.DisplayFor(model => model.CustomerOrderSlip.Date)</td>
                </tr>
                <tr>
                    <td><b>Customer Name:</b> @Model.CustomerOrderSlip.Customer?.CustomerName</td>
                    <td class="text-end"><b>Exp Date:</b> @Html.DisplayFor(model => model.CustomerOrderSlip.ExpirationDate)</td>
                </tr>
                <tr>
                    <td><b>Terms:</b> @Model.CustomerOrderSlip.Customer?.CustomerTerms</td>
                    <td class="text-end"><b>Customer PO#:</b> @Model.CustomerOrderSlip.CustomerPoNo</td>
                </tr>
                <tr>
                    <td><b>Branch:</b> @Model.CustomerOrderSlip.Branch</td>
                    <td class="text-end">
                        <b>IS PO#:</b>
                        @Model.CustomerOrderSlip.PurchaseOrder?.OldPoNo
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Unit</th>
                    <th>Vat</th>
                    <th>Del Price</th>
                    <th>Total Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Model.CustomerOrderSlip.Product.ProductName</td>
                    <td>@Html.DisplayFor(model => model.CustomerOrderSlip.Quantity)</td>
                    <td>@Model.CustomerOrderSlip.Product.ProductUnit</td>
                    <td>@Html.DisplayFor(model => model.VatAmount)</td>
                    <td>@Html.DisplayFor(model => model.CustomerOrderSlip.DeliveredPrice)</td>
                    <td>@Html.DisplayFor(model => model.CustomerOrderSlip.TotalAmount)</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <tr>
                <td><b>REMARKS:</b> @Html.DisplayFor(model => model.CustomerOrderSlip.Remarks)</td>
            </tr>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center table-primary" colspan="2">Net Delivered Price <i class="bi bi-info-circle" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="top" data-bs-content="All figures are exclusive of VAT."></i></th>
                </tr>
            </thead>
            <tbody>
                <tr><td class="text-center col-6">COS Price</td><td class="col-6">@Html.DisplayFor(model => model.NetOfVatCosPrice)</td></tr>
                <tr><td class="text-center">Product Cost</td><td>@Html.DisplayFor(model => model.NetOfVatProductCost)</td></tr>
                <tr><td class="text-center">Freight Charge</td><td>@Html.DisplayFor(model => model.NetOfVatFreightCharge)</td></tr>
                <tr><td class="text-center">Commission</td><td>@Html.DisplayFor(model => model.CustomerOrderSlip.CommissionRate)</td></tr>
                <tr><td class="text-center">Gross Margin</td><td><input type="text" id="grossMarginInput" value="@Html.DisplayFor(model => model.GrossMargin)" class="form-control" /></td></tr>
            </tbody>
        </table>
    </div>

    <div class="row pt-2">

        @if (Model.Status != nameof(CosStatus.Disapproved))
        {
            if (User.IsInRole("OperationManager"))
            {
                <div class="col-6 col-md-3">
                    <a id="approveButton" class="btn btn-primary form-control buttons">Action</a>
                </div>
            }
        }

        <div class="col-6 col-md-3">
            <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Index" class="btn btn-outline-primary border form-control buttons">Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('approveButton').addEventListener('click', function () {
            let grossMarginValue = document.getElementById('grossMarginInput').value;
            console.log(grossMarginValue)

            // Replace parentheses with a negative sign for backend processing
            if (grossMarginValue.includes('(') && grossMarginValue.includes(')')) {
                grossMarginValue = '-' + grossMarginValue.replace(/[()]/g, '');
            }

            if (grossMarginValue.includes('-') || parseFloat(grossMarginValue) === 0) {
                Swal.fire({
                    title: 'Negative or Zero Gross Margin',
                    text: 'Please provide a reason for approving a negative or zero gross margin.',
                    input: 'text',
                    inputPlaceholder: 'Enter reason',
                    showCancelButton: true,
                    confirmButtonText: 'Approve',
                    cancelButtonText: 'Cancel',
                    preConfirm: (reason) => {
                        if (!reason) {
                            Swal.showValidationMessage('Reason is required.');
                        }
                        return reason;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const reason = result.value;
                        var url = `@Url.Action("ApproveByOperationManager", "CustomerOrderSlip", new { area = "Filpride" })?id=${@Model.CustomerOrderSlip.CustomerOrderSlipId}&grossMargin=${grossMarginValue}&reason=${reason}`;
                        window.location.href = url;
                    }
                });
            } else {
                Swal.fire({
                    title: 'Confirm Approval',
                    text: "Are you sure you want to approve?",
                    icon: 'question',
                    showCancelButton: true,
                    showDenyButton: true,
                    confirmButtonText: 'Approve',
                    denyButtonText: 'Disapprove',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        var url = `@Url.Action("ApproveByOperationManager", "CustomerOrderSlip", new { area = "Filpride" })?id=${@Model.CustomerOrderSlip.CustomerOrderSlipId}&grossMargin=${grossMarginValue}`;
                        window.location.href = url;
                    } else if (result.isDenied) {
                    window.location.href = '@Url.Action("Disapprove", "CustomerOrderSlip", new { area = "Filpride", id = Model.CustomerOrderSlip.CustomerOrderSlipId })';
                    }
                });
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $('[data-bs-toggle="popover"]').popover();
        });
    </script>
}