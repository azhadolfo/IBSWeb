@using IBS.Utility.Constants
@using IBS.Utility.Enums
@using Microsoft.AspNetCore.Identity
@model CustomerOrderSlipForApprovalViewModel
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "COS - Ops Manager Approval";
    
    var selectedCompany = string.Empty;

    if (SignInManager.IsSignedIn(User))
    {
        selectedCompany = User.Claims.FirstOrDefault(c => c.Type == "Company")?.Value;
    }
    
    var decimalFormat = Model.CustomerOrderSlip!.Customer!.CustomerType != nameof(CustomerType.Government) ? SD.Two_Decimal_Format : SD.Four_Decimal_Format;
    
}

<div class="container mt-4">
    @if (Model.Status == nameof(CosStatus.Disapproved))
    {
        <div class="disapproved-indicator" style="position: absolute; top: 200px; left: 50%; transform: translate(-50%, 0); z-index: 9999; font-size: 72px; color: red; opacity: 0.5;">
            <b>DISAPPROVED</b>
        </div>
    }
    <div class="text-end">
        @if (selectedCompany == "Filpride")
        {
            <img src="~/img/Filpride-logo.png" width="130px"/>
        }
        @if (selectedCompany == "Mobility")
        {
            <img src="~/img/usa88-logo.png" width="130px"/>
        }
    </div>
    <div class="text-center mb-4">
        @if (selectedCompany == "Filpride")
        {
            <h2><u><b>FILPRIDE RESOURCES INC.</b></u></h2>
            <p>
                57 Westgate Office, Sampson Road, CBD, Subic Bay Freeport Zone, Kalaklan,<br />
                Olongapo City, 2200 Zambales, Philippines<br />
                VAT Reg. TIN: 000-216-589-00000
            </p>
        }
        @if (selectedCompany == "Mobility")
        {
            <h2><u><b>&nbsp;MOBILITY GROUP CORP.&nbsp;</b></u></h2>
            <p style="line-height: 1; margin-top:-7px;">
                Tower B Phoenix Sun Business Park Eulogio Rodriguez JR, ave.,<br />
                Bagumbayan Libis 1110 Quezon City NCR, Second District Philippines<br />
                VAT Reg. TIN: 776-536-510-00000
            </p>
        }
        <h3><b>CUSTOMER ORDER SLIP</b></h3>
        <h6 class="text-end"><b>No.&nbsp;@Html.DisplayFor(model => model.CustomerOrderSlip!.CustomerOrderSlipNo)</b></h6>
    </div>

    <div class="table-responsive">
        <table class="table table-borderless">
            <tbody>
                <tr>
                    <td><b>Customer No:</b> @Model.CustomerOrderSlip.Customer?.CustomerCode</td>
                    <td class="text-end"><b>Date:</b> @Model.CustomerOrderSlip.Date.ToString(SD.Date_Format)</td>
                </tr>
                <tr>
                    <td><b>Customer Name:</b> @Model.CustomerOrderSlip.Customer?.CustomerName</td>
                    <td class="text-end"><b>Exp Date:</b> @Model.CustomerOrderSlip.ExpirationDate?.ToString(SD.Date_Format)</td>
                </tr>
                <tr>
                    <td><b>Terms:</b> @Model.CustomerOrderSlip.Customer?.CustomerTerms</td>
                    <td class="text-end"><b>Customer PO#:</b> @Model.CustomerOrderSlip.CustomerPoNo</td>
                </tr>
                <tr>
                    <td><b>Branch:</b> @Model.CustomerOrderSlip.Branch</td>
                    <td class="text-end">
                        <b>IS PO#:</b>
                        @Model.CustomerOrderSlip.PurchaseOrder?.OldPoNo
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Unit</th>
                    <th>Vat</th>
                    <th>Del Price</th>
                    <th>Total Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Model.CustomerOrderSlip.Product?.ProductName</td>
                    <td>@Model.CustomerOrderSlip.Quantity.ToString(decimalFormat)</td>
                    <td>@Model.CustomerOrderSlip.Product?.ProductUnit</td>
                    <td>@Model.VatAmount.ToString(decimalFormat)</td>
                    <td>@Html.DisplayFor(model => model.CustomerOrderSlip!.DeliveredPrice)</td>
                    <td>@Model.CustomerOrderSlip.TotalAmount.ToString(decimalFormat)</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <tr>
                <td><b>REMARKS:</b> @Html.DisplayFor(model => model.CustomerOrderSlip!.Remarks)</td>
            </tr>
        </table>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center table-primary" colspan="2">Net Delivered Price <i class="bi bi-info-circle" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="top" data-bs-content="All figures are exclusive of VAT."></i></th>
                </tr>
            </thead>
            <tbody>
                <tr><td class="text-center col-6">COS Price</td><td class="col-6">@Html.DisplayFor(model => model.NetOfVatCosPrice)</td></tr>
                <tr><td class="text-center">Product Cost</td><td>@Html.DisplayFor(model => model.NetOfVatProductCost)</td></tr>
                <tr><td class="text-center">Freight Charge</td><td>@Html.DisplayFor(model => model.NetOfVatFreightCharge)</td></tr>
                <tr><td class="text-center">Commission</td><td>@Html.DisplayFor(model => model.CustomerOrderSlip!.CommissionRate)</td></tr>
                <tr><td type="text" class="text-center" id="grossMarginInput">Gross Margin</td><td>@Html.DisplayFor(model => model.GrossMargin)</td></tr>
            </tbody>
        </table>
    </div>

    @if (Model.UploadedFiles != null)
    {
        @foreach (var imageInstance in Model.UploadedFiles)
        {
            <div class="row">
                <div class="col-3">
                    <a class="dropdown-item viewUpload" 
                       href="#" 
                       data-image-url="@imageInstance.SignedUrl" 
                       data-file-name="@imageInstance.FileName">
                        <i class="bi bi-eye-fill"></i> @imageInstance.FileName
                    </a>
                </div>
            </div>
        }
    }

    <div class="row pt-2">

        @if (Model.Status != nameof(CosStatus.Disapproved))
        {
            if (User.IsInRole("OperationManager") || User.IsInRole("Admin") || User.IsInRole("HeadApprover"))
            {
                <div class="col-6 col-md-3">
                    <a id="approveButton" class="btn btn-primary form-control buttons">Action</a>
                </div>
            }
        }

        <div class="col-6 col-md-3">
            <a asp-area="Filpride" asp-controller="CustomerOrderSlip" asp-action="Index" class="btn btn-outline-primary border form-control buttons">Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('approveButton').addEventListener('click', function () {
            let grossMarginValue = document.getElementById('grossMarginInput').innerText;

            // Replace parentheses with a negative sign for backend processing
            if (grossMarginValue.includes('(') && grossMarginValue.includes(')')) {
                grossMarginValue = '-' + grossMarginValue.replace(/[()]/g, '');
            }

            if (grossMarginValue.includes('-') || parseFloat(grossMarginValue) === 0) {
                Swal.fire({
                    title: 'Negative or Zero Gross Margin',
                    text: 'Please provide a reason for approving a negative or zero gross margin.',
                    input: 'text',
                    inputPlaceholder: 'Enter reason',
                    showCancelButton: true,
                    confirmButtonText: 'Approve',
                    cancelButtonText: 'Cancel',
                    preConfirm: (reason) => {
                        if (!reason) {
                            Swal.showValidationMessage('Reason is required.');
                        }
                        return reason;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const reason = result.value;
                        var url = `@Url.Action("ApproveByOperationManager", "CustomerOrderSlip", new { area = "Filpride" })?id=${@Model.CustomerOrderSlip.CustomerOrderSlipId}&reason=${encodeURIComponent(reason)}`;
                        window.location.href = url;
                    }
                });
            } else {
                Swal.fire({
                    title: 'Confirm Approval',
                    text: "Are you sure you want to approve?",
                    icon: 'question',
                    showCancelButton: true,
                    showDenyButton: true,
                    confirmButtonText: 'Approve',
                    denyButtonText: 'Disapprove',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        var url = `@Url.Action("ApproveByOperationManager", "CustomerOrderSlip", new { area = "Filpride" })?id=${@Model.CustomerOrderSlip.CustomerOrderSlipId}`;
                        window.location.href = url;
                    } else if (result.isDenied) {
                    window.location.href = '@Url.Action("Disapprove", "CustomerOrderSlip", new { area = "Filpride", id = Model.CustomerOrderSlip.CustomerOrderSlipId })';
                    }
                });
            }
        });

        document.querySelectorAll('.viewUpload').forEach(element => {
            element.addEventListener('click', function (event) {
                event.preventDefault(); // Prevent <a> tag from navigating

                var maxHeight = window.innerHeight * 0.8;
                var imageUrl = this.dataset.imageUrl; // Get data-image-url from the clicked element
                var fileName = this.dataset.fileName; // Get data-file-name for alt text or display

                if (!imageUrl) {
                    console.error('No image URL found for this element');
                    return;
                }

                console.log('Image URL:', imageUrl);
                console.log('File Name:', fileName);

                Swal.fire({
                    imageUrl: imageUrl,
                    imageAlt: fileName || 'Custom image', // Use fileName as alt text
                    showConfirmButton: false,
                    background: 'transparent',
                    customClass: {
                        popup: 'custom-image-popup'
                    },
                    padding: 0,
                    width: '90vw',
                    heightAuto: true,
                    didOpen: () => {
                        // Style the image
                        $('.swal2-image').css({
                            'max-height': '80vh',
                            'max-width': '90vw',
                            'height': 'auto',
                            'width': 'auto'
                        });

                        // Remove existing close button to prevent duplicates
                        $('#custom-swal-close').remove();

                        // Create and append custom close button
                        const closeButton = $('<button>×</button>')
                            .css({
                                position: 'fixed',
                                top: '10px',
                                right: '10px',
                                zIndex: '9999',
                                background: 'rgba(202, 25, 41, 1)',
                                color: '#fff',
                                border: 'none',
                                borderRadius: '20%',
                                width: '40px',
                                height: '40px',
                                fontSize: '30px',
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center'
                            })
                            .attr('id', 'custom-swal-close')
                            .on('click', () => Swal.close());

                        $('body').append(closeButton);
                    },
                    willClose: () => {
                        // Clean up close button
                        $('#custom-swal-close').remove();
                    }
                });
            });
        });
    </script>
    @* <script src="~/js/disable-dev-tools-in-print.js" asp-append-version="true"></script> *@
}