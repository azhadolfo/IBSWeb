@model IEnumerable<CheckVoucherVM>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Check Voucher";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">CHECK VOUCHER</h2>
            </div>
        </div>
    </div>
    <div class="card-body p-4 table-responsive">
        <div class="row pb-3">
            <div class="col-6">
            </div>
        </div>
        <table class="table table-bordered table-striped" id="dataTable">
            <thead>
                <tr>
                    <th>
                        CV No
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Header.Date)
                    </th>
                    <th>
                        Supplier
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Header.Category)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Header.CreatedBy)
                    </th>
                    <th>
                        Status
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Header.CheckVoucherHeaderNo)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Header.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Header.Supplier.SupplierName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Header.Category)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Header.CreatedBy)
                        </td>
                        <td>
                            @{
                                var status = item.Header.PostedBy != null && item.Header.VoidedBy == null && item.Header.CanceledBy == null
                                    ? "Posted"
                                    : item.Header.VoidedBy != null
                                        ? "Voided"
                                        : item.Header.CanceledBy != null
                                            ? "Cancelled"
                                            : "Pending";
                            }
                            <span class="badge rounded-pill @if(status == "Posted") {<text>bg-info</text>} else if(status == "Voided") {<text>bg-danger</text>} else if(status == "Cancelled") {<text>bg-warning</text>}">@status</span>
                        </td>
                        <td class="text-center">
                            <div class="dropdown" style="@(item.Header.VoidedBy != null || item.Header.CanceledBy != null ? "display:none;" : "")">
                                <button class="btn btn-light dropdown-toggle" type="button" id="actionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    Actions
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown">
                                    @if (item.Header.PostedBy == null)
                                    {
                                        <li>
                                            @if (item.Header.Category == "Trade")
                                            {
                                                <a asp-action="EditTrade" asp-route-id="@item.Header.CheckVoucherHeaderId" class="dropdown-item">Edit</a>
                                            }
                                            else if (item.Header.Category == "Non-Trade" && item.Header.CvType == "Invoicing")
                                            {
                                                <a asp-action="EditNonTradeInvoicing" asp-route-id="@item.Header.CheckVoucherHeaderId" class="dropdown-item">Edit</a>
                                            }
                                            else
                                            {
                                                <a asp-action="EditNonTradePayment" asp-route-id="@item.Header.CheckVoucherHeaderId" class="dropdown-item">Edit</a>
                                            }
                                        </li>
                                        <li>
                                            <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#Preview-@item.Header.CheckVoucherHeaderId" data-bs-url="@Url.Action($"Preview/{item.Header.CheckVoucherHeaderId}")">
                                                Preview
                                            </button>
                                        </li>
                                        <li><a class="dropdown-item" onclick="confirmPost(@item.Header.CheckVoucherHeaderId)">Post</a></li>
                                        <li><a class="dropdown-item" onclick="confirmCancel(@item.Header.CheckVoucherHeaderId)">Cancel</a></li>
                                    }
                                    else
                                    {
                                        <li><a class="dropdown-item" asp-action="Print" asp-route-id="@item.Header.CheckVoucherHeaderId">Print</a></li>
                                        <li><a class="dropdown-item" onclick="confirmVoid(@item.Header.CheckVoucherHeaderId)">Void</a></li>
                                    }
                                </ul>
                            </div>

                            @await Html.PartialAsync("_Preview", item)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        function confirmPost(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Post'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Post", "CheckVoucher", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmVoid(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Replace with the actual URL that you want to redirect to
                    var url = `@Url.Action("Void", "CheckVoucher", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
    <script>
        function confirmCancel(id) {
            Swal.fire({
                title: "Please Input Remarks",
                html:
                    "<input id='cancellationRemarks' type='text' class='swal2-input' placeholder='Remarks'>",
                focusConfirm: false,
                allowEscapeKey: false,
                allowOutsideClick: false,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.isConfirmed) {
                    var cancellationRemarks = $("#cancellationRemarks").val();
                    // Encode the cancellationRemarks to make it URL safe
                    var encodedRemarks = encodeURIComponent(cancellationRemarks);
                    // Append the encoded remarks as a parameter in the URL
                    var url = `@Url.Action("Cancel", "CheckVoucher", new { area = "Filpride" })/${id}`;
                    window.location.href = url;
                }
            })
        }
    </script>
}