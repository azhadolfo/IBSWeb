@model CheckVoucherNonTradeInvoicingViewModel

@{
    ViewData["Title"] = "Edit Non Trade Invoicing";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<partial name="_Notification">
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-secondary bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Edit Non Trade Invoicing</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <form method="post" enctype="multipart/form-data">
                <div class="row">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group mb-3">
                        <label asp-for="TransactionDate" class="control-label"></label>
                        <input asp-for="TransactionDate" type="Date" class="form-control" />
                        <span asp-validation-for="TransactionDate" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label class="control-label">Supplier</label>
                        <input asp-for="SupplierId" type="hidden" />
                        <select asp-for="SupplierId" asp-items="@Model.Suppliers" class="form-select js-select2 supplier" style="width:100%" disabled>
                            <option></option>
                        </select>
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                    </div>
                    <input asp-for="SupplierName" type="hidden" />
                    <input asp-for="CVId" type="hidden" />
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierAddress" type="text" class="form-control" placeholder="Optional" readonly />
                        <label asp-for="SupplierAddress" class="control-label ms-2"></label>
                        <span asp-validation-for="SupplierAddress" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="SupplierTinNo" type="text" class="form-control" placeholder="Optional" readonly />
                        <label asp-for="SupplierTinNo" class="control-label ms-2"></label>
                        <span asp-validation-for="SupplierTinNo" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea asp-for="PoNo" class="form-control" placeholder="Input si no" style="height: 100px"></textarea>
                        <label asp-for="PoNo" class="control-label ms-2">PO No</label>
                        <span asp-validation-for="PoNo" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea asp-for="SiNo" class="form-control" placeholder="Input po no" style="height: 100px"></textarea>
                        <label asp-for="SiNo" class="control-label ms-2">SI No</label>
                        <span asp-validation-for="SiNo" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Total" class="control-label"></label>
                        <input asp-for="Total" class="form-control money inputAmount" placeholder="0.000" />
                        <span asp-validation-for="Total" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label class="control-label">Upload File (Optional)</label>
                        <input name="file" type="file" class="form-control" />
                    </div>
                    <div class="form-floating mb-3">
                        <textarea asp-for="Particulars" class="form-control" placeholder="Leave a remarks here" style="height: 100px"></textarea>
                        <label asp-for="Particulars" class="control-label ms-2">Particulars</label>
                        <span asp-validation-for="Particulars" class="text-danger"></span>
                    </div>
                    <input type="hidden" id="StartDate" name="StartDate" />
                    <input type="hidden" id="NumberOfYears" name="NumberOfYears" value="0" />
                    <div class="form-group">
                        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#AddAccEntry">
                            Add Entry
                        </button>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="w-50" colspan="2">Account No.</th>
                                    <th class="w-25">
                                        Debit
                                    </th>
                                    <th class="w-25">
                                        Credit
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="accountingEntriesBody" class="defaultEntry">
                            </tbody>
                            <tbody>
                                <tr>
                                    <td class="text-end" colspan="2">TOTAL:</td>
                                    <td class="totalDebit">0.0000</td>
                                    <td class="totalCredit">0.0000</td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <br />
                    <div class="row pt-2">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" onclick="validateDebitAndCredit(event)">Save</button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a asp-area="Filpride" asp-controller="CheckVoucher" asp-action="InvoiceIndex" class="btn btn-outline-primary border  form-control ">Back to List</a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="AddAccEntry" data-bs-backdrop="static" tabindex="-1" aria-labelledby="AddAccEntryLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="AddAccEntryLabel">Add Accounting Entry</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-group">
                            <label class="control-label">Account No.</label>
                            <select id="AccountNo" asp-items="@Model.ChartOfAccounts" class="form-select" style="width: 100%">
                                <option></option>
                            </select>
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group pt-4">
                            <label class="control-label">Debit</label>
                            <input id="debit" value="0.0000" class="form-control moneyInput" placeholder="0.0000" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group pt-4">
                            <label class="control-label">Credit</label>
                            <input id="credit" value="0.0000" class="form-control moneyInput" placeholder="0.0000" />
                            <span class="text-danger"></span>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="calculateButton" onclick="saveAccountingEntry()">Create</button>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script>
            $('#AccountNo').select2({
                dropdownParent: $('#AddAccEntry')
            });
            var globalsupplierId = 0;
            $(".supplier").each(function () {
                var supplierId = $(this).val();
                globalsupplierId = supplierId;
                computeDefaultEntry(supplierId)
            });
            $(".supplier").change(function () {
                var supplierId = $(this).val();
                globalsupplierId = supplierId;
                computeDefaultEntry(supplierId)
                getDefaultExpense(supplierId)
            });
            function computeDefaultEntry(supplierId) {

                var effectiveSupplierId = supplierId || globalsupplierId;

                if (effectiveSupplierId !== "") {
                    $.ajax({
                        url: '@Url.Action("GetSupplierDetails", "CheckVoucher", new { area = "Filpride" })',
                        method: "GET",
                        data: { supplierId: effectiveSupplierId },
                        success: function (data) {
                            if (data.taxType === "Withholding Tax") {
                                $(".EWTCredit").show(); // Show the EWT table rows
                            } else {
                                $(".EWTCredit").hide(); // Hide the EWT table rows
                            }
                            if (data.vatType === "Vatable") {
                                $(".vatInputDebit").show(); // Show the EWT table rows
                            } else {
                                $(".vatInputDebit").hide(); // Hide the EWT table rows
                            }
                            if (data) {
                                $("#SupplierName").val(data.name);
                                $("#SupplierAddress").val(data.address);
                                $("#SupplierTinNo").val(data.tinNo);
                                $(".withholdingTaxNumber").val(data.withholdingTax !== null ? data.withholdingTax.split(' ')[0] : null);
                                $(".withholdingTaxTitle").val(data.withholdingTax !== null ? data.withholdingTax.replace(/^\s*\S+\s*/, '').trim() : null);
                            } else {
                                $("#SupplierName").val("");
                                $("#SupplierAddress").val("");
                                $("#SupplierTinNo").val("");
                                $(".withholdingTaxNumber").val("");
                                $(".withholdingTaxtitle").val("");
                            }
                            $(document).ready(function () {
                                $(".supplier").change(function () {
                                    var amountInputs = document.querySelectorAll('.inputAmount');
                                    updateAmounts(amountInputs, totalDebit);
                                });

                                $(document).on('input', '.inputAmount', function () {
                                    var amountInputs = document.querySelectorAll('.inputAmount');
                                    var totalDebit = 0;

                                    $("#accountingEntriesBody tr, .defaultEntry tr").each(function (index) {
                                        if (index > 1) { // Start from the 5th row (0-based index)
                                            var debitValue = $(this).find("td:eq(2) input").val();
                                            var debit = parseNumber(debitValue);
                                            totalDebit += debit;
                                        }
                                    });
                                    updateAmounts(amountInputs, totalDebit);
                                });

                                function updateAmounts(amountInputs, totalDebit) {
                                    var totalNetOfEWT = 0;
                                    var totalEWT = 0;
                                    var vatInput = 0;
                                    var netOfVatAmount = 0;
                                    amountInputs.forEach(function (input) {
                                        var rawValue = input.value;
                                        var totalValue = parseNumber(rawValue);

                                        // Perform calculations
                                        var netOfVat = totalValue / 1.12;
                                        var vat = netOfVat * 0.12;
                                        var ewt = netOfVat * (data.category === "Trade" ? 0.01 : data.taxPercent / 100);
                                        var rrAmountNetOfEWT = totalValue - ewt;

                                        if (data.vatType === "Vatable" && data.taxType === "Withholding Tax") {
                                            totalNetOfEWT += rrAmountNetOfEWT + totalDebit;
                                            totalEWT += ewt;
                                            vatInput = vat;
                                            netOfVatAmount = netOfVat;
                                        } else if (data.vatType === "Vatable") {
                                            totalNetOfEWT += rrAmountNetOfEWT + totalDebit;
                                            vatInput = vat;
                                            netOfVatAmount = netOfVat;
                                        } else if (data.taxType === "Withholding Tax") {
                                            totalNetOfEWT += rrAmountNetOfEWT + totalDebit;
                                            totalEWT += ewt;
                                            netOfVatAmount = netOfVat;
                                        } else {
                                            totalNetOfEWT += rrAmountNetOfEWT + totalDebit;
                                            netOfVatAmount += totalValue;
                                        }
                                    });
                                    $(".vatInput").val(formatNumber(vatInput));
                                    $(".netOfVat").val(formatNumber(netOfVatAmount));
                                    $(".totalNetOfEWT").val(formatNumber(totalNetOfEWT));
                                    $(".totalEWT").val(formatNumber(totalEWT));
                                    updateTotalDebitAndCredit();
                                }
                                // //initialAmountInputs set to zero to get the exact value of details
                                // var initialAmountInputs = document.querySelectorAll('.inputAmount');
                                // updateAmounts(initialAmountInputs);
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching:', error);
                        }
                    });
                } else {
                    $("#SupplierName").val("");
                    $("#SupplierAddress").val("");
                    $("#SupplierTinNo").val("");
                    $(".withholdingTaxNumber").val("");
                    $(".withholdingTaxtitle").val("");
                }
            };

            function saveAccountingEntry(event) {
                // Get the values from the modal inputs
                var accountNumber = $("#AccountNo").val();
                var accountNumberText = $("#AccountNo option:selected").text().replace(/^\S+\s/, '');
                var debit = parseNumber($("#debit").val());
                var credit = parseNumber($("#credit").val());

                if (debit === 0 && credit === 0) {
                    event.preventDefault();
                    alert('Please input amount');
                    return;
                } else if (accountNumberText === "") {
                    event.preventDefault();
                    alert('Please select Account No.!');
                    return;
                }

                // Format debit and credit values with commas and two decimal places
                var formattedDebit = formatNumber(debit);
                var formattedCredit = formatNumber(credit);

                // Create a new row with the text only and a hidden input for the value
                var newRow = `<tr>
                                    <td><input type='text' name='AccountNumber' value='${accountNumber}' style='border:none' class='w-100' readonly /></td>
                                    <td><input type='text' name='AccountTitle' value='${accountNumberText}' style='border:none' class='w-100' readonly /></td>
                                    <td><input name='Debit' id='debit_${accountNumber}' value='${formattedDebit}' style='border:none' class='w-100' readonly /></td>
                                    <td><input name='Credit' id='credit_${accountNumber}' value='${formattedCredit}' style='border:none' class='w-100' readonly /></td>
                                    <td><button type='button' class='btn btn-danger btn-sm' onclick='removeRow(this)'>Remove</button></td>
                                </tr>`;

                // Append the new row to the table body
                $("#accountingEntriesBody").append(newRow);

                // Close the modal
                $("#AddAccEntry").modal("hide");

                // Clear the modal inputs
                $("#AccountNo").val(""); // Reset the select to its default state
                $("#AccountNo").trigger("change"); // Trigger change event for the select
                $("#Debit").val("0.000");
                $("#Credit").val("0.000");

                var netOfEwt = parseNumber($(".totalNetOfEWT").val()) + debit;
                $(".totalNetOfEWT").val(formatNumber(netOfEwt));

                updateTotalDebitAndCredit();
            }

            function updateTotalDebitAndCredit() {
                var totalDebit = 0;
                var totalCredit = 0;

                // Loop through each row in the table body and sum up the debit values
                $("#accountingEntriesBody tr, .defaultEntry tr").each(function () {
                    var debitInput = $(this).find("td:eq(2) input").val();
                    var creditInput = $(this).find("td:eq(3) input").val();
                    // Ensure debitInput and creditInput are strings before using replace
                    debitInput = debitInput ? String(debitInput) : ""; // convert to string if not null/undefined
                    creditInput = creditInput ? String(creditInput) : "";

                    var debit = parseNumber(debitInput);
                    var credit = parseNumber(creditInput);

                    totalDebit += debit;
                    totalCredit += credit;
                });

                // Display the total debit value
                $(".totalDebit").text(formatNumber(totalDebit));
                $(".totalCredit").text(formatNumber(totalCredit));
                $("#debit").val("0.000");
                $("#credit").val("0.000");
            }

            // Function to remove the corresponding row
            function removeRow(button) {
                var row = $(button).closest("tr");

                // Find the value in the specified cell (third column)
                var debitValue = parseNumber(row.find("td:eq(2) input").val());
                var netOfEwt = parseNumber($(".totalNetOfEWT").val()) - debitValue;

                $(".totalNetOfEWT").val(formatNumber(netOfEwt));

                row.remove();
                updateTotalDebitAndCredit();
            }
        </script>
        <script>
            function getDefaultExpense(supplierId) {
                // Make an AJAX request to get the RRs based on the selected POIds and display criteria
                $.ajax({
                    url: '@Url.Action("GetDefaultExpense", "CheckVoucher", new { area = "Filpride" })',
                    method: "GET",
                    data: { supplierId: supplierId }, // Pass PO numbers to controller
                    traditional: true, // Ensure jQuery sends the array properly
                    success: function (data) {
                        if (data) {
                            // Clear existing options
                            $("#AccountNumber").empty();
                            // Add new options based on the fetched data
                            $.each(data, function (index, defaultExpense) {
                                let selected = defaultExpense.isSelected ? 'selected' : '';
                                $('#AccountNumber').append('<option value="' + defaultExpense.accountNumber + '" ' + selected + '>' + defaultExpense.accountTitle + '</option>');
                                var accountNumberText = $("#AccountNumber option:selected").text();
                                $('.defaultExpenseTitle').val(accountNumberText);
                            });

                            // Handle dropdown change event
                            $('#AccountNumber').on('change', function () {
                                let selectedValue = $(this).val();
                                var accountNumberText = $("#AccountNumber option:selected").text();
                                $('.defaultExpenseTitle').val(accountNumberText);
                            });
                        } else {
                            // Clear the fields if no RRs are found
                            $("#AccountNumber").empty();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching:', error);
                    }
                });
            }
        </script>
        <script>
            $("#AccountNo").change(function () {
                var accountNumber = $(this).val();
                if (accountNumber.startsWith("10201") || accountNumber.startsWith("10105")) {
                    // Close the modal
                    $("#AddAccEntry").modal("hide");
                    Swal.fire({
                        title: "Create Automatic Journal Entry",
                        text: "Do you want to create an automatic journal entry?",
                        icon: "question",
                        showCancelButton: true,
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        confirmButtonText: "Yes",
                        cancelButtonText: "No",
                        showLoaderOnConfirm: true,
                        preConfirm: () => {
                            return new Promise((resolve) => {
                                Swal.fire({
                                    title: "Input Start Date and Number of Years",
                                    html:
                                        "<input id='start-date' type='date' class='swal2-input' placeholder='Start Date'>" +
                                        "<input id='num-years' type='number' class='swal2-input' placeholder='Number of Years'>",
                                    focusConfirm: false,
                                    allowEscapeKey: false,
                                    allowOutsideClick: false,
                                    preConfirm: () => {
                                        return [
                                            $("#start-date").val(),
                                            $("#num-years").val()
                                        ];
                                    }
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        resolve(result.value);
                                    }
                                });
                            });
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Result contains an array with the start date and number of years
                            var startDate = result.value[0];
                            var numYears = result.value[1];
                            // Assign the values to hidden inputs in your form
                            $("#StartDate").val(startDate);
                            $("#NumberOfYears").val(numYears);
                            // Close the modal
                            $("#AddAccEntry").modal("show");
                        }
                    });
                }
            });
        </script>
        <script>
            function validateDebitAndCredit(event) {
                var totalDebit = parseNumber($(".totalDebit").text());
                var totalCredit = parseNumber($(".totalCredit").text());

                if (totalDebit !== totalCredit) {
                    alert("Debit and Credit totals must be equal.");
                    event.preventDefault(); // Prevent form submission
                    return false;
                }

                if (totalDebit === 0 && totalCredit === 0) {
                    alert("Debit and Credit cannot both be zero.");
                    event.preventDefault(); // Prevent form submission
                    return false;
                }

                return true; // Allow form submission
            }
        </script>
        <script>
            $(document).ready(function () {

                $('.js-select-defaultExpense').select2({
                    placeholder: "Select an option...",
                    allowClear: true,
                    width: 'resolve',
                    theme: 'classic',
                    multiple: false // Set multiple to false if the model data is an array, true otherwise
                });
            });
        </script>
        <script>
            $(document).ready(function () {
                var accountNumbers = @Html.Raw(Json.Serialize(Model.AccountNumber));
                var accountTitles = @Html.Raw(Json.Serialize(Model.AccountTitle));
                var debits = @Html.Raw(Json.Serialize(Model.Debit));
                var credits = @Html.Raw(Json.Serialize(Model.Credit));
                var defaultExpenses = @Html.Raw(Json.Serialize(Model.DefaultExpenses));
                var taxType = @Html.Raw(Json.Serialize(Model.Headers.Supplier.TaxType));

                var total = 0;

                for (var i = 0; i < accountNumbers.length; i++) {
                    var widthClass = 'w-100';
                    var defaultExpenseTitle = 'defaultExpenseTitle';
                    var defaultExpenseClass = 'form-select js-select-defaultExpense w-100';
                    var options = '<option></option>';
                    var firstRecordDebitClass = '';
                    var secondRecordDebitClass = '';
                    var thirdRecordCreditClass = '';
                    var fourthRecordCreditClass = '';
                    var withholdingTaxNumberClass = '';
                    var withholdingTaxTitleClass = '';
                    var vatInputDebitClass = '';
                    var EWTCreditClass = '';
                    var defaultExpenseAccountNumberClass = '';
                    var defaultExpenseAccountTitleClass = '';

                    if (i === 0) {
                        firstRecordDebitClass = 'netOfVat';
                        defaultExpenseAccountNumberClass = 'defaultExpenseAccountNumberClass';
                        defaultExpenseAccountTitleClass = 'defaultExpenseAccountTitleClass';
                    }
                    else if (i === 1) {
                        secondRecordDebitClass = 'vatInput';
                        vatInputDebitClass = taxType == "Exempt" ? '' : 'vatInputDebit';
                    }
                    else if (i === 2) {
                        thirdRecordCreditClass = 'totalEWT';
                        withholdingTaxNumberClass = 'withholdingTaxNumber';
                        withholdingTaxTitleClass = 'withholdingTaxTitle';
                        EWTCreditClass = taxType == "Exempt" ? '' : 'EWTCredit';
                    }
                    else if (i === 3) {
                        fourthRecordCreditClass = 'totalNetOfEWT';
                    }
                    if (i === 1 && taxType == "Exempt") {
                        fourthRecordCreditClass = 'totalNetOfEWT';
                    }

                    defaultExpenses.forEach(function (expense) {
                        // Check if the current expense value matches the account number
                        var selected = expense.value === accountNumbers[i] ? ' selected' : '';
                        options += '<option value="' + expense.value + '"' + selected + '>' + expense.text + '</option>';
                    });

                    var row = `
                              <tr class="${vatInputDebitClass} ${EWTCreditClass}">
                                   <td><input type="text" name="AccountNumber" class="${widthClass} ${withholdingTaxNumberClass} ${defaultExpenseAccountNumberClass}" value="${accountNumbers[i]}" style='border:none' readonly/></td>
                                ${i !== 0
                                ? `<td><input type="text" name="AccountTitle" value="${accountTitles[i]}" class="${widthClass} ${withholdingTaxTitleClass}" style="border:none" readonly /></td>`
                                : `<td>
                                    <input type="hidden" name="AccountTitle" value="${accountTitles[i]}" class="${defaultExpenseAccountTitleClass}"/>
                                    <select class="${defaultExpenseClass}" onchange="handleSelectChange(event)" >${options}</select>
                                   </td>`
                                }
                                   <td><input type="text" name="Debit" value="${debits[i].toLocaleString('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 })}" class="${firstRecordDebitClass} ${secondRecordDebitClass} ${widthClass}" style="border:none" readonly /></td>
                                   <td><input type="text" name="Credit" value="${credits[i].toLocaleString('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 })}" class="${thirdRecordCreditClass} ${fourthRecordCreditClass} ${widthClass}" style="border:none" readonly /></td>
                                ${(taxType === "Exempt" && i < 2) || (taxType !== "Exempt" && i < 4)
                                ? '<td></td>'
                                : '<td><button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">Remove</button></td>'
                                }
                             </tr>`;

                    $('.defaultEntry').append(row);

                    // Reinitialize Select2 on the newly added elements
                    $('.js-select-defaultExpense').select2({
                        placeholder: "Select an option...",
                        allowClear: true,
                        width: 'resolve',
                        theme: 'classic'
                    });

                    if (i < 2) {
                        total += debits[i];
                    }
                }

                $(".inputAmount").val(formatNumber(total));
                updateTotalDebitAndCredit();
            });
        </script>
        <script>
            function handleSelectChange(event) {
                var selectedValue = event.target.value;
                var selectedText = event.target.options[event.target.selectedIndex].text;
                $(".defaultExpenseAccountNumberClass").val(selectedValue);
                $(".defaultExpenseAccountTitleClass").val(selectedText);
            }
        </script>
    }
